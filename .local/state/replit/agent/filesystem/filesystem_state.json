{"file_contents":{"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, jsonb, index, numeric } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  phone: varchar(\"phone\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  characterImageUrl: varchar(\"character_image_url\"),\n  characterType: text(\"character_type\"),\n  role: text(\"role\").notNull().default('customer'),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const customerProfiles = pgTable(\"customer_profiles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  age: integer(\"age\"),\n  gender: text(\"gender\"),\n  weight: integer(\"weight\"),\n  height: integer(\"height\"),\n  goal: text(\"goal\"),\n  activityLevel: text(\"activity_level\"),\n  healthConcerns: text(\"health_concerns\").array(),\n  medications: boolean(\"medications\"),\n  dietaryPreference: text(\"dietary_preference\"),\n  allergies: text(\"allergies\").array(),\n  mealsPerDay: text(\"meals_per_day\"),\n  flavorPreference: text(\"flavor_preference\"),\n  wakeUpTime: text(\"wake_up_time\"),\n  sleepTime: text(\"sleep_time\"),\n  lateNightEating: boolean(\"late_night_eating\"),\n  alcoholConsumption: text(\"alcohol_consumption\"),\n  waterIntake: text(\"water_intake\"),\n  snacksAndDesserts: boolean(\"snacks_and_desserts\"),\n  dailyBudget: integer(\"daily_budget\"),\n  resultsTimeline: text(\"results_timeline\"),\n  quizAnswers: jsonb(\"quiz_answers\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const subscriptions = pgTable(\"subscriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  planType: text(\"plan_type\").notNull(),\n  status: text(\"status\").notNull().default('active'),\n  startDate: timestamp(\"start_date\").defaultNow(),\n  endDate: timestamp(\"end_date\"),\n  price: integer(\"price\").notNull(),\n  billingCycle: text(\"billing_cycle\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const milestones = pgTable(\"milestones\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  name: text(\"name\").notNull(),\n  status: text(\"status\").notNull().default('locked'),\n  completedAt: timestamp(\"completed_at\"),\n  order: integer(\"order\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const reports = pgTable(\"reports\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  reportType: text(\"report_type\").notNull(),\n  title: text(\"title\").notNull(),\n  fileUrl: text(\"file_url\"),\n  summary: text(\"summary\"),\n  data: jsonb(\"data\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const consultations = pgTable(\"consultations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  consultantId: varchar(\"consultant_id\").references(() => users.id),\n  doctorName: text(\"doctor_name\"),\n  scheduledDate: text(\"scheduled_date\").notNull(),\n  scheduledTime: text(\"scheduled_time\").notNull(),\n  status: text(\"status\").notNull().default('scheduled'),\n  notes: text(\"notes\"),\n  meetingType: text(\"meeting_type\").notNull(),\n  consultationFeePaid: numeric(\"consultation_fee_paid\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const plans = pgTable(\"plans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  type: text(\"type\").default('Clinical'),\n  listPrice: numeric(\"list_price\"),\n  discountAmount: numeric(\"discount_amount\").default('0'),\n  consultationFeeCredited: numeric(\"consultation_fee_credited\").default('0'),\n  finalPayable: numeric(\"final_payable\"),\n  isActive: boolean(\"is_active\").default(false),\n  startDate: text(\"start_date\"),\n  durationDays: integer(\"duration_days\").default(30),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const stageProgress = pgTable(\"stage_progress\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  stage: integer(\"stage\").notNull(),\n  name: text(\"name\").notNull(),\n  status: text(\"status\").default('pending'),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const documents = pgTable(\"documents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  stage: integer(\"stage\"),\n  label: text(\"label\"),\n  uploadedByRole: text(\"uploaded_by_role\"),\n  url: text(\"url\").notNull(),\n  mimeType: text(\"mime_type\"),\n  meta: jsonb(\"meta\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const dietPlans = pgTable(\"diet_plans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  macros: jsonb(\"macros\"),\n  weeklyPlan: jsonb(\"weekly_plan\"),\n  pdfUrl: text(\"pdf_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const addresses = pgTable(\"addresses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  label: text(\"label\"),\n  line1: text(\"line1\"),\n  line2: text(\"line2\"),\n  city: text(\"city\"),\n  state: text(\"state\"),\n  pincode: text(\"pincode\"),\n  isDefault: boolean(\"is_default\").default(false),\n  breakfast: boolean(\"breakfast\").default(false),\n  lunch: boolean(\"lunch\").default(false),\n  dinner: boolean(\"dinner\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const deliverySync = pgTable(\"delivery_sync\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  planId: varchar(\"plan_id\").references(() => plans.id),\n  payload: jsonb(\"payload\"),\n  status: text(\"status\").default('queued'),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const mealPlans = pgTable(\"meal_plans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  weekNumber: integer(\"week_number\").notNull(),\n  year: integer(\"year\").notNull(),\n  meals: jsonb(\"meals\").notNull(),\n  totalCalories: integer(\"total_calories\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const meals = pgTable(\"meals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  imageUrl: text(\"image_url\"),\n  mealType: text(\"meal_type\").notNull(),\n  calories: integer(\"calories\").notNull(),\n  protein: integer(\"protein\").notNull(),\n  carbs: integer(\"carbs\").notNull(),\n  fats: integer(\"fats\").notNull(),\n  ingredients: text(\"ingredients\").array(),\n  allergens: text(\"allergens\").array(),\n  dietaryTags: text(\"dietary_tags\").array(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  mealPlanId: varchar(\"meal_plan_id\").references(() => mealPlans.id),\n  deliveryDate: timestamp(\"delivery_date\").notNull(),\n  deliveryAddress: text(\"delivery_address\").notNull(),\n  status: text(\"status\").notNull().default('pending'),\n  assignedDeliveryPersonId: varchar(\"assigned_delivery_person_id\").references(() => users.id),\n  deliveredAt: timestamp(\"delivered_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const paymentSessions = pgTable(\"payment_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  consultationDate: text(\"consultation_date\").notNull(),\n  planType: text(\"plan_type\").notNull(),\n  amount: integer(\"amount\").notNull(),\n  status: text(\"status\").notNull().default('pending'),\n  paymentMethod: text(\"payment_method\").default('dummy'),\n  razorpayOrderId: text(\"razorpay_order_id\"),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  type: text(\"type\").notNull().default('info'),\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const acknowledgements = pgTable(\"acknowledgements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  staffId: varchar(\"staff_id\").notNull().references(() => users.id),\n  customerId: varchar(\"customer_id\").notNull().references(() => users.id),\n  taskType: text(\"task_type\").notNull(),\n  stage: integer(\"stage\"),\n  status: text(\"status\").notNull().default('pending'),\n  acknowledgedAt: timestamp(\"acknowledged_at\"),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const staffActivityLog = pgTable(\"staff_activity_log\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  staffId: varchar(\"staff_id\").notNull().references(() => users.id),\n  customerId: varchar(\"customer_id\").references(() => users.id),\n  actionType: text(\"action_type\").notNull(),\n  stage: integer(\"stage\"),\n  description: text(\"description\"),\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const deliveryLocation = pgTable(\"delivery_location\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  deliveryPersonId: varchar(\"delivery_person_id\").notNull().references(() => users.id),\n  latitude: numeric(\"latitude\").notNull(),\n  longitude: numeric(\"longitude\").notNull(),\n  status: text(\"status\").notNull().default('idle'),\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n});\n\nexport const upsertUserSchema = createInsertSchema(users).omit({\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCustomerProfileSchema = createInsertSchema(customerProfiles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSubscriptionSchema = createInsertSchema(subscriptions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMilestoneSchema = createInsertSchema(milestones).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReportSchema = createInsertSchema(reports).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertConsultationSchema = createInsertSchema(consultations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMealPlanSchema = createInsertSchema(mealPlans).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMealSchema = createInsertSchema(meals).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPaymentSessionSchema = createInsertSchema(paymentSessions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPlanSchema = createInsertSchema(plans).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertStageProgressSchema = createInsertSchema(stageProgress).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertDocumentSchema = createInsertSchema(documents).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDietPlanSchema = createInsertSchema(dietPlans).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAddressSchema = createInsertSchema(addresses).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDeliverySyncSchema = createInsertSchema(deliverySync).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAcknowledgementSchema = createInsertSchema(acknowledgements).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertStaffActivityLogSchema = createInsertSchema(staffActivityLog).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDeliveryLocationSchema = createInsertSchema(deliveryLocation).omit({\n  id: true,\n  lastUpdated: true,\n});\n\nexport type UpsertUser = z.infer<typeof upsertUserSchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertCustomerProfile = z.infer<typeof insertCustomerProfileSchema>;\nexport type CustomerProfile = typeof customerProfiles.$inferSelect;\n\nexport type InsertSubscription = z.infer<typeof insertSubscriptionSchema>;\nexport type Subscription = typeof subscriptions.$inferSelect;\n\nexport type InsertMilestone = z.infer<typeof insertMilestoneSchema>;\nexport type Milestone = typeof milestones.$inferSelect;\n\nexport type InsertReport = z.infer<typeof insertReportSchema>;\nexport type Report = typeof reports.$inferSelect;\n\nexport type InsertConsultation = z.infer<typeof insertConsultationSchema>;\nexport type Consultation = typeof consultations.$inferSelect;\n\nexport type InsertMealPlan = z.infer<typeof insertMealPlanSchema>;\nexport type MealPlan = typeof mealPlans.$inferSelect;\n\nexport type InsertMeal = z.infer<typeof insertMealSchema>;\nexport type Meal = typeof meals.$inferSelect;\n\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type Order = typeof orders.$inferSelect;\n\nexport type InsertPaymentSession = z.infer<typeof insertPaymentSessionSchema>;\nexport type PaymentSession = typeof paymentSessions.$inferSelect;\n\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type Notification = typeof notifications.$inferSelect;\n\nexport type InsertPlan = z.infer<typeof insertPlanSchema>;\nexport type Plan = typeof plans.$inferSelect;\n\nexport type InsertStageProgress = z.infer<typeof insertStageProgressSchema>;\nexport type StageProgress = typeof stageProgress.$inferSelect;\n\nexport type InsertDocument = z.infer<typeof insertDocumentSchema>;\nexport type Document = typeof documents.$inferSelect;\n\nexport type InsertDietPlan = z.infer<typeof insertDietPlanSchema>;\nexport type DietPlan = typeof dietPlans.$inferSelect;\n\nexport type InsertAddress = z.infer<typeof insertAddressSchema>;\nexport type Address = typeof addresses.$inferSelect;\n\nexport type InsertDeliverySync = z.infer<typeof insertDeliverySyncSchema>;\nexport type DeliverySync = typeof deliverySync.$inferSelect;\n\nexport type InsertAcknowledgement = z.infer<typeof insertAcknowledgementSchema>;\nexport type Acknowledgement = typeof acknowledgements.$inferSelect;\n\nexport type InsertStaffActivityLog = z.infer<typeof insertStaffActivityLogSchema>;\nexport type StaffActivityLog = typeof staffActivityLog.$inferSelect;\n\nexport type InsertDeliveryLocation = z.infer<typeof insertDeliveryLocationSchema>;\nexport type DeliveryLocation = typeof deliveryLocation.$inferSelect;\n","size_bytes":15917},"client/src/components/Testimonials.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Star } from 'lucide-react';\nimport avatar1 from '@assets/generated_images/Woman_testimonial_headshot_34c9f5bd.png';\nimport avatar2 from '@assets/generated_images/Man_testimonial_headshot_748c9c8d.png';\nimport avatar3 from '@assets/generated_images/Young_woman_fitness_headshot_5dc7ec73.png';\n\nconst testimonials = [\n  {\n    name: 'Sarah Johnson',\n    image: avatar1,\n    achievement: 'Lost 15 lbs in 2 months',\n    quote: 'The premium clinical plan changed my life. The personalized approach and professional guidance made all the difference.',\n    rating: 5,\n  },\n  {\n    name: 'Michael Chen',\n    image: avatar2,\n    achievement: 'Gained 8 lbs muscle',\n    quote: 'Amazing meal quality and the AI-assisted plan perfectly matched my fitness goals. The convenience is unbeatable.',\n    rating: 5,\n  },\n  {\n    name: 'Emma Davis',\n    image: avatar3,\n    achievement: 'Improved energy levels',\n    quote: 'I love how easy it is to stick to my nutrition goals. The meals are delicious and the nutritional info helps me stay on track.',\n    rating: 5,\n  },\n];\n\nexport function Testimonials() {\n  return (\n    <section id=\"testimonials\" className=\"py-16 md:py-20 lg:py-24\">\n      <div className=\"container mx-auto px-4 md:px-6\">\n        <div className=\"text-center mb-12 space-y-4\">\n          <h2 className=\"font-display text-3xl md:text-4xl font-semibold\" data-testid=\"text-testimonials-title\">\n            What Our Customers Say\n          </h2>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\" data-testid=\"text-testimonials-subtitle\">\n            Real results from real people\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n          {testimonials.map((testimonial, index) => (\n            <Card key={index} className=\"hover-elevate transition-all\" data-testid={`card-testimonial-${index}`}>\n              <CardContent className=\"p-6 space-y-4\">\n                <div className=\"flex gap-0.5\">\n                  {Array.from({ length: testimonial.rating }).map((_, i) => (\n                    <Star key={i} className=\"h-4 w-4 fill-chart-4 text-chart-4\" data-testid={`star-${index}-${i}`} />\n                  ))}\n                </div>\n\n                <p className=\"text-sm leading-relaxed italic\" data-testid={`text-quote-${index}`}>\n                  \"{testimonial.quote}\"\n                </p>\n\n                <div className=\"flex items-center gap-3 pt-4 border-t\">\n                  <Avatar data-testid={`avatar-${index}`}>\n                    <AvatarImage src={testimonial.image} alt={testimonial.name} />\n                    <AvatarFallback>{testimonial.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <p className=\"font-semibold text-sm\" data-testid={`text-name-${index}`}>{testimonial.name}</p>\n                    <p className=\"text-xs text-muted-foreground\" data-testid={`text-achievement-${index}`}>{testimonial.achievement}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3304},"client/src/pages/Admin.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useToast } from '@/hooks/use-toast';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Label } from '@/components/ui/label';\nimport { Users, FileText, CheckCircle2, Clock, Upload, Shield, MapPin, Activity } from 'lucide-react';\nimport type { User, Milestone, Report, Document } from '@shared/schema';\n\ntype Acknowledgement = {\n  id: string;\n  staffId: string;\n  customerId: string;\n  taskType: string;\n  stage: number | null;\n  status: 'pending' | 'acknowledged' | 'completed';\n  acknowledgedAt: Date | null;\n};\n\ntype StaffActivity = {\n  id: number;\n  staffId: string;\n  customerId: string;\n  actionType: string;\n  stage: number | null;\n  description: string;\n  metadata: any;\n  createdAt: Date;\n};\n\ntype DeliveryLocation = {\n  id: number;\n  deliveryPersonId: string;\n  latitude: number;\n  longitude: number;\n  status: string;\n  updatedAt: Date;\n};\nimport { isUnauthorizedError } from '@/lib/authUtils';\nimport { ObjectUploader } from '@/components/ObjectUploader';\nimport type { UploadResult } from '@uppy/core';\n\nexport default function Admin() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const [selectedCustomer, setSelectedCustomer] = useState<string>('');\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n\n    if (!isLoading && user && user.role !== 'admin' && user.role !== 'clinical') {\n      toast({\n        title: \"Access Denied\",\n        description: \"You don't have permission to access this page.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  const isAuthorized = isAuthenticated && user && (user.role === 'admin' || user.role === 'clinical');\n\n  const { data: customers, isLoading: loadingCustomers } = useQuery<User[]>({\n    queryKey: ['/api/admin/customers'],\n    enabled: isAuthorized,\n  });\n\n  const { data: milestones } = useQuery<Milestone[]>({\n    queryKey: ['/api/admin/milestones', selectedCustomer],\n    enabled: !!selectedCustomer && isAuthorized,\n  });\n\n  const { data: reports } = useQuery<Report[]>({\n    queryKey: ['/api/admin/reports', selectedCustomer],\n    enabled: !!selectedCustomer && isAuthorized,\n  });\n\n  const { data: documents } = useQuery<Document[]>({\n    queryKey: ['/api/admin/documents', selectedCustomer],\n    enabled: !!selectedCustomer && isAuthorized,\n  });\n\n  // New admin queries\n  const { data: allAcknowledgements = [] } = useQuery<Acknowledgement[]>({\n    queryKey: ['/api/admin/acknowledgements'],\n    enabled: isAuthorized,\n  });\n\n  const { data: allActivities = [] } = useQuery<StaffActivity[]>({\n    queryKey: ['/api/admin/activities'],\n    enabled: isAuthorized,\n  });\n\n  const { data: deliveryLocations = [] } = useQuery<DeliveryLocation[]>({\n    queryKey: ['/api/admin/delivery-locations'],\n    enabled: isAuthorized,\n  });\n\n  const updateMilestoneMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      await apiRequest('PATCH', `/api/admin/milestones/${id}`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/milestones', selectedCustomer] });\n      toast({\n        title: \"Success\",\n        description: \"Milestone updated successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update milestone\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createReportMutation = useMutation({\n    mutationFn: async (report: { userId: string; reportType: string; title: string; summary: string }) => {\n      await apiRequest('POST', '/api/admin/reports', report);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/reports', selectedCustomer] });\n      toast({\n        title: \"Success\",\n        description: \"Report created successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create report\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createDocumentMutation = useMutation({\n    mutationFn: async (document: { userId: string; label: string; url: string; stage: number }) => {\n      await apiRequest('POST', '/api/admin/documents', document);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/documents', selectedCustomer] });\n      toast({\n        title: \"Success\",\n        description: \"Document uploaded successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to upload document\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading || loadingCustomers || !isAuthorized) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <p className=\"text-muted-foreground\">Loading...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"font-display text-3xl font-bold mb-2\" data-testid=\"text-admin-title\">\n            Clinical Admin Panel\n          </h1>\n          <p className=\"text-muted-foreground\">Manage customer milestones and reports</p>\n        </div>\n\n        <div className=\"grid gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"h-5 w-5\" />\n                Select Customer\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Select value={selectedCustomer} onValueChange={setSelectedCustomer}>\n                <SelectTrigger data-testid=\"select-customer\">\n                  <SelectValue placeholder=\"Choose a customer\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {customers?.map((customer) => (\n                    <SelectItem key={customer.id} value={customer.id} data-testid={`select-customer-${customer.id}`}>\n                      {customer.email} - {customer.firstName} {customer.lastName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </CardContent>\n          </Card>\n\n          <Tabs defaultValue=\"staff\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-3 lg:grid-cols-6\">\n              <TabsTrigger value=\"staff\" data-testid=\"tab-staff\">\n                Staff\n              </TabsTrigger>\n              <TabsTrigger value=\"acknowledgements\" data-testid=\"tab-acknowledgements\">\n                Acknowledgements\n              </TabsTrigger>\n              <TabsTrigger value=\"delivery\" data-testid=\"tab-delivery\">\n                Delivery\n              </TabsTrigger>\n              <TabsTrigger value=\"milestones\" data-testid=\"tab-milestones\">\n                Milestones\n              </TabsTrigger>\n              <TabsTrigger value=\"documents\" data-testid=\"tab-documents\">\n                Documents\n              </TabsTrigger>\n              <TabsTrigger value=\"reports\" data-testid=\"tab-reports\">\n                Reports\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"staff\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Shield className=\"h-5 w-5\" />\n                    Staff Monitoring\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {['consultant', 'lab_technician', 'nutritionist', 'chef', 'delivery'].map(role => {\n                      // Filter activities for this specific role\n                      const roleActivities = allActivities.filter(act => \n                        (role === 'consultant' && act.actionType === 'document_uploaded' && (act.stage === 1 || act.stage === 3)) ||\n                        (role === 'lab_technician' && act.actionType === 'document_uploaded' && act.stage === 2) ||\n                        (role === 'nutritionist' && act.actionType === 'document_uploaded' && act.stage === 4) ||\n                        (role === 'chef' && act.actionType === 'meal_prepared') ||\n                        (role === 'delivery' && act.actionType === 'delivery_completed')\n                      );\n                      // Count unique staff IDs\n                      const uniqueStaffCount = new Set(roleActivities.map(a => a.staffId)).size;\n\n                      return (\n                        <Card key={role}>\n                          <CardHeader>\n                            <CardTitle className=\"text-sm capitalize\">{role.replace('_', ' ')}</CardTitle>\n                          </CardHeader>\n                          <CardContent>\n                            <p className=\"text-2xl font-bold\">{uniqueStaffCount}</p>\n                            <p className=\"text-sm text-muted-foreground\">Active staff</p>\n                          </CardContent>\n                        </Card>\n                      );\n                    })}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Activity className=\"h-5 w-5\" />\n                    Recent Activities ({allActivities.slice(0, 10).length})\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                    {allActivities.slice(0, 10).map(activity => (\n                      <div key={activity.id} className=\"p-3 bg-muted rounded-md\" data-testid={`activity-${activity.id}`}>\n                        <p className=\"font-medium\">{activity.description}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Staff: {activity.staffId} | Customer: {activity.customerId}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {new Date(activity.createdAt).toLocaleString()}\n                        </p>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"acknowledgements\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Acknowledgement Dashboard ({allAcknowledgements.length})</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                    {allAcknowledgements.map(ack => (\n                      <div key={ack.id} className=\"flex items-center justify-between p-3 bg-muted rounded-md\" data-testid={`ack-${ack.id}`}>\n                        <div>\n                          <p className=\"font-medium\">{ack.taskType}</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Staff: {ack.staffId} | Customer: {ack.customerId}\n                          </p>\n                          {ack.stage && <Badge variant=\"outline\">Stage {ack.stage}</Badge>}\n                        </div>\n                        <Badge variant={\n                          ack.status === 'completed' ? 'default' :\n                          ack.status === 'acknowledged' ? 'secondary' :\n                          'outline'\n                        }>\n                          {ack.status}\n                        </Badge>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"delivery\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <MapPin className=\"h-5 w-5\" />\n                    Delivery Tracking ({deliveryLocations.length})\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                    {deliveryLocations.map(location => (\n                      <div key={location.id} className=\"p-3 bg-muted rounded-md\" data-testid={`location-${location.id}`}>\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <p className=\"font-medium\">Delivery Person: {location.deliveryPersonId}</p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Lat: {location.latitude.toFixed(6)}, Lng: {location.longitude.toFixed(6)}\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              Updated: {new Date(location.updatedAt).toLocaleString()}\n                            </p>\n                          </div>\n                          <Badge variant={location.status === 'on_delivery' ? 'default' : 'outline'}>\n                            {location.status}\n                          </Badge>\n                        </div>\n                      </div>\n                    ))}\n                    {deliveryLocations.length === 0 && (\n                      <p className=\"text-center text-muted-foreground py-8\">No delivery locations tracked</p>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {selectedCustomer && (<>\n\n              <TabsContent value=\"milestones\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Customer Milestones</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    {milestones?.map((milestone) => (\n                      <div\n                        key={milestone.id}\n                        className=\"flex items-center justify-between p-4 border rounded-md\"\n                        data-testid={`milestone-${milestone.id}`}\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          {milestone.status === 'completed' ? (\n                            <CheckCircle2 className=\"h-5 w-5 text-primary\" />\n                          ) : (\n                            <Clock className=\"h-5 w-5 text-muted-foreground\" />\n                          )}\n                          <div>\n                            <p className=\"font-medium\">{milestone.name}</p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {milestone.status === 'completed' \n                                ? `Completed ${new Date(milestone.completedAt!).toLocaleDateString()}`\n                                : 'In Progress'}\n                            </p>\n                          </div>\n                        </div>\n                        <Select\n                          value={milestone.status}\n                          onValueChange={(status) => \n                            updateMilestoneMutation.mutate({ id: milestone.id, status })\n                          }\n                          disabled={updateMilestoneMutation.isPending}\n                        >\n                          <SelectTrigger className=\"w-[150px]\" data-testid={`select-milestone-status-${milestone.id}`}>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"locked\">Locked</SelectItem>\n                            <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                            <SelectItem value=\"completed\">Completed</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"documents\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Upload Document</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <form\n                      onSubmit={(e) => {\n                        e.preventDefault();\n                        const formData = new FormData(e.currentTarget);\n                        const url = formData.get('url') as string;\n                        if (!url) {\n                          toast({\n                            title: \"Error\",\n                            description: \"Please upload a file first\",\n                            variant: \"destructive\",\n                          });\n                          return;\n                        }\n                        createDocumentMutation.mutate({\n                          userId: selectedCustomer,\n                          label: formData.get('label') as string,\n                          url,\n                          stage: parseInt(formData.get('stage') as string),\n                        });\n                        e.currentTarget.reset();\n                      }}\n                      className=\"space-y-4\"\n                    >\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"stage\">Stage</Label>\n                        <Select name=\"stage\" required>\n                          <SelectTrigger data-testid=\"select-document-stage\">\n                            <SelectValue placeholder=\"Select stage\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"1\">1 - Physician Consultation</SelectItem>\n                            <SelectItem value=\"2\">2 - Test Collection</SelectItem>\n                            <SelectItem value=\"3\">3 - Discussion</SelectItem>\n                            <SelectItem value=\"4\">4 - Diet Chart</SelectItem>\n                            <SelectItem value=\"5\">5 - Meal Delivery</SelectItem>\n                            <SelectItem value=\"6\">6 - Final Report</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"label\">Document Label</Label>\n                        <Input\n                          id=\"label\"\n                          name=\"label\"\n                          placeholder=\"Document label (e.g., Blood Test Results, Diet Plan)\"\n                          required\n                          data-testid=\"input-document-label\"\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label>File</Label>\n                        <input type=\"hidden\" name=\"url\" id=\"documentUrl\" />\n                        <ObjectUploader\n                          maxNumberOfFiles={1}\n                          maxFileSize={10485760}\n                          buttonVariant=\"outline\"\n                          onGetUploadParameters={async () => {\n                            const response = await fetch('/api/objects/upload', {\n                              method: 'POST',\n                              credentials: 'include',\n                            });\n                            const data = await response.json();\n                            return {\n                              method: 'PUT' as const,\n                              url: data.uploadURL,\n                            };\n                          }}\n                          onComplete={(result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n                            if (result.successful && result.successful.length > 0) {\n                              const uploadURL = result.successful[0].uploadURL;\n                              if (uploadURL) {\n                                (document.getElementById('documentUrl') as HTMLInputElement).value = uploadURL;\n                                toast({\n                                  title: \"File uploaded\",\n                                  description: \"File uploaded successfully. Fill out the form and submit.\",\n                                });\n                              }\n                            }\n                          }}\n                        >\n                          <Upload className=\"h-4 w-4 mr-2\" />\n                          Upload File\n                        </ObjectUploader>\n                      </div>\n\n                      <Button\n                        type=\"submit\"\n                        disabled={createDocumentMutation.isPending}\n                        data-testid=\"button-upload-document\"\n                      >\n                        {createDocumentMutation.isPending ? 'Uploading...' : 'Create Document'}\n                      </Button>\n                    </form>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Generate Reports</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground mb-3\">\n                      Generate a consolidated clinical report combining all stages, documents, and health data\n                    </p>\n                    <Button\n                      onClick={async () => {\n                        if (!selectedCustomer) return;\n                        try {\n                          await apiRequest('POST', `/api/reports/${selectedCustomer.id}/consolidated`, {});\n                          queryClient.invalidateQueries({ queryKey: ['/api/user/documents', selectedCustomer.id] });\n                          toast({\n                            title: \"Report Generated\",\n                            description: \"Consolidated clinical report has been generated successfully\"\n                          });\n                        } catch (error) {\n                          toast({\n                            title: \"Generation Failed\",\n                            description: \"Failed to generate consolidated report\",\n                            variant: \"destructive\"\n                          });\n                        }\n                      }}\n                      variant=\"secondary\"\n                      className=\"w-full\"\n                      data-testid=\"button-generate-consolidated-report\"\n                    >\n                      <FileText className=\"h-4 w-4 mr-2\" />\n                      Generate Consolidated Clinical Report\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Uploaded Documents</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    {documents?.map((document) => (\n                      <div\n                        key={document.id}\n                        className=\"p-4 border rounded-md\"\n                        data-testid={`document-${document.id}`}\n                      >\n                        <div className=\"flex items-start justify-between mb-2\">\n                          <div className=\"flex items-center gap-2\">\n                            <FileText className=\"h-5 w-5 text-primary\" />\n                            <div>\n                              <p className=\"font-medium\">{document.label || 'Untitled Document'}</p>\n                              <Badge variant=\"outline\" className=\"mt-1\">\n                                Stage {document.stage}\n                              </Badge>\n                            </div>\n                          </div>\n                          {document.uploadedByRole && (\n                            <Badge variant=\"secondary\">{document.uploadedByRole}</Badge>\n                          )}\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => window.open(document.url, '_blank')}\n                            data-testid={`button-view-document-${document.id}`}\n                          >\n                            View File\n                          </Button>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Uploaded {new Date(document.createdAt!).toLocaleDateString()}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"reports\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Create New Report</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <form\n                      onSubmit={(e) => {\n                        e.preventDefault();\n                        const formData = new FormData(e.currentTarget);\n                        createReportMutation.mutate({\n                          userId: selectedCustomer,\n                          reportType: formData.get('reportType') as string,\n                          title: formData.get('title') as string,\n                          summary: formData.get('summary') as string,\n                        });\n                        e.currentTarget.reset();\n                      }}\n                      className=\"space-y-4\"\n                    >\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"reportType\">Report Type</Label>\n                        <Select name=\"reportType\" required>\n                          <SelectTrigger data-testid=\"select-report-type\">\n                            <SelectValue placeholder=\"Select type\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"test_result\">Test Result</SelectItem>\n                            <SelectItem value=\"diagnosis\">Diagnosis</SelectItem>\n                            <SelectItem value=\"diet_chart\">Diet Chart</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"title\">Title</Label>\n                        <Input\n                          id=\"title\"\n                          name=\"title\"\n                          placeholder=\"Report title\"\n                          required\n                          data-testid=\"input-report-title\"\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"summary\">Summary</Label>\n                        <Textarea\n                          id=\"summary\"\n                          name=\"summary\"\n                          placeholder=\"Report summary or findings\"\n                          rows={4}\n                          required\n                          data-testid=\"textarea-report-summary\"\n                        />\n                      </div>\n\n                      <Button\n                        type=\"submit\"\n                        disabled={createReportMutation.isPending}\n                        data-testid=\"button-create-report\"\n                      >\n                        {createReportMutation.isPending ? 'Creating...' : 'Create Report'}\n                      </Button>\n                    </form>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Existing Reports</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    {reports?.map((report) => (\n                      <div\n                        key={report.id}\n                        className=\"p-4 border rounded-md\"\n                        data-testid={`report-${report.id}`}\n                      >\n                        <div className=\"flex items-start justify-between mb-2\">\n                          <div className=\"flex items-center gap-2\">\n                            <FileText className=\"h-5 w-5 text-primary\" />\n                            <p className=\"font-medium\">{report.title}</p>\n                          </div>\n                          <Badge variant=\"secondary\">{report.reportType.replace('_', ' ')}</Badge>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">{report.summary}</p>\n                        <p className=\"text-xs text-muted-foreground mt-2\">\n                          Created {new Date(report.createdAt!).toLocaleDateString()}\n                        </p>\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </>)}\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":31501},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 0 0% 13%;\n\n  --border: 0 0% 89%;\n\n  --card: 0 0% 98%;\n\n  --card-foreground: 0 0% 13%;\n\n  --card-border: 0 0% 94%;\n\n  --sidebar: 0 0% 96%;\n\n  --sidebar-foreground: 0 0% 13%;\n\n  --sidebar-border: 0 0% 91%;\n\n  --sidebar-primary: 142 71% 45%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 142 15% 92%;\n\n  --sidebar-accent-foreground: 142 71% 25%;\n\n  --sidebar-ring: 142 71% 45%;\n\n  --popover: 0 0% 96%;\n\n  --popover-foreground: 0 0% 13%;\n\n  --popover-border: 0 0% 91%;\n\n  --primary: 142 71% 45%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 0 0% 92%;\n\n  --secondary-foreground: 0 0% 13%;\n\n  --muted: 142 8% 94%;\n\n  --muted-foreground: 0 0% 45%;\n\n  --accent: 142 12% 93%;\n\n  --accent-foreground: 0 0% 13%;\n\n  --destructive: 0 84% 48%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 0 0% 75%;\n  --ring: 142 71% 45%;\n  --chart-1: 142 71% 45%;\n  --chart-2: 24 100% 50%;\n  --chart-3: 217 91% 60%;\n  --chart-4: 45 93% 47%;\n  --chart-5: 280 65% 55%;\n\n  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', Menlo, monospace;\n  --font-display: 'Plus Jakarta Sans', 'Inter', sans-serif;\n  --radius: .5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.10);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.06), 0px 1px 2px -1px hsl(0 0% 0% / 0.06);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.07), 0px 2px 4px -2px hsl(0 0% 0% / 0.05);\n  --shadow-md: 0px 6px 16px -4px hsl(0 0% 0% / 0.08), 0px 4px 6px -2px hsl(0 0% 0% / 0.03);\n  --shadow-lg: 0px 10px 24px -4px hsl(0 0% 0% / 0.10), 0px 8px 8px -4px hsl(0 0% 0% / 0.04);\n  --shadow-xl: 0px 20px 32px -8px hsl(0 0% 0% / 0.12), 0px 8px 16px -8px hsl(0 0% 0% / 0.08);\n  --shadow-2xl: 0px 32px 64px -12px hsl(0 0% 0% / 0.14);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 0 0% 9%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 0 0% 23%;\n\n  --card: 0 0% 13%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 0 0% 18%;\n\n  --sidebar: 0 0% 15%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 0 0% 20%;\n\n  --sidebar-primary: 142 65% 55%;\n\n  --sidebar-primary-foreground: 0 0% 9%;\n\n  --sidebar-accent: 142 18% 22%;\n\n  --sidebar-accent-foreground: 142 65% 75%;\n\n  --sidebar-ring: 142 65% 55%;\n\n  --popover: 0 0% 15%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 0 0% 20%;\n\n  --primary: 142 65% 55%;\n\n  --primary-foreground: 0 0% 9%;\n\n  --secondary: 0 0% 21%;\n\n  --secondary-foreground: 0 0% 95%;\n\n  --muted: 142 8% 18%;\n\n  --muted-foreground: 0 0% 65%;\n\n  --accent: 142 10% 19%;\n\n  --accent-foreground: 0 0% 95%;\n\n  --destructive: 0 75% 50%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 0 0% 35%;\n  --ring: 142 65% 55%;\n  --chart-1: 142 65% 65%;\n  --chart-2: 24 95% 65%;\n  --chart-3: 217 91% 70%;\n  --chart-4: 45 93% 60%;\n  --chart-5: 280 65% 70%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.30);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.40);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.35), 0px 1px 2px -1px hsl(0 0% 0% / 0.30);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.40), 0px 2px 4px -2px hsl(0 0% 0% / 0.35);\n  --shadow-md: 0px 6px 16px -4px hsl(0 0% 0% / 0.45), 0px 4px 6px -2px hsl(0 0% 0% / 0.30);\n  --shadow-lg: 0px 10px 24px -4px hsl(0 0% 0% / 0.50), 0px 8px 8px -4px hsl(0 0% 0% / 0.35);\n  --shadow-xl: 0px 20px 32px -8px hsl(0 0% 0% / 0.55), 0px 8px 16px -8px hsl(0 0% 0% / 0.40);\n  --shadow-2xl: 0px 32px 64px -12px hsl(0 0% 0% / 0.60);\n\n  /* Automatically computed borders */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":10962},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/PlanCards.tsx":{"content":"import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Check, Sparkles, Stethoscope } from 'lucide-react';\nimport { Link } from 'wouter';\n\nconst plans = [\n  {\n    id: 'clinical',\n    name: 'Premium Clinical Plan',\n    icon: Stethoscope,\n    description: 'Comprehensive health assessment with expert guidance',\n    price: 'Starting at ₹1,999',\n    isPremium: true,\n    features: [\n      'Online/offline physician consultation',\n      'At-home test collection (blood, body composition)',\n      'Detailed health report generation',\n      'Feasibility discussion with consultant',\n      'Personalized diet chart by nutritionist',\n      'Chef-prepared meals delivered daily',\n      'Ongoing health monitoring',\n    ],\n    cta: 'Start My Clinical Plan',\n    href: '/book-consultation',\n  },\n  {\n    id: 'ai',\n    name: 'AI-Assisted Plan',\n    icon: Sparkles,\n    description: 'Smart meal planning powered by advanced AI',\n    price: 'Starting at ₹999/week',\n    isPremium: false,\n    features: [\n      'Interactive AI-powered questionnaire',\n      'Instant personalized meal plan',\n      'Custom dietary preferences (veg, vegan, keto)',\n      'Allergy and restriction management',\n      'Goal-based nutrition (weight loss, muscle gain)',\n      'Chef-prepared meals delivered',\n      'Flexible plan modifications',\n    ],\n    cta: 'Start AI Plan',\n    href: '/ai-plan',\n  },\n];\n\nexport function PlanCards() {\n  return (\n    <section id=\"plans\" className=\"py-16 md:py-20 lg:py-24\">\n      <div className=\"container mx-auto px-4 md:px-6\">\n        <div className=\"text-center mb-12 space-y-4\">\n          <h2 className=\"font-display text-3xl md:text-4xl font-semibold\" data-testid=\"text-plans-title\">\n            Choose Your Path to Better Health\n          </h2>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\" data-testid=\"text-plans-subtitle\">\n            Select the plan that fits your wellness journey\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 gap-8 max-w-6xl mx-auto\">\n          {plans.map((plan) => (\n            <Card\n              key={plan.id}\n              className={`relative hover-elevate transition-all ${\n                plan.isPremium ? 'border-chart-4/50' : ''\n              }`}\n              data-testid={`card-plan-${plan.id}`}\n            >\n              {plan.isPremium && (\n                <Badge className=\"absolute -top-3 right-6 bg-chart-4 text-white border-0\" data-testid=\"badge-premium\">\n                  Premium\n                </Badge>\n              )}\n              \n              <CardHeader className=\"gap-4\">\n                <div className=\"flex items-center gap-3\">\n                  <div className={`flex h-12 w-12 items-center justify-center rounded-md ${\n                    plan.isPremium ? 'bg-chart-4/10 text-chart-4' : 'bg-primary/10 text-primary'\n                  }`}>\n                    <plan.icon className=\"h-6 w-6\" />\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-xl\" data-testid={`text-plan-name-${plan.id}`}>\n                      {plan.name}\n                    </CardTitle>\n                    <CardDescription data-testid={`text-plan-description-${plan.id}`}>\n                      {plan.description}\n                    </CardDescription>\n                  </div>\n                </div>\n                <div className=\"text-2xl font-semibold font-mono\" data-testid={`text-plan-price-${plan.id}`}>\n                  {plan.price}\n                </div>\n              </CardHeader>\n\n              <CardContent>\n                <ul className=\"space-y-3\">\n                  {plan.features.map((feature, index) => (\n                    <li key={index} className=\"flex items-start gap-3\" data-testid={`text-feature-${plan.id}-${index}`}>\n                      <Check className=\"h-5 w-5 text-primary shrink-0 mt-0.5\" />\n                      <span className=\"text-sm\">{feature}</span>\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n\n              <CardFooter>\n                <Link href={plan.href} className=\"w-full\">\n                  <Button\n                    className=\"w-full\"\n                    variant={plan.isPremium ? 'default' : 'outline'}\n                    data-testid={`button-${plan.id}-cta`}\n                  >\n                    {plan.cta}\n                  </Button>\n                </Link>\n              </CardFooter>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4685},"client/src/components/examples/ProcessSteps.tsx":{"content":"import { ProcessSteps } from '../ProcessSteps'\n\nexport default function ProcessStepsExample() {\n  return <ProcessSteps />\n}\n","size_bytes":124},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/pages/Dashboard.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport type { Consultation, Milestone } from '@shared/schema';\nimport { Header } from '@/components/Header';\nimport { Footer } from '@/components/Footer';\nimport { MealCard } from '@/components/MealCard';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Calendar, TrendingDown, Flame, Activity, CheckCircle2, Clock, Lock, Package, CreditCard, Loader2 } from 'lucide-react';\n\ntype Plan = {\n  id: string;\n  type: string;\n  listPrice: string;\n  finalPayable: string;\n  isActive: boolean;\n  startDate: string | null;\n  durationDays: number;\n};\nimport breakfastImage from '@assets/generated_images/Healthy_breakfast_bowl_640a6a89.png';\nimport lunchImage from '@assets/generated_images/Healthy_Buddha_bowl_lunch_368a96fc.png';\nimport dinnerImage from '@assets/generated_images/Grilled_chicken_dinner_plate_b60850a5.png';\n\nconst weekDays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n\nconst weeklyMeals = [\n  {\n    day: 'Monday',\n    meals: [\n      { name: 'Greek Yogurt Berry Bowl', image: breakfastImage, calories: 320, protein: 18, carbs: 42, fats: 8, mealType: 'breakfast' as const },\n      { name: 'Buddha Bowl', image: lunchImage, calories: 485, protein: 32, carbs: 52, fats: 15, mealType: 'lunch' as const },\n      { name: 'Grilled Chicken Plate', image: dinnerImage, calories: 425, protein: 38, carbs: 35, fats: 12, mealType: 'dinner' as const },\n    ],\n  },\n  {\n    day: 'Tuesday',\n    meals: [\n      { name: 'Oatmeal with Fruits', image: breakfastImage, calories: 310, protein: 12, carbs: 48, fats: 7, mealType: 'breakfast' as const },\n      { name: 'Quinoa Salad Bowl', image: lunchImage, calories: 460, protein: 28, carbs: 55, fats: 14, mealType: 'lunch' as const },\n      { name: 'Baked Salmon', image: dinnerImage, calories: 440, protein: 42, carbs: 30, fats: 15, mealType: 'dinner' as const },\n    ],\n  },\n  {\n    day: 'Wednesday',\n    meals: [\n      { name: 'Smoothie Bowl', image: breakfastImage, calories: 290, protein: 15, carbs: 40, fats: 9, mealType: 'breakfast' as const },\n      { name: 'Chicken Wrap', image: lunchImage, calories: 510, protein: 35, carbs: 48, fats: 18, mealType: 'lunch' as const },\n      { name: 'Stir Fry Vegetables', image: dinnerImage, calories: 380, protein: 22, carbs: 45, fats: 11, mealType: 'dinner' as const },\n    ],\n  },\n];\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  \n  const { data: consultations = [] } = useQuery<Consultation[]>({\n    queryKey: ['/api/user/consultations'],\n    enabled: !!user,\n  });\n\n  const { data: milestones = [], isLoading: isMilestonesLoading } = useQuery<Milestone[]>({\n    queryKey: ['/api/user/milestones'],\n    enabled: !!user,\n  });\n\n  const { data: plan, isLoading: isPlanLoading } = useQuery<Plan>({\n    queryKey: ['/api/user/plan'],\n    enabled: !!user,\n  });\n\n  const getStatusIcon = (status: string) => {\n    if (status === 'completed') return CheckCircle2;\n    if (status === 'in_progress') return Clock;\n    return Lock;\n  };\n\n  const getStatusColor = (status: string) => {\n    if (status === 'completed') return 'text-primary';\n    if (status === 'in_progress') return 'text-chart-2';\n    return 'text-muted-foreground';\n  };\n\n  const completedCount = milestones.filter(m => m.status === 'completed').length;\n  const totalMilestones = milestones.length || 5;\n  const progressPercentage = (completedCount / totalMilestones) * 100;\n\n  const latestConsultation = consultations[0];\n  const stats = [\n    { label: 'Daily Calories', value: '1,230', target: '1,800', icon: Flame, color: 'text-chart-2' },\n    { label: 'Protein', value: '88g', target: '120g', icon: TrendingDown, color: 'text-chart-1' },\n    { label: 'Active Days', value: '15', target: '30', icon: Activity, color: 'text-chart-3' },\n  ];\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-1 bg-muted/30\">\n        <section className=\"py-8 md:py-12\">\n          <div className=\"container mx-auto px-4 md:px-6\">\n            <div className=\"space-y-8\">\n              <div className=\"flex flex-col md:flex-row md:items-center justify-between gap-4\">\n                <div>\n                  <h1 className=\"font-display text-3xl md:text-4xl font-bold\" data-testid=\"text-dashboard-title\">\n                    Your Wellness Dashboard\n                  </h1>\n                  <p className=\"text-muted-foreground mt-1\" data-testid=\"text-dashboard-subtitle\">\n                    Track your progress and manage your clinical journey\n                  </p>\n                </div>\n                {plan && (\n                  <Badge className=\"w-fit\" data-testid=\"badge-plan-active\">\n                    <Calendar className=\"mr-2 h-4 w-4\" />\n                    {plan.type} Plan\n                  </Badge>\n                )}\n              </div>\n\n              {isPlanLoading ? (\n                <div className=\"grid md:grid-cols-3 gap-4\">\n                  {[1, 2, 3].map((i) => (\n                    <Card key={i}>\n                      <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                        <div className=\"h-4 w-20 bg-muted animate-pulse rounded\" />\n                        <div className=\"h-4 w-4 bg-muted animate-pulse rounded-full\" />\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"h-8 w-32 bg-muted animate-pulse rounded mb-2\" />\n                        <div className=\"h-3 w-24 bg-muted animate-pulse rounded\" />\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              ) : plan ? (\n                <div className=\"grid md:grid-cols-3 gap-4\">\n                  <Card>\n                    <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                      <CardTitle className=\"text-sm font-medium\">Plan Type</CardTitle>\n                      <Package className=\"h-4 w-4 text-primary\" />\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-semibold\" data-testid=\"text-plan-type\">\n                        {plan.type}\n                      </div>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        {plan.durationDays} days duration\n                      </p>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                      <CardTitle className=\"text-sm font-medium\">Plan Value</CardTitle>\n                      <CreditCard className=\"h-4 w-4 text-chart-2\" />\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-mono font-semibold\" data-testid=\"text-plan-value\">\n                        ₹{parseFloat(plan.listPrice).toLocaleString('en-IN')}\n                      </div>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Total plan value\n                      </p>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                      <CardTitle className=\"text-sm font-medium\">Status</CardTitle>\n                      <Activity className=\"h-4 w-4 text-chart-3\" />\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant={plan.isActive ? 'default' : 'secondary'} data-testid=\"badge-plan-status\">\n                          {plan.isActive ? 'Active' : 'Pending Activation'}\n                        </Badge>\n                      </div>\n                      {plan.startDate && (\n                        <p className=\"text-xs text-muted-foreground mt-2\">\n                          Started: {plan.startDate}\n                        </p>\n                      )}\n                    </CardContent>\n                  </Card>\n                </div>\n              ) : null}\n\n              <Card className=\"border-primary/30 bg-primary/5\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Activity className=\"h-5 w-5\" />\n                    Your Clinical Journey - 6 Stage Process\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {isMilestonesLoading ? (\n                    <div className=\"flex justify-center py-12\">\n                      <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n                    </div>\n                  ) : milestones.length > 0 ? (\n                    <>\n                      <div className=\"relative\">\n                        {/* Horizontal connector line */}\n                        <div className=\"absolute top-6 left-0 right-0 h-0.5 bg-border\" aria-hidden=\"true\" />\n                        \n                        {/* Stage cards in horizontal layout */}\n                        <div className=\"relative flex justify-between gap-2 overflow-x-auto pb-4\">\n                          {milestones.map((milestone, index) => {\n                            const StatusIcon = getStatusIcon(milestone.status);\n                            const statusColor = getStatusColor(milestone.status);\n                            const isCompleted = milestone.status === 'completed';\n                            const isInProgress = milestone.status === 'in_progress';\n                            \n                            return (\n                              <div\n                                key={milestone.id}\n                                className=\"flex flex-col items-center min-w-[140px] flex-1\"\n                                data-testid={`milestone-${milestone.id}`}\n                              >\n                                {/* Stage number and icon */}\n                                <div className={`relative z-10 flex h-12 w-12 items-center justify-center rounded-full border-2 ${\n                                  isCompleted ? 'bg-primary border-primary' :\n                                  isInProgress ? 'bg-chart-2 border-chart-2' :\n                                  'bg-background border-border'\n                                }`}>\n                                  <StatusIcon className={`h-6 w-6 ${\n                                    isCompleted || isInProgress ? 'text-white' : 'text-muted-foreground'\n                                  }`} />\n                                </div>\n                                \n                                {/* Stage name and status */}\n                                <div className=\"mt-3 text-center\">\n                                  <p className={`text-xs font-medium ${\n                                    isCompleted || isInProgress ? 'text-foreground' : 'text-muted-foreground'\n                                  }`} data-testid={`text-milestone-${milestone.id}`}>\n                                    Stage {index + 1}\n                                  </p>\n                                  <p className={`text-xs mt-1 ${\n                                    isCompleted || isInProgress ? 'text-foreground' : 'text-muted-foreground'\n                                  }`}>\n                                    {milestone.name}\n                                  </p>\n                                  {isInProgress && (\n                                    <Badge variant=\"outline\" className=\"text-xs mt-2\">\n                                      In Progress\n                                    </Badge>\n                                  )}\n                                </div>\n                              </div>\n                            );\n                          })}\n                        </div>\n                      </div>\n                      \n                      <div className=\"mt-6 pt-6 border-t\">\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <p className=\"text-sm font-medium\">Overall Progress</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {completedCount} of {totalMilestones} stages completed\n                          </p>\n                        </div>\n                        <Progress value={progressPercentage} data-testid=\"progress-milestones\" className=\"h-2\" />\n                      </div>\n                    </>\n                  ) : (\n                    <p className=\"text-center py-8 text-muted-foreground\">\n                      No milestones available yet. Complete your consultation to begin your journey.\n                    </p>\n                  )}\n                </CardContent>\n              </Card>\n\n              <div className=\"grid md:grid-cols-3 gap-6\">\n                {stats.map((stat, index) => (\n                  <Card key={index} data-testid={`card-stat-${index}`}>\n                    <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                      <CardTitle className=\"text-sm font-medium\" data-testid={`text-stat-label-${index}`}>\n                        {stat.label}\n                      </CardTitle>\n                      <stat.icon className={`h-4 w-4 ${stat.color}`} />\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-2xl font-mono font-semibold\" data-testid={`text-stat-value-${index}`}>\n                        {stat.value}\n                      </div>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Target: {stat.target}\n                      </p>\n                      <Progress \n                        value={(parseInt(stat.value) / parseInt(stat.target)) * 100} \n                        className=\"mt-3\"\n                        data-testid={`progress-stat-${index}`}\n                      />\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n\n              <Tabs defaultValue=\"week\" className=\"space-y-6\">\n                <TabsList data-testid=\"tabs-meal-schedule\">\n                  <TabsTrigger value=\"week\" data-testid=\"tab-week\">This Week</TabsTrigger>\n                  <TabsTrigger value=\"reports\" data-testid=\"tab-reports\">Reports</TabsTrigger>\n                  <TabsTrigger value=\"profile\" data-testid=\"tab-profile\">Profile</TabsTrigger>\n                  <TabsTrigger value=\"settings\" data-testid=\"tab-settings\">Settings</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"week\" className=\"space-y-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle data-testid=\"text-week-meals\">This Week's Meal Plan</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-8\">\n                      {weeklyMeals.map((dayPlan, dayIndex) => (\n                        <div key={dayPlan.day} className=\"space-y-4\">\n                          <div className=\"flex items-center gap-2\">\n                            <h3 className=\"font-semibold text-lg\" data-testid={`text-day-${dayIndex}`}>\n                              {dayPlan.day}\n                            </h3>\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {dayPlan.meals.reduce((sum, meal) => sum + meal.calories, 0)} kcal\n                            </Badge>\n                          </div>\n                          <div className=\"grid md:grid-cols-3 gap-6\">\n                            {dayPlan.meals.map((meal, mealIndex) => (\n                              <MealCard\n                                key={`${dayIndex}-${mealIndex}`}\n                                {...meal}\n                                onSwap={() => console.log(`Swap ${meal.name} on ${dayPlan.day}`)}\n                              />\n                            ))}\n                          </div>\n                        </div>\n                      ))}\n                      <div className=\"text-center pt-4\">\n                        <p className=\"text-sm text-muted-foreground mb-4\">\n                          Showing meals for the first 3 days. Full week available after plan activation.\n                        </p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"reports\" className=\"space-y-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle data-testid=\"text-reports\">Your Health Reports</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"space-y-3\">\n                        <Button\n                          variant=\"outline\"\n                          className=\"w-full justify-between\"\n                          data-testid=\"button-view-test-report\"\n                        >\n                          <span>Blood Test Report</span>\n                          <Badge>Available</Badge>\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          className=\"w-full justify-between\"\n                          disabled\n                          data-testid=\"button-view-diagnosis\"\n                        >\n                          <span>Diagnosis Summary</span>\n                          <Badge variant=\"secondary\">Pending</Badge>\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          className=\"w-full justify-between\"\n                          disabled\n                          data-testid=\"button-view-diet-chart\"\n                        >\n                          <span>Personalized Diet Chart</span>\n                          <Badge variant=\"secondary\">Locked</Badge>\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"profile\" className=\"space-y-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle data-testid=\"text-profile\">Consultation Details</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      {latestConsultation ? (\n                        <div className=\"grid md:grid-cols-2 gap-4\">\n                          <div className=\"space-y-2\">\n                            <p className=\"text-sm text-muted-foreground\">Doctor</p>\n                            <p className=\"font-medium\" data-testid=\"text-doctor\">\n                              {latestConsultation.doctorName || 'Not assigned'}\n                            </p>\n                          </div>\n                          <div className=\"space-y-2\">\n                            <p className=\"text-sm text-muted-foreground\">Date</p>\n                            <p className=\"font-medium\" data-testid=\"text-date\">\n                              {latestConsultation.scheduledDate}\n                            </p>\n                          </div>\n                          <div className=\"space-y-2\">\n                            <p className=\"text-sm text-muted-foreground\">Time</p>\n                            <p className=\"font-medium\" data-testid=\"text-time\">\n                              {latestConsultation.scheduledTime}\n                            </p>\n                          </div>\n                          <div className=\"space-y-2\">\n                            <p className=\"text-sm text-muted-foreground\">Status</p>\n                            <p className=\"font-medium\" data-testid=\"text-status\">\n                              <Badge variant={latestConsultation.status === 'scheduled' ? 'default' : 'secondary'}>\n                                {latestConsultation.status}\n                              </Badge>\n                            </p>\n                          </div>\n                          <div className=\"space-y-2\">\n                            <p className=\"text-sm text-muted-foreground\">Meeting Type</p>\n                            <p className=\"font-medium capitalize\" data-testid=\"text-meeting-type\">\n                              {latestConsultation.meetingType}\n                            </p>\n                          </div>\n                        </div>\n                      ) : (\n                        <p className=\"text-center py-8 text-muted-foreground\">\n                          No consultation booked yet.\n                        </p>\n                      )}\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"settings\" className=\"space-y-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle data-testid=\"text-preferences\">Preferences</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-update-preferences\">\n                        Update Dietary Preferences\n                      </Button>\n                      <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-delivery-schedule\">\n                        Manage Delivery Schedule\n                      </Button>\n                      <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-subscription\">\n                        Subscription Settings\n                      </Button>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n              </Tabs>\n            </div>\n          </div>\n        </section>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":22493},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/examples/ThemeProvider.tsx":{"content":"import { ThemeProvider } from '../ThemeProvider'\nimport { useTheme } from '../ThemeProvider'\nimport { Button } from '@/components/ui/button'\nimport { Moon, Sun } from 'lucide-react'\n\nfunction ThemeToggleExample() {\n  const { theme, setTheme } = useTheme()\n  \n  return (\n    <div className=\"p-8\">\n      <Button\n        variant=\"outline\"\n        size=\"icon\"\n        onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}\n        data-testid=\"button-theme-toggle\"\n      >\n        {theme === 'light' ? <Moon className=\"h-5 w-5\" /> : <Sun className=\"h-5 w-5\" />}\n      </Button>\n      <p className=\"mt-4 text-sm text-muted-foreground\">Current theme: {theme}</p>\n    </div>\n  )\n}\n\nexport default function ThemeProviderExample() {\n  return (\n    <ThemeProvider>\n      <ThemeToggleExample />\n    </ThemeProvider>\n  )\n}\n","size_bytes":819},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/examples/BookingCalendar.tsx":{"content":"import { BookingCalendar } from '../BookingCalendar'\n\nexport default function BookingCalendarExample() {\n  return (\n    <div className=\"p-8 max-w-2xl\">\n      <BookingCalendar />\n    </div>\n  )\n}\n","size_bytes":195},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/Header.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Moon, Sun, Menu, LogOut } from 'lucide-react';\nimport { useTheme } from './ThemeProvider';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useState } from 'react';\nimport { Link } from 'wouter';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n\nexport function Header() {\n  const { theme, setTheme } = useTheme();\n  const { user, isAuthenticated } = useAuth();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  const getInitials = () => {\n    if (!user) return 'U';\n    const firstName = user.firstName || '';\n    const lastName = user.lastName || '';\n    return (firstName.charAt(0) + lastName.charAt(0)).toUpperCase() || 'U';\n  };\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"container mx-auto px-4 md:px-6\">\n        <div className=\"flex h-16 items-center justify-between gap-4\">\n          <Link href=\"/\" className=\"flex items-center space-x-2\" data-testid=\"link-home\">\n            <div className=\"flex h-9 w-9 items-center justify-center rounded-md bg-primary text-primary-foreground\">\n              <span className=\"text-lg font-bold\">NM</span>\n            </div>\n            <span className=\"font-display text-xl font-bold\">NutriMeals</span>\n          </Link>\n\n          <nav className=\"hidden md:flex items-center gap-6\">\n            <Link href=\"/#how-it-works\" className=\"text-sm font-medium hover-elevate px-3 py-2 rounded-md transition-colors\" data-testid=\"link-how-it-works\">\n              How It Works\n            </Link>\n            <Link href=\"/#plans\" className=\"text-sm font-medium hover-elevate px-3 py-2 rounded-md transition-colors\" data-testid=\"link-plans\">\n              Plans\n            </Link>\n            <Link href=\"/#testimonials\" className=\"text-sm font-medium hover-elevate px-3 py-2 rounded-md transition-colors\" data-testid=\"link-testimonials\">\n              Testimonials\n            </Link>\n          </nav>\n\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}\n              data-testid=\"button-theme-toggle\"\n            >\n              {theme === 'light' ? <Moon className=\"h-5 w-5\" /> : <Sun className=\"h-5 w-5\" />}\n            </Button>\n            \n            {isAuthenticated ? (\n              <div className=\"hidden md:flex items-center gap-3\">\n                <Link href=\"/dashboard\">\n                  <Avatar className=\"h-8 w-8\" data-testid=\"avatar-user\">\n                    <AvatarImage src={user?.profileImageUrl || undefined} />\n                    <AvatarFallback>{getInitials()}</AvatarFallback>\n                  </Avatar>\n                </Link>\n                <a href=\"/api/logout\">\n                  <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-logout\">\n                    <LogOut className=\"h-4 w-4 mr-2\" />\n                    Log Out\n                  </Button>\n                </a>\n              </div>\n            ) : (\n              <div className=\"hidden md:flex items-center gap-2\">\n                <a href=\"/api/login\">\n                  <Button variant=\"ghost\" data-testid=\"button-login\">\n                    Log In\n                  </Button>\n                </a>\n                <a href=\"/api/login\">\n                  <Button data-testid=\"button-get-started\">\n                    Get Started\n                  </Button>\n                </a>\n              </div>\n            )}\n\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"md:hidden\"\n              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n              data-testid=\"button-mobile-menu\"\n            >\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n          </div>\n        </div>\n\n        {mobileMenuOpen && (\n          <div className=\"md:hidden py-4 border-t\" data-testid=\"mobile-menu\">\n            <nav className=\"flex flex-col gap-2\">\n              <Link href=\"/#how-it-works\" className=\"text-sm font-medium hover-elevate px-3 py-2 rounded-md\">\n                How It Works\n              </Link>\n              <Link href=\"/#plans\" className=\"text-sm font-medium hover-elevate px-3 py-2 rounded-md\">\n                Plans\n              </Link>\n              <Link href=\"/#testimonials\" className=\"text-sm font-medium hover-elevate px-3 py-2 rounded-md\">\n                Testimonials\n              </Link>\n              {isAuthenticated ? (\n                <div className=\"flex gap-2 mt-2\">\n                  <Link href=\"/dashboard\" className=\"flex-1\">\n                    <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-mobile-dashboard\">\n                      Dashboard\n                    </Button>\n                  </Link>\n                  <a href=\"/api/logout\" className=\"flex-1\">\n                    <Button variant=\"ghost\" className=\"w-full\" data-testid=\"button-mobile-logout\">\n                      Log Out\n                    </Button>\n                  </a>\n                </div>\n              ) : (\n                <div className=\"flex gap-2 mt-2\">\n                  <a href=\"/api/login\" className=\"flex-1\">\n                    <Button variant=\"ghost\" className=\"w-full\" data-testid=\"button-mobile-login\">\n                      Log In\n                    </Button>\n                  </a>\n                  <a href=\"/api/login\" className=\"flex-1\">\n                    <Button className=\"w-full\" data-testid=\"button-mobile-get-started\">\n                      Get Started\n                    </Button>\n                  </a>\n                </div>\n              )}\n            </nav>\n          </div>\n        )}\n      </div>\n    </header>\n  );\n}\n","size_bytes":5866},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/pages/Kitchen.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useToast } from '@/hooks/use-toast';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { ChefHat, Clock, CheckCircle2, Package } from 'lucide-react';\nimport type { Order } from '@shared/schema';\nimport { isUnauthorizedError } from '@/lib/authUtils';\n\nexport default function Kitchen() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n\n    if (!isLoading && user && user.role !== 'kitchen') {\n      toast({\n        title: \"Access Denied\",\n        description: \"You don't have permission to access this page.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  const isAuthorized = isAuthenticated && user && user.role === 'kitchen';\n\n  const { data: pendingOrders, isLoading: loadingPending } = useQuery<Order[]>({\n    queryKey: ['/api/kitchen/orders/pending'],\n    enabled: isAuthorized,\n  });\n\n  const { data: preparingOrders, isLoading: loadingPreparing } = useQuery<Order[]>({\n    queryKey: ['/api/kitchen/orders/preparing'],\n    enabled: isAuthorized,\n  });\n\n  const { data: readyOrders, isLoading: loadingReady } = useQuery<Order[]>({\n    queryKey: ['/api/kitchen/orders/ready'],\n    enabled: isAuthorized,\n  });\n\n  const updateOrderMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      await apiRequest('PATCH', `/api/kitchen/orders/${id}`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/kitchen/orders/pending'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/kitchen/orders/preparing'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/kitchen/orders/ready'] });\n      toast({\n        title: \"Success\",\n        description: \"Order status updated\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update order status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading || loadingPending || loadingPreparing || loadingReady || !isAuthorized) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <p className=\"text-muted-foreground\">Loading...</p>\n      </div>\n    );\n  }\n\n  const OrderCard = ({ order }: { order: Order }) => (\n    <Card className=\"hover-elevate\" data-testid={`order-card-${order.id}`}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start justify-between mb-4\">\n          <div>\n            <p className=\"font-semibold mb-1\" data-testid={`order-id-${order.id}`}>\n              Order #{order.id.slice(0, 8)}\n            </p>\n            <p className=\"text-sm text-muted-foreground\">\n              Delivery: {new Date(order.deliveryDate!).toLocaleDateString()}\n            </p>\n          </div>\n          <Badge\n            variant={\n              order.status === 'pending' ? 'secondary' :\n              order.status === 'preparing' ? 'default' :\n              'outline'\n            }\n            data-testid={`order-status-${order.id}`}\n          >\n            {order.status}\n          </Badge>\n        </div>\n\n        <div className=\"mb-4\">\n          <p className=\"text-sm font-medium mb-1\">Delivery Address</p>\n          <p className=\"text-sm text-muted-foreground\">{order.deliveryAddress}</p>\n        </div>\n\n        <div className=\"flex gap-2\">\n          {order.status === 'pending' && (\n            <Button\n              size=\"sm\"\n              onClick={() => updateOrderMutation.mutate({ id: order.id, status: 'preparing' })}\n              disabled={updateOrderMutation.isPending}\n              data-testid={`button-start-preparing-${order.id}`}\n            >\n              <ChefHat className=\"h-4 w-4 mr-2\" />\n              Start Preparing\n            </Button>\n          )}\n          {order.status === 'preparing' && (\n            <Button\n              size=\"sm\"\n              onClick={() => updateOrderMutation.mutate({ id: order.id, status: 'ready' })}\n              disabled={updateOrderMutation.isPending}\n              data-testid={`button-mark-ready-${order.id}`}\n            >\n              <CheckCircle2 className=\"h-4 w-4 mr-2\" />\n              Mark as Ready\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"font-display text-3xl font-bold mb-2\" data-testid=\"text-kitchen-title\">\n            Kitchen Management\n          </h1>\n          <p className=\"text-muted-foreground\">Manage meal preparation and orders</p>\n        </div>\n\n        <Tabs defaultValue=\"pending\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"pending\" className=\"flex items-center gap-2\" data-testid=\"tab-pending\">\n              <Clock className=\"h-4 w-4\" />\n              Pending ({pendingOrders?.length || 0})\n            </TabsTrigger>\n            <TabsTrigger value=\"preparing\" className=\"flex items-center gap-2\" data-testid=\"tab-preparing\">\n              <ChefHat className=\"h-4 w-4\" />\n              Preparing ({preparingOrders?.length || 0})\n            </TabsTrigger>\n            <TabsTrigger value=\"ready\" className=\"flex items-center gap-2\" data-testid=\"tab-ready\">\n              <Package className=\"h-4 w-4\" />\n              Ready ({readyOrders?.length || 0})\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"pending\" className=\"space-y-4 mt-6\">\n            {pendingOrders && pendingOrders.length > 0 ? (\n              <div className=\"grid gap-4\">\n                {pendingOrders.map((order) => (\n                  <OrderCard key={order.id} order={order} />\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <Clock className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                <p className=\"text-muted-foreground\">No pending orders</p>\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"preparing\" className=\"space-y-4 mt-6\">\n            {preparingOrders && preparingOrders.length > 0 ? (\n              <div className=\"grid gap-4\">\n                {preparingOrders.map((order) => (\n                  <OrderCard key={order.id} order={order} />\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <ChefHat className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                <p className=\"text-muted-foreground\">No orders in preparation</p>\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"ready\" className=\"space-y-4 mt-6\">\n            {readyOrders && readyOrders.length > 0 ? (\n              <div className=\"grid gap-4\">\n                {readyOrders.map((order) => (\n                  <OrderCard key={order.id} order={order} />\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <Package className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                <p className=\"text-muted-foreground\">No ready orders</p>\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8513},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/MealCard.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { ArrowRightLeft } from 'lucide-react';\n\ninterface MealCardProps {\n  name: string;\n  image: string;\n  calories: number;\n  protein: number;\n  carbs: number;\n  fats: number;\n  mealType: 'breakfast' | 'lunch' | 'dinner' | 'snack';\n  onSwap?: () => void;\n}\n\nconst mealTypeColors = {\n  breakfast: 'bg-chart-2/10 text-chart-2 border-chart-2/20',\n  lunch: 'bg-chart-1/10 text-chart-1 border-chart-1/20',\n  dinner: 'bg-chart-3/10 text-chart-3 border-chart-3/20',\n  snack: 'bg-chart-5/10 text-chart-5 border-chart-5/20',\n};\n\nexport function MealCard({ name, image, calories, protein, carbs, fats, mealType, onSwap }: MealCardProps) {\n  return (\n    <Card className=\"overflow-hidden hover-elevate transition-all group\" data-testid={`card-meal-${name.toLowerCase().replace(/\\s/g, '-')}`}>\n      <div className=\"relative aspect-[4/3] overflow-hidden\">\n        <img\n          src={image}\n          alt={name}\n          className=\"w-full h-full object-cover transition-transform group-hover:scale-105\"\n          data-testid=\"img-meal\"\n        />\n        <Badge className={`absolute top-3 left-3 ${mealTypeColors[mealType]}`} data-testid=\"badge-meal-type\">\n          {mealType.charAt(0).toUpperCase() + mealType.slice(1)}\n        </Badge>\n      </div>\n      \n      <CardContent className=\"p-4 space-y-4\">\n        <h3 className=\"font-semibold text-lg\" data-testid=\"text-meal-name\">{name}</h3>\n        \n        <div className=\"grid grid-cols-4 gap-2 text-center\">\n          <div className=\"space-y-1\">\n            <p className=\"text-xs text-muted-foreground\">Calories</p>\n            <p className=\"font-mono font-semibold\" data-testid=\"text-calories\">{calories}</p>\n          </div>\n          <div className=\"space-y-1\">\n            <p className=\"text-xs text-muted-foreground\">Protein</p>\n            <p className=\"font-mono font-semibold\" data-testid=\"text-protein\">{protein}g</p>\n          </div>\n          <div className=\"space-y-1\">\n            <p className=\"text-xs text-muted-foreground\">Carbs</p>\n            <p className=\"font-mono font-semibold\" data-testid=\"text-carbs\">{carbs}g</p>\n          </div>\n          <div className=\"space-y-1\">\n            <p className=\"text-xs text-muted-foreground\">Fats</p>\n            <p className=\"font-mono font-semibold\" data-testid=\"text-fats\">{fats}g</p>\n          </div>\n        </div>\n\n        {onSwap && (\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"w-full\"\n            onClick={onSwap}\n            data-testid=\"button-swap-meal\"\n          >\n            <ArrowRightLeft className=\"h-4 w-4 mr-2\" />\n            Swap Meal\n          </Button>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2834},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"server/storage.ts":{"content":"import { type User, type UpsertUser, type InsertUser, type CustomerProfile, type InsertCustomerProfile, type Subscription, type InsertSubscription, type Milestone, type InsertMilestone, type Report, type InsertReport, type Consultation, type InsertConsultation, type Order, type InsertOrder, type PaymentSession, type InsertPaymentSession, type Plan, type InsertPlan, type StageProgress, type InsertStageProgress, type Document, type InsertDocument, type DietPlan, type InsertDietPlan, type Address, type InsertAddress, type DeliverySync, type InsertDeliverySync, type Acknowledgement, type InsertAcknowledgement, type StaffActivityLog, type InsertStaffActivityLog, type DeliveryLocation, type InsertDeliveryLocation, users, customerProfiles, milestones, reports, consultations, orders, paymentSessions, subscriptions, mealPlans, notifications, plans, stageProgress, documents, dietPlans, addresses, deliverySync, acknowledgements, staffActivityLog, deliveryLocation } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq, and } from \"drizzle-orm\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  createUser(user: InsertUser): Promise<User>;\n  getCustomers(): Promise<User[]>;\n  \n  getCustomerProfile(userId: string): Promise<CustomerProfile | undefined>;\n  createCustomerProfile(profile: InsertCustomerProfile): Promise<CustomerProfile>;\n  updateCustomerProfile(id: string, profile: Partial<InsertCustomerProfile>): Promise<CustomerProfile | undefined>;\n  \n  getUserMilestones(userId: string): Promise<Milestone[]>;\n  createMilestone(milestone: InsertMilestone): Promise<Milestone>;\n  updateMilestone(id: string, status: string): Promise<Milestone | undefined>;\n  \n  getUserReports(userId: string): Promise<Report[]>;\n  createReport(report: InsertReport): Promise<Report>;\n  \n  createConsultation(consultation: InsertConsultation): Promise<Consultation>;\n  getUserConsultations(userId: string): Promise<Consultation[]>;\n  \n  getOrdersByStatus(status: string): Promise<Order[]>;\n  getOrderById(id: string): Promise<Order | undefined>;\n  getOrdersByUserId(userId: string): Promise<Order[]>;\n  updateOrderStatus(id: string, status: string): Promise<Order | undefined>;\n  updateOrder(id: string, data: Partial<InsertOrder>): Promise<Order | undefined>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  \n  createPaymentSession(session: InsertPaymentSession): Promise<PaymentSession>;\n  getPaymentSession(id: string): Promise<PaymentSession | undefined>;\n  updatePaymentSession(id: string, updates: Partial<PaymentSession>): Promise<PaymentSession | undefined>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  \n  // New Clinical Plan methods\n  createPlan(plan: InsertPlan): Promise<Plan>;\n  getPlan(id: string): Promise<Plan | undefined>;\n  getUserPlan(userId: string): Promise<Plan | undefined>;\n  updatePlan(id: string, updates: Partial<Plan>): Promise<Plan | undefined>;\n  \n  getUserStageProgress(userId: string): Promise<StageProgress[]>;\n  createStageProgress(stage: InsertStageProgress): Promise<StageProgress>;\n  updateStageProgress(id: string, updates: Partial<StageProgress>): Promise<StageProgress | undefined>;\n  \n  getUserDocuments(userId: string): Promise<Document[]>;\n  getDocumentsByStage(userId: string, stage: number): Promise<Document[]>;\n  createDocument(document: InsertDocument): Promise<Document>;\n  \n  getUserDietPlan(userId: string): Promise<DietPlan | undefined>;\n  createDietPlan(dietPlan: InsertDietPlan): Promise<DietPlan>;\n  updateDietPlan(id: string, updates: Partial<DietPlan>): Promise<DietPlan | undefined>;\n  \n  getUserAddresses(userId: string): Promise<Address[]>;\n  getAddress(id: string): Promise<Address | undefined>;\n  createAddress(address: InsertAddress): Promise<Address>;\n  updateAddress(id: string, updates: Partial<Address>): Promise<Address | undefined>;\n  deleteAddress(id: string): Promise<boolean>;\n  \n  createDeliverySync(sync: InsertDeliverySync): Promise<DeliverySync>;\n  getUserDeliverySyncs(userId: string): Promise<DeliverySync[]>;\n  updateDeliverySync(id: string, updates: Partial<DeliverySync>): Promise<DeliverySync | undefined>;\n  \n  // Acknowledgement methods\n  createAcknowledgement(ack: InsertAcknowledgement): Promise<Acknowledgement>;\n  getStaffAcknowledgements(staffId: string): Promise<Acknowledgement[]>;\n  getCustomerAcknowledgements(customerId: string): Promise<Acknowledgement[]>;\n  updateAcknowledgement(id: string, updates: Partial<Acknowledgement>): Promise<Acknowledgement | undefined>;\n  getAllAcknowledgements(): Promise<Acknowledgement[]>;\n  \n  // Staff Activity Log methods\n  createStaffActivity(activity: InsertStaffActivityLog): Promise<StaffActivityLog>;\n  getStaffActivities(staffId: string): Promise<StaffActivityLog[]>;\n  getCustomerActivities(customerId: string): Promise<StaffActivityLog[]>;\n  getAllStaffActivities(): Promise<StaffActivityLog[]>;\n  \n  // Delivery Location methods\n  upsertDeliveryLocation(location: InsertDeliveryLocation): Promise<DeliveryLocation>;\n  getDeliveryLocation(deliveryPersonId: string): Promise<DeliveryLocation | undefined>;\n  getAllDeliveryLocations(): Promise<DeliveryLocation[]>;\n  updateDeliveryLocation(deliveryPersonId: string, updates: Partial<DeliveryLocation>): Promise<DeliveryLocation | undefined>;\n  \n  // Staff assignment methods\n  getStaffByRole(role: string): Promise<User[]>;\n  getClinicalCustomers(): Promise<User[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private profiles: Map<string, CustomerProfile>;\n  private milestones: Map<string, Milestone>;\n  private reports: Map<string, Report>;\n  private consultations: Map<string, Consultation>;\n  private orders: Map<string, Order>;\n  private paymentSessions: Map<string, PaymentSession>;\n  private plans: Map<string, Plan>;\n  private stageProgress: Map<string, StageProgress>;\n  private documents: Map<string, Document>;\n  private dietPlans: Map<string, DietPlan>;\n  private addresses: Map<string, Address>;\n  private deliverySyncs: Map<string, DeliverySync>;\n  private acknowledgements: Map<string, Acknowledgement>;\n  private staffActivities: Map<string, StaffActivityLog>;\n  private deliveryLocations: Map<string, DeliveryLocation>;\n\n  constructor() {\n    this.users = new Map();\n    this.profiles = new Map();\n    this.milestones = new Map();\n    this.reports = new Map();\n    this.consultations = new Map();\n    this.orders = new Map();\n    this.paymentSessions = new Map();\n    this.plans = new Map();\n    this.stageProgress = new Map();\n    this.documents = new Map();\n    this.dietPlans = new Map();\n    this.addresses = new Map();\n    this.deliverySyncs = new Map();\n    this.acknowledgements = new Map();\n    this.staffActivities = new Map();\n    this.deliveryLocations = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async upsertUser(upsertUser: UpsertUser): Promise<User> {\n    const existingUser = upsertUser.id ? this.users.get(upsertUser.id) : undefined;\n    const user: User = {\n      id: upsertUser.id || randomUUID(),\n      email: upsertUser.email || null,\n      firstName: upsertUser.firstName || null,\n      lastName: upsertUser.lastName || null,\n      phone: upsertUser.phone || existingUser?.phone || null,\n      profileImageUrl: upsertUser.profileImageUrl || null,\n      characterImageUrl: upsertUser.characterImageUrl || existingUser?.characterImageUrl || null,\n      characterType: upsertUser.characterType || existingUser?.characterType || null,\n      role: upsertUser.role || existingUser?.role || 'customer',\n      createdAt: existingUser?.createdAt || new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(user.id, user);\n    return user;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      id,\n      email: insertUser.email || null,\n      firstName: insertUser.firstName || null,\n      lastName: insertUser.lastName || null,\n      phone: insertUser.phone || null,\n      profileImageUrl: insertUser.profileImageUrl || null,\n      characterImageUrl: insertUser.characterImageUrl || null,\n      characterType: insertUser.characterType || null,\n      role: insertUser.role || 'customer',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getCustomers(): Promise<User[]> {\n    return Array.from(this.users.values()).filter(\n      (user) => user.role === 'customer'\n    );\n  }\n\n  async getCustomerProfile(userId: string): Promise<CustomerProfile | undefined> {\n    return Array.from(this.profiles.values()).find(\n      (profile) => profile.userId === userId,\n    );\n  }\n\n  async createCustomerProfile(insertProfile: InsertCustomerProfile): Promise<CustomerProfile> {\n    const id = randomUUID();\n    const profile: CustomerProfile = {\n      ...insertProfile,\n      id,\n      age: insertProfile.age || null,\n      gender: insertProfile.gender || null,\n      weight: insertProfile.weight || null,\n      height: insertProfile.height || null,\n      goal: insertProfile.goal || null,\n      activityLevel: insertProfile.activityLevel || null,\n      healthConcerns: insertProfile.healthConcerns || null,\n      medications: insertProfile.medications || null,\n      dietaryPreference: insertProfile.dietaryPreference || null,\n      allergies: insertProfile.allergies || null,\n      mealsPerDay: insertProfile.mealsPerDay || null,\n      flavorPreference: insertProfile.flavorPreference || null,\n      wakeUpTime: insertProfile.wakeUpTime || null,\n      sleepTime: insertProfile.sleepTime || null,\n      lateNightEating: insertProfile.lateNightEating || null,\n      alcoholConsumption: insertProfile.alcoholConsumption || null,\n      waterIntake: insertProfile.waterIntake || null,\n      snacksAndDesserts: insertProfile.snacksAndDesserts || null,\n      dailyBudget: insertProfile.dailyBudget || null,\n      resultsTimeline: insertProfile.resultsTimeline || null,\n      quizAnswers: insertProfile.quizAnswers || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.profiles.set(id, profile);\n    return profile;\n  }\n\n  async updateCustomerProfile(id: string, updates: Partial<InsertCustomerProfile>): Promise<CustomerProfile | undefined> {\n    const profile = this.profiles.get(id);\n    if (!profile) return undefined;\n    \n    const updated: CustomerProfile = {\n      ...profile,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    this.profiles.set(id, updated);\n    return updated;\n  }\n\n  async getUserMilestones(userId: string): Promise<Milestone[]> {\n    return Array.from(this.milestones.values()).filter(\n      (milestone) => milestone.userId === userId,\n    ).sort((a, b) => a.order - b.order);\n  }\n\n  async updateMilestone(id: string, status: string): Promise<Milestone | undefined> {\n    const milestone = this.milestones.get(id);\n    if (!milestone) return undefined;\n    \n    const updated: Milestone = {\n      ...milestone,\n      status,\n      completedAt: status === 'completed' ? new Date() : milestone.completedAt,\n    };\n    this.milestones.set(id, updated);\n    return updated;\n  }\n\n  async getUserReports(userId: string): Promise<Report[]> {\n    return Array.from(this.reports.values()).filter(\n      (report) => report.userId === userId,\n    );\n  }\n\n  async createReport(insertReport: InsertReport): Promise<Report> {\n    const id = randomUUID();\n    const report: Report = {\n      ...insertReport,\n      id,\n      fileUrl: insertReport.fileUrl || null,\n      summary: insertReport.summary || null,\n      data: insertReport.data || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.reports.set(id, report);\n    return report;\n  }\n\n  async createMilestone(insertMilestone: InsertMilestone): Promise<Milestone> {\n    const id = randomUUID();\n    const milestone: Milestone = {\n      ...insertMilestone,\n      id,\n      status: insertMilestone.status || 'locked',\n      completedAt: null,\n      createdAt: new Date(),\n    };\n    this.milestones.set(id, milestone);\n    return milestone;\n  }\n\n  async createConsultation(insertConsultation: InsertConsultation): Promise<Consultation> {\n    const id = randomUUID();\n    const consultation: Consultation = {\n      ...insertConsultation,\n      id,\n      status: insertConsultation.status || 'scheduled',\n      doctorName: insertConsultation.doctorName || null,\n      consultantId: insertConsultation.consultantId || null,\n      notes: insertConsultation.notes || null,\n      consultationFeePaid: insertConsultation.consultationFeePaid || null,\n      createdAt: new Date(),\n    };\n    this.consultations.set(id, consultation);\n    return consultation;\n  }\n\n  async getUserConsultations(userId: string): Promise<Consultation[]> {\n    return Array.from(this.consultations.values()).filter(\n      (consultation) => consultation.userId === userId\n    );\n  }\n\n  async getOrdersByStatus(status: string): Promise<Order[]> {\n    return Array.from(this.orders.values()).filter(\n      (order) => order.status === status\n    );\n  }\n\n  async updateOrderStatus(id: string, status: string): Promise<Order | undefined> {\n    const order = this.orders.get(id);\n    if (!order) return undefined;\n    \n    const updated: Order = {\n      ...order,\n      status,\n      deliveredAt: status === 'delivered' ? new Date() : order.deliveredAt,\n    };\n    this.orders.set(id, updated);\n    return updated;\n  }\n\n  async createOrder(insertOrder: InsertOrder): Promise<Order> {\n    const id = randomUUID();\n    const order: Order = {\n      id,\n      userId: insertOrder.userId,\n      mealPlanId: insertOrder.mealPlanId || null,\n      deliveryDate: insertOrder.deliveryDate,\n      deliveryAddress: insertOrder.deliveryAddress,\n      status: insertOrder.status || 'pending',\n      assignedDeliveryPersonId: insertOrder.assignedDeliveryPersonId || null,\n      deliveredAt: null,\n      createdAt: new Date(),\n    };\n    this.orders.set(id, order);\n    return order;\n  }\n\n  async getOrderById(id: string): Promise<Order | undefined> {\n    return this.orders.get(id);\n  }\n\n  async getOrdersByUserId(userId: string): Promise<Order[]> {\n    return Array.from(this.orders.values()).filter(\n      (order) => order.userId === userId\n    );\n  }\n\n  async updateOrder(id: string, data: Partial<InsertOrder>): Promise<Order | undefined> {\n    const order = this.orders.get(id);\n    if (!order) return undefined;\n    \n    const updated: Order = {\n      ...order,\n      ...data,\n      id: order.id, // Preserve ID\n      createdAt: order.createdAt // Preserve creation date\n    };\n    this.orders.set(id, updated);\n    return updated;\n  }\n\n  async createPaymentSession(insertSession: InsertPaymentSession): Promise<PaymentSession> {\n    const id = randomUUID();\n    const session: PaymentSession = {\n      id,\n      userId: insertSession.userId,\n      consultationDate: insertSession.consultationDate,\n      planType: insertSession.planType,\n      amount: insertSession.amount,\n      status: insertSession.status || 'pending',\n      paymentMethod: insertSession.paymentMethod || null,\n      razorpayOrderId: null,\n      completedAt: null,\n      createdAt: new Date(),\n    };\n    this.paymentSessions.set(id, session);\n    return session;\n  }\n\n  async getPaymentSession(id: string): Promise<PaymentSession | undefined> {\n    return this.paymentSessions.get(id);\n  }\n\n  async updatePaymentSession(id: string, updates: Partial<PaymentSession>): Promise<PaymentSession | undefined> {\n    const session = this.paymentSessions.get(id);\n    if (!session) return undefined;\n    \n    const updated: PaymentSession = {\n      ...session,\n      ...updates,\n      completedAt: updates.status === 'completed' ? new Date() : session.completedAt,\n    };\n    this.paymentSessions.set(id, updated);\n    return updated;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updated: User = {\n      ...user,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    this.users.set(id, updated);\n    return updated;\n  }\n\n  // Plan methods\n  async createPlan(insertPlan: InsertPlan): Promise<Plan> {\n    const id = randomUUID();\n    const plan: Plan = {\n      ...insertPlan,\n      id,\n      type: insertPlan.type || 'Clinical',\n      discountAmount: insertPlan.discountAmount || '0',\n      consultationFeeCredited: insertPlan.consultationFeeCredited || '0',\n      isActive: insertPlan.isActive || false,\n      durationDays: insertPlan.durationDays || 30,\n      listPrice: insertPlan.listPrice || null,\n      finalPayable: insertPlan.finalPayable || null,\n      startDate: insertPlan.startDate || null,\n      createdAt: new Date(),\n    };\n    this.plans.set(id, plan);\n    return plan;\n  }\n\n  async getPlan(id: string): Promise<Plan | undefined> {\n    return this.plans.get(id);\n  }\n\n  async getUserPlan(userId: string): Promise<Plan | undefined> {\n    return Array.from(this.plans.values()).find(p => p.userId === userId && p.isActive);\n  }\n\n  async updatePlan(id: string, updates: Partial<Plan>): Promise<Plan | undefined> {\n    const plan = this.plans.get(id);\n    if (!plan) return undefined;\n    const updated: Plan = { ...plan, ...updates };\n    this.plans.set(id, updated);\n    return updated;\n  }\n\n  // Stage Progress methods\n  async getUserStageProgress(userId: string): Promise<StageProgress[]> {\n    return Array.from(this.stageProgress.values()).filter(s => s.userId === userId);\n  }\n\n  async createStageProgress(insertStage: InsertStageProgress): Promise<StageProgress> {\n    const id = randomUUID();\n    const stage: StageProgress = {\n      ...insertStage,\n      id,\n      status: insertStage.status || 'pending',\n      updatedAt: new Date(),\n    };\n    this.stageProgress.set(id, stage);\n    return stage;\n  }\n\n  async updateStageProgress(id: string, updates: Partial<StageProgress>): Promise<StageProgress | undefined> {\n    const stage = this.stageProgress.get(id);\n    if (!stage) return undefined;\n    const updated: StageProgress = { ...stage, ...updates, updatedAt: new Date() };\n    this.stageProgress.set(id, updated);\n    return updated;\n  }\n\n  // Document methods\n  async getUserDocuments(userId: string): Promise<Document[]> {\n    return Array.from(this.documents.values()).filter(d => d.userId === userId);\n  }\n\n  async getDocumentsByStage(userId: string, stage: number): Promise<Document[]> {\n    return Array.from(this.documents.values()).filter(\n      d => d.userId === userId && d.stage === stage\n    );\n  }\n\n  async createDocument(insertDoc: InsertDocument): Promise<Document> {\n    const id = randomUUID();\n    const document: Document = {\n      ...insertDoc,\n      id,\n      stage: insertDoc.stage || null,\n      label: insertDoc.label || null,\n      uploadedByRole: insertDoc.uploadedByRole || null,\n      mimeType: insertDoc.mimeType || null,\n      meta: insertDoc.meta || null,\n      createdAt: new Date(),\n    };\n    this.documents.set(id, document);\n    return document;\n  }\n\n  // Diet Plan methods\n  async getUserDietPlan(userId: string): Promise<DietPlan | undefined> {\n    return Array.from(this.dietPlans.values()).find(d => d.userId === userId);\n  }\n\n  async createDietPlan(insertDietPlan: InsertDietPlan): Promise<DietPlan> {\n    const id = randomUUID();\n    const dietPlan: DietPlan = {\n      ...insertDietPlan,\n      id,\n      macros: insertDietPlan.macros || null,\n      weeklyPlan: insertDietPlan.weeklyPlan || null,\n      pdfUrl: insertDietPlan.pdfUrl || null,\n      createdAt: new Date(),\n    };\n    this.dietPlans.set(id, dietPlan);\n    return dietPlan;\n  }\n\n  async updateDietPlan(id: string, updates: Partial<DietPlan>): Promise<DietPlan | undefined> {\n    const dietPlan = this.dietPlans.get(id);\n    if (!dietPlan) return undefined;\n    const updated: DietPlan = { ...dietPlan, ...updates };\n    this.dietPlans.set(id, updated);\n    return updated;\n  }\n\n  // Address methods\n  async getUserAddresses(userId: string): Promise<Address[]> {\n    return Array.from(this.addresses.values()).filter(a => a.userId === userId);\n  }\n\n  async getAddress(id: string): Promise<Address | undefined> {\n    return this.addresses.get(id);\n  }\n\n  async createAddress(insertAddress: InsertAddress): Promise<Address> {\n    const id = randomUUID();\n    const address: Address = {\n      ...insertAddress,\n      id,\n      label: insertAddress.label || null,\n      line1: insertAddress.line1 || null,\n      line2: insertAddress.line2 || null,\n      city: insertAddress.city || null,\n      state: insertAddress.state || null,\n      pincode: insertAddress.pincode || null,\n      isDefault: insertAddress.isDefault || false,\n      breakfast: insertAddress.breakfast || false,\n      lunch: insertAddress.lunch || false,\n      dinner: insertAddress.dinner || false,\n      createdAt: new Date(),\n    };\n    this.addresses.set(id, address);\n    return address;\n  }\n\n  async updateAddress(id: string, updates: Partial<Address>): Promise<Address | undefined> {\n    const address = this.addresses.get(id);\n    if (!address) return undefined;\n    const updated: Address = { ...address, ...updates };\n    this.addresses.set(id, updated);\n    return updated;\n  }\n\n  async deleteAddress(id: string): Promise<boolean> {\n    return this.addresses.delete(id);\n  }\n\n  // Delivery Sync methods\n  async createDeliverySync(insertSync: InsertDeliverySync): Promise<DeliverySync> {\n    const id = randomUUID();\n    const sync: DeliverySync = {\n      ...insertSync,\n      id,\n      planId: insertSync.planId || null,\n      payload: insertSync.payload || null,\n      status: insertSync.status || 'queued',\n      createdAt: new Date(),\n    };\n    this.deliverySyncs.set(id, sync);\n    return sync;\n  }\n\n  async getUserDeliverySyncs(userId: string): Promise<DeliverySync[]> {\n    return Array.from(this.deliverySyncs.values()).filter(s => s.userId === userId);\n  }\n\n  async updateDeliverySync(id: string, updates: Partial<DeliverySync>): Promise<DeliverySync | undefined> {\n    const sync = this.deliverySyncs.get(id);\n    if (!sync) return undefined;\n    const updated: DeliverySync = { ...sync, ...updates };\n    this.deliverySyncs.set(id, updated);\n    return updated;\n  }\n\n  // Acknowledgement methods\n  async createAcknowledgement(insertAck: InsertAcknowledgement): Promise<Acknowledgement> {\n    const id = randomUUID();\n    const ack: Acknowledgement = {\n      ...insertAck,\n      id,\n      status: insertAck.status || 'pending',\n      stage: insertAck.stage || null,\n      acknowledgedAt: insertAck.acknowledgedAt || null,\n      completedAt: insertAck.completedAt || null,\n      createdAt: new Date(),\n    };\n    this.acknowledgements.set(id, ack);\n    return ack;\n  }\n\n  async getStaffAcknowledgements(staffId: string): Promise<Acknowledgement[]> {\n    return Array.from(this.acknowledgements.values()).filter(a => a.staffId === staffId);\n  }\n\n  async getCustomerAcknowledgements(customerId: string): Promise<Acknowledgement[]> {\n    return Array.from(this.acknowledgements.values()).filter(a => a.customerId === customerId);\n  }\n\n  async updateAcknowledgement(id: string, updates: Partial<Acknowledgement>): Promise<Acknowledgement | undefined> {\n    const ack = this.acknowledgements.get(id);\n    if (!ack) return undefined;\n    const updated: Acknowledgement = { ...ack, ...updates };\n    this.acknowledgements.set(id, updated);\n    return updated;\n  }\n\n  async getAllAcknowledgements(): Promise<Acknowledgement[]> {\n    return Array.from(this.acknowledgements.values());\n  }\n\n  // Staff Activity Log methods\n  async createStaffActivity(insertActivity: InsertStaffActivityLog): Promise<StaffActivityLog> {\n    const id = randomUUID();\n    const activity: StaffActivityLog = {\n      ...insertActivity,\n      id,\n      customerId: insertActivity.customerId || null,\n      stage: insertActivity.stage || null,\n      description: insertActivity.description || null,\n      metadata: insertActivity.metadata || null,\n      createdAt: new Date(),\n    };\n    this.staffActivities.set(id, activity);\n    return activity;\n  }\n\n  async getStaffActivities(staffId: string): Promise<StaffActivityLog[]> {\n    return Array.from(this.staffActivities.values()).filter(a => a.staffId === staffId);\n  }\n\n  async getCustomerActivities(customerId: string): Promise<StaffActivityLog[]> {\n    return Array.from(this.staffActivities.values()).filter(a => a.customerId === customerId);\n  }\n\n  async getAllStaffActivities(): Promise<StaffActivityLog[]> {\n    return Array.from(this.staffActivities.values());\n  }\n\n  // Delivery Location methods\n  async upsertDeliveryLocation(insertLocation: InsertDeliveryLocation): Promise<DeliveryLocation> {\n    const existing = Array.from(this.deliveryLocations.values()).find(\n      l => l.deliveryPersonId === insertLocation.deliveryPersonId\n    );\n    \n    if (existing) {\n      const updated: DeliveryLocation = {\n        ...existing,\n        ...insertLocation,\n        lastUpdated: new Date(),\n      };\n      this.deliveryLocations.set(existing.id, updated);\n      return updated;\n    }\n\n    const id = randomUUID();\n    const location: DeliveryLocation = {\n      ...insertLocation,\n      id,\n      status: insertLocation.status || 'idle',\n      lastUpdated: new Date(),\n    };\n    this.deliveryLocations.set(id, location);\n    return location;\n  }\n\n  async getDeliveryLocation(deliveryPersonId: string): Promise<DeliveryLocation | undefined> {\n    return Array.from(this.deliveryLocations.values()).find(l => l.deliveryPersonId === deliveryPersonId);\n  }\n\n  async getAllDeliveryLocations(): Promise<DeliveryLocation[]> {\n    return Array.from(this.deliveryLocations.values());\n  }\n\n  async updateDeliveryLocation(deliveryPersonId: string, updates: Partial<DeliveryLocation>): Promise<DeliveryLocation | undefined> {\n    const location = Array.from(this.deliveryLocations.values()).find(l => l.deliveryPersonId === deliveryPersonId);\n    if (!location) return undefined;\n    const updated: DeliveryLocation = { ...location, ...updates, lastUpdated: new Date() };\n    this.deliveryLocations.set(location.id, updated);\n    return updated;\n  }\n\n  // Staff assignment methods\n  async getStaffByRole(role: string): Promise<User[]> {\n    return Array.from(this.users.values()).filter(u => u.role === role);\n  }\n\n  async getClinicalCustomers(): Promise<User[]> {\n    const clinicalPlanUsers = Array.from(this.plans.values())\n      .filter(p => p.type === 'Clinical')\n      .map(p => p.userId);\n    return Array.from(this.users.values()).filter(u => clinicalPlanUsers.includes(u.id));\n  }\n}\n\n// Database Storage Implementation using Drizzle ORM\nexport class DbStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id));\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email));\n    return result[0];\n  }\n\n  async upsertUser(upsertUser: UpsertUser): Promise<User> {\n    // First check if user exists by ID\n    if (upsertUser.id) {\n      const existing = await this.getUser(upsertUser.id);\n      if (existing) {\n        const [updated] = await db.update(users)\n          .set({\n            email: upsertUser.email || existing.email,\n            firstName: upsertUser.firstName || existing.firstName,\n            lastName: upsertUser.lastName || existing.lastName,\n            phone: upsertUser.phone || existing.phone,\n            profileImageUrl: upsertUser.profileImageUrl || existing.profileImageUrl,\n            characterImageUrl: upsertUser.characterImageUrl || existing.characterImageUrl,\n            characterType: upsertUser.characterType || existing.characterType,\n            role: upsertUser.role || existing.role,\n            updatedAt: new Date(),\n          })\n          .where(eq(users.id, upsertUser.id))\n          .returning();\n        return updated;\n      }\n    }\n    \n    // Check if user exists by email (important for Replit Auth login after signup)\n    if (upsertUser.email && upsertUser.id) {\n      const existingByEmail = await this.getUserByEmail(upsertUser.email);\n      if (existingByEmail && existingByEmail.id !== upsertUser.id) {\n        // User signed up with email, now logging in with OIDC\n        // We need to migrate all data to the OIDC ID\n        const oldId = existingByEmail.id;\n        const newId = upsertUser.id;\n        \n        // Use a transaction to ensure atomic migration\n        return await db.transaction(async (tx) => {\n          // 1. Temporarily clear the email from old user to free up the unique constraint\n          await tx.update(users)\n            .set({ email: null })\n            .where(eq(users.id, oldId));\n          \n          // 2. Create the new user with OIDC ID and the email\n          const [newUser] = await tx.insert(users).values({\n            id: newId,\n            email: upsertUser.email,\n            firstName: upsertUser.firstName || existingByEmail.firstName,\n            lastName: upsertUser.lastName || existingByEmail.lastName,\n            phone: existingByEmail.phone,\n            profileImageUrl: upsertUser.profileImageUrl || existingByEmail.profileImageUrl,\n            characterImageUrl: existingByEmail.characterImageUrl,\n            characterType: existingByEmail.characterType,\n            role: existingByEmail.role,\n          }).returning();\n          \n          // 3. Migrate all related records to use the new OIDC ID\n          // Update primary user foreign keys\n          await tx.update(consultations)\n            .set({ userId: newId })\n            .where(eq(consultations.userId, oldId));\n          \n          await tx.update(milestones)\n            .set({ userId: newId })\n            .where(eq(milestones.userId, oldId));\n          \n          await tx.update(paymentSessions)\n            .set({ userId: newId })\n            .where(eq(paymentSessions.userId, oldId));\n          \n          await tx.update(customerProfiles)\n            .set({ userId: newId })\n            .where(eq(customerProfiles.userId, oldId));\n          \n          await tx.update(reports)\n            .set({ userId: newId })\n            .where(eq(reports.userId, oldId));\n          \n          await tx.update(subscriptions)\n            .set({ userId: newId })\n            .where(eq(subscriptions.userId, oldId));\n          \n          await tx.update(orders)\n            .set({ userId: newId })\n            .where(eq(orders.userId, oldId));\n          \n          await tx.update(mealPlans)\n            .set({ userId: newId })\n            .where(eq(mealPlans.userId, oldId));\n          \n          await tx.update(notifications)\n            .set({ userId: newId })\n            .where(eq(notifications.userId, oldId));\n          \n          // Update optional user foreign keys (consultantId, assignedDeliveryPersonId)\n          await tx.update(consultations)\n            .set({ consultantId: newId })\n            .where(eq(consultations.consultantId, oldId));\n          \n          await tx.update(orders)\n            .set({ assignedDeliveryPersonId: newId })\n            .where(eq(orders.assignedDeliveryPersonId, oldId));\n          \n          // Update new clinical plan tables\n          await tx.update(plans)\n            .set({ userId: newId })\n            .where(eq(plans.userId, oldId));\n          \n          await tx.update(stageProgress)\n            .set({ userId: newId })\n            .where(eq(stageProgress.userId, oldId));\n          \n          await tx.update(documents)\n            .set({ userId: newId })\n            .where(eq(documents.userId, oldId));\n          \n          await tx.update(dietPlans)\n            .set({ userId: newId })\n            .where(eq(dietPlans.userId, oldId));\n          \n          await tx.update(addresses)\n            .set({ userId: newId })\n            .where(eq(addresses.userId, oldId));\n          \n          await tx.update(deliverySync)\n            .set({ userId: newId })\n            .where(eq(deliverySync.userId, oldId));\n          \n          // 4. Finally, delete the old user record (now with null email)\n          await tx.delete(users).where(eq(users.id, oldId));\n          \n          return newUser;\n        });\n      }\n    }\n    \n    // Create new user if doesn't exist\n    const [newUser] = await db.insert(users).values({\n      id: upsertUser.id,\n      email: upsertUser.email || null,\n      firstName: upsertUser.firstName || null,\n      lastName: upsertUser.lastName || null,\n      phone: upsertUser.phone || null,\n      profileImageUrl: upsertUser.profileImageUrl || null,\n      characterImageUrl: upsertUser.characterImageUrl || null,\n      characterType: upsertUser.characterType || null,\n      role: upsertUser.role || 'customer',\n    }).returning();\n    return newUser;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async getCustomers(): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.role, 'customer'));\n  }\n\n  async getCustomerProfile(userId: string): Promise<CustomerProfile | undefined> {\n    const result = await db.select().from(customerProfiles).where(eq(customerProfiles.userId, userId));\n    return result[0];\n  }\n\n  async createCustomerProfile(profile: InsertCustomerProfile): Promise<CustomerProfile> {\n    const [created] = await db.insert(customerProfiles).values(profile).returning();\n    return created;\n  }\n\n  async updateCustomerProfile(id: string, profile: Partial<InsertCustomerProfile>): Promise<CustomerProfile | undefined> {\n    const [updated] = await db.update(customerProfiles)\n      .set({ ...profile, updatedAt: new Date() })\n      .where(eq(customerProfiles.id, id))\n      .returning();\n    return updated;\n  }\n\n  async getUserMilestones(userId: string): Promise<Milestone[]> {\n    return await db.select().from(milestones).where(eq(milestones.userId, userId));\n  }\n\n  async createMilestone(milestone: InsertMilestone): Promise<Milestone> {\n    const [created] = await db.insert(milestones).values(milestone).returning();\n    return created;\n  }\n\n  async updateMilestone(id: string, status: string): Promise<Milestone | undefined> {\n    const [updated] = await db.update(milestones)\n      .set({ \n        status, \n        completedAt: status === 'completed' ? new Date() : null \n      })\n      .where(eq(milestones.id, id))\n      .returning();\n    return updated;\n  }\n\n  async getUserReports(userId: string): Promise<Report[]> {\n    return await db.select().from(reports).where(eq(reports.userId, userId));\n  }\n\n  async createReport(report: InsertReport): Promise<Report> {\n    const [created] = await db.insert(reports).values(report).returning();\n    return created;\n  }\n\n  async createConsultation(consultation: InsertConsultation): Promise<Consultation> {\n    const [created] = await db.insert(consultations).values(consultation).returning();\n    return created;\n  }\n\n  async getUserConsultations(userId: string): Promise<Consultation[]> {\n    return await db.select().from(consultations).where(eq(consultations.userId, userId));\n  }\n\n  async getOrdersByStatus(status: string): Promise<Order[]> {\n    return await db.select().from(orders).where(eq(orders.status, status));\n  }\n\n  async updateOrderStatus(id: string, status: string): Promise<Order | undefined> {\n    const [updated] = await db.update(orders)\n      .set({ \n        status,\n        deliveredAt: status === 'delivered' ? new Date() : null\n      })\n      .where(eq(orders.id, id))\n      .returning();\n    return updated;\n  }\n\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const [created] = await db.insert(orders).values(order).returning();\n    return created;\n  }\n\n  async getOrderById(id: string): Promise<Order | undefined> {\n    const result = await db.select().from(orders).where(eq(orders.id, id));\n    return result[0];\n  }\n\n  async getOrdersByUserId(userId: string): Promise<Order[]> {\n    return await db.select().from(orders).where(eq(orders.userId, userId));\n  }\n\n  async updateOrder(id: string, data: Partial<InsertOrder>): Promise<Order | undefined> {\n    const [updated] = await db.update(orders)\n      .set(data)\n      .where(eq(orders.id, id))\n      .returning();\n    return updated;\n  }\n\n  async createPaymentSession(session: InsertPaymentSession): Promise<PaymentSession> {\n    const [created] = await db.insert(paymentSessions).values(session).returning();\n    return created;\n  }\n\n  async getPaymentSession(id: string): Promise<PaymentSession | undefined> {\n    const result = await db.select().from(paymentSessions).where(eq(paymentSessions.id, id));\n    return result[0];\n  }\n\n  async updatePaymentSession(id: string, updates: Partial<PaymentSession>): Promise<PaymentSession | undefined> {\n    const [updated] = await db.update(paymentSessions)\n      .set(updates)\n      .where(eq(paymentSessions.id, id))\n      .returning();\n    return updated;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const [updated] = await db.update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Plan methods\n  async createPlan(plan: InsertPlan): Promise<Plan> {\n    const [created] = await db.insert(plans).values(plan).returning();\n    return created;\n  }\n\n  async getPlan(id: string): Promise<Plan | undefined> {\n    const result = await db.select().from(plans).where(eq(plans.id, id));\n    return result[0];\n  }\n\n  async getUserPlan(userId: string): Promise<Plan | undefined> {\n    const result = await db.select().from(plans)\n      .where(and(eq(plans.userId, userId), eq(plans.isActive, true)));\n    return result[0];\n  }\n\n  async updatePlan(id: string, updates: Partial<Plan>): Promise<Plan | undefined> {\n    const [updated] = await db.update(plans)\n      .set(updates)\n      .where(eq(plans.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Stage Progress methods\n  async getUserStageProgress(userId: string): Promise<StageProgress[]> {\n    return await db.select().from(stageProgress).where(eq(stageProgress.userId, userId));\n  }\n\n  async createStageProgress(stage: InsertStageProgress): Promise<StageProgress> {\n    const [created] = await db.insert(stageProgress).values(stage).returning();\n    return created;\n  }\n\n  async updateStageProgress(id: string, updates: Partial<StageProgress>): Promise<StageProgress | undefined> {\n    const [updated] = await db.update(stageProgress)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(stageProgress.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Document methods\n  async getUserDocuments(userId: string): Promise<Document[]> {\n    return await db.select().from(documents).where(eq(documents.userId, userId));\n  }\n\n  async getDocumentsByStage(userId: string, stage: number): Promise<Document[]> {\n    return await db.select().from(documents)\n      .where(and(eq(documents.userId, userId), eq(documents.stage, stage)));\n  }\n\n  async createDocument(document: InsertDocument): Promise<Document> {\n    const [created] = await db.insert(documents).values(document).returning();\n    return created;\n  }\n\n  // Diet Plan methods\n  async getUserDietPlan(userId: string): Promise<DietPlan | undefined> {\n    const result = await db.select().from(dietPlans).where(eq(dietPlans.userId, userId));\n    return result[0];\n  }\n\n  async createDietPlan(dietPlan: InsertDietPlan): Promise<DietPlan> {\n    const [created] = await db.insert(dietPlans).values(dietPlan).returning();\n    return created;\n  }\n\n  async updateDietPlan(id: string, updates: Partial<DietPlan>): Promise<DietPlan | undefined> {\n    const [updated] = await db.update(dietPlans)\n      .set(updates)\n      .where(eq(dietPlans.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Address methods\n  async getUserAddresses(userId: string): Promise<Address[]> {\n    return await db.select().from(addresses).where(eq(addresses.userId, userId));\n  }\n\n  async getAddress(id: string): Promise<Address | undefined> {\n    const result = await db.select().from(addresses).where(eq(addresses.id, id));\n    return result[0];\n  }\n\n  async createAddress(address: InsertAddress): Promise<Address> {\n    const [created] = await db.insert(addresses).values(address).returning();\n    return created;\n  }\n\n  async updateAddress(id: string, updates: Partial<Address>): Promise<Address | undefined> {\n    const [updated] = await db.update(addresses)\n      .set(updates)\n      .where(eq(addresses.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteAddress(id: string): Promise<boolean> {\n    const result = await db.delete(addresses).where(eq(addresses.id, id)).returning();\n    return result.length > 0;\n  }\n\n  // Delivery Sync methods\n  async createDeliverySync(sync: InsertDeliverySync): Promise<DeliverySync> {\n    const [created] = await db.insert(deliverySync).values(sync).returning();\n    return created;\n  }\n\n  async getUserDeliverySyncs(userId: string): Promise<DeliverySync[]> {\n    return await db.select().from(deliverySync).where(eq(deliverySync.userId, userId));\n  }\n\n  async updateDeliverySync(id: string, updates: Partial<DeliverySync>): Promise<DeliverySync | undefined> {\n    const [updated] = await db.update(deliverySync)\n      .set(updates)\n      .where(eq(deliverySync.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Acknowledgement methods\n  async createAcknowledgement(ack: InsertAcknowledgement): Promise<Acknowledgement> {\n    const [created] = await db.insert(acknowledgements).values(ack).returning();\n    return created;\n  }\n\n  async getStaffAcknowledgements(staffId: string): Promise<Acknowledgement[]> {\n    return await db.select().from(acknowledgements).where(eq(acknowledgements.staffId, staffId));\n  }\n\n  async getCustomerAcknowledgements(customerId: string): Promise<Acknowledgement[]> {\n    return await db.select().from(acknowledgements).where(eq(acknowledgements.customerId, customerId));\n  }\n\n  async updateAcknowledgement(id: string, updates: Partial<Acknowledgement>): Promise<Acknowledgement | undefined> {\n    const [updated] = await db.update(acknowledgements)\n      .set(updates)\n      .where(eq(acknowledgements.id, id))\n      .returning();\n    return updated;\n  }\n\n  async getAllAcknowledgements(): Promise<Acknowledgement[]> {\n    return await db.select().from(acknowledgements);\n  }\n\n  // Staff Activity Log methods\n  async createStaffActivity(activity: InsertStaffActivityLog): Promise<StaffActivityLog> {\n    const [created] = await db.insert(staffActivityLog).values(activity).returning();\n    return created;\n  }\n\n  async getStaffActivities(staffId: string): Promise<StaffActivityLog[]> {\n    return await db.select().from(staffActivityLog).where(eq(staffActivityLog.staffId, staffId));\n  }\n\n  async getCustomerActivities(customerId: string): Promise<StaffActivityLog[]> {\n    return await db.select().from(staffActivityLog).where(eq(staffActivityLog.customerId, customerId));\n  }\n\n  async getAllStaffActivities(): Promise<StaffActivityLog[]> {\n    return await db.select().from(staffActivityLog);\n  }\n\n  // Delivery Location methods\n  async upsertDeliveryLocation(location: InsertDeliveryLocation): Promise<DeliveryLocation> {\n    const existing = await this.getDeliveryLocation(location.deliveryPersonId);\n    \n    if (existing) {\n      const [updated] = await db.update(deliveryLocation)\n        .set({ ...location, lastUpdated: new Date() })\n        .where(eq(deliveryLocation.deliveryPersonId, location.deliveryPersonId))\n        .returning();\n      return updated;\n    }\n\n    const [created] = await db.insert(deliveryLocation).values(location).returning();\n    return created;\n  }\n\n  async getDeliveryLocation(deliveryPersonId: string): Promise<DeliveryLocation | undefined> {\n    const result = await db.select().from(deliveryLocation)\n      .where(eq(deliveryLocation.deliveryPersonId, deliveryPersonId));\n    return result[0];\n  }\n\n  async getAllDeliveryLocations(): Promise<DeliveryLocation[]> {\n    return await db.select().from(deliveryLocation);\n  }\n\n  async updateDeliveryLocation(deliveryPersonId: string, updates: Partial<DeliveryLocation>): Promise<DeliveryLocation | undefined> {\n    const [updated] = await db.update(deliveryLocation)\n      .set({ ...updates, lastUpdated: new Date() })\n      .where(eq(deliveryLocation.deliveryPersonId, deliveryPersonId))\n      .returning();\n    return updated;\n  }\n\n  // Staff assignment methods\n  async getStaffByRole(role: string): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.role, role));\n  }\n\n  async getClinicalCustomers(): Promise<User[]> {\n    const clinicalPlans = await db.select().from(plans).where(eq(plans.type, 'Clinical'));\n    const userIds = clinicalPlans.map(p => p.userId);\n    \n    if (userIds.length === 0) return [];\n    \n    return await db.select().from(users).where(\n      eq(users.id, userIds[0])\n    );\n  }\n}\n\n// Use Database Storage for production persistence\nexport const storage = new DbStorage();\n\n// Keep MemStorage available for testing\nexport const memStorage = new MemStorage();\n","size_bytes":45403},"client/src/components/examples/Header.tsx":{"content":"import { Header } from '../Header'\nimport { ThemeProvider } from '../ThemeProvider'\n\nexport default function HeaderExample() {\n  return (\n    <ThemeProvider>\n      <Header />\n    </ThemeProvider>\n  )\n}\n","size_bytes":202},"client/src/components/examples/Footer.tsx":{"content":"import { Footer } from '../Footer'\n\nexport default function FooterExample() {\n  return <Footer />\n}\n","size_bytes":100},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"client/src/components/Footer.tsx":{"content":"import { Link } from 'wouter';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Facebook, Twitter, Instagram, Linkedin } from 'lucide-react';\n\nexport function Footer() {\n  return (\n    <footer className=\"border-t bg-muted/30\">\n      <div className=\"container mx-auto px-4 md:px-6 py-12 md:py-16\">\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8 mb-12\">\n          <div className=\"col-span-2 md:col-span-1 space-y-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"flex h-9 w-9 items-center justify-center rounded-md bg-primary text-primary-foreground\">\n                <span className=\"text-lg font-bold\">NM</span>\n              </div>\n              <span className=\"font-display text-xl font-bold\">NutriMeals</span>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              Personalized nutrition delivered to your door\n            </p>\n            <div className=\"flex gap-2\">\n              <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-facebook\">\n                <Facebook className=\"h-4 w-4\" />\n              </Button>\n              <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-twitter\">\n                <Twitter className=\"h-4 w-4\" />\n              </Button>\n              <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-instagram\">\n                <Instagram className=\"h-4 w-4\" />\n              </Button>\n              <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-linkedin\">\n                <Linkedin className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"space-y-3\">\n            <h3 className=\"font-semibold\" data-testid=\"text-footer-company\">Company</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li><Link href=\"/about\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-about\">About Us</Link></li>\n              <li><Link href=\"/careers\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-careers\">Careers</Link></li>\n              <li><Link href=\"/blog\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-blog\">Blog</Link></li>\n            </ul>\n          </div>\n\n          <div className=\"space-y-3\">\n            <h3 className=\"font-semibold\" data-testid=\"text-footer-plans\">Plans</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li><Link href=\"/clinical-plan\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-footer-clinical\">Premium Clinical</Link></li>\n              <li><Link href=\"/ai-plan\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-footer-ai\">AI-Assisted</Link></li>\n              <li><Link href=\"/pricing\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-pricing\">Pricing</Link></li>\n            </ul>\n          </div>\n\n          <div className=\"space-y-3\">\n            <h3 className=\"font-semibold\" data-testid=\"text-footer-support\">Support</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li><Link href=\"/faq\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-faq\">FAQ</Link></li>\n              <li><Link href=\"/contact\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-contact\">Contact</Link></li>\n              <li><Link href=\"/terms\" className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-terms\">Terms</Link></li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"border-t pt-8 space-y-4\">\n          <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4\">\n            <p className=\"text-sm text-muted-foreground\">\n              © 2025 NutriMeals. All rights reserved.\n            </p>\n            <div className=\"flex items-center gap-2\">\n              <Input\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                className=\"w-64\"\n                data-testid=\"input-newsletter\"\n              />\n              <Button data-testid=\"button-subscribe\">Subscribe</Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":4438},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/pages/ClinicalPlan.tsx":{"content":"import { Header } from '@/components/Header';\nimport { Footer } from '@/components/Footer';\nimport { ProcessSteps } from '@/components/ProcessSteps';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Stethoscope, CheckCircle2, Calendar } from 'lucide-react';\nimport { Link } from 'wouter';\n\nexport default function ClinicalPlan() {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-1\">\n        <section className=\"py-16 md:py-24 bg-gradient-to-b from-chart-4/5 to-background\">\n          <div className=\"container mx-auto px-4 md:px-6\">\n            <div className=\"max-w-4xl mx-auto text-center space-y-6\">\n              <Badge className=\"bg-chart-4 text-white border-0\" data-testid=\"badge-premium-header\">\n                Premium Service\n              </Badge>\n              <h1 className=\"font-display text-3xl md:text-4xl lg:text-5xl font-bold\" data-testid=\"text-clinical-title\">\n                Premium Clinical Meal Plan\n              </h1>\n              <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto\" data-testid=\"text-clinical-subtitle\">\n                A comprehensive, medically-supervised approach to personalized nutrition with expert guidance at every step\n              </p>\n            </div>\n          </div>\n        </section>\n\n        <ProcessSteps />\n\n        <section className=\"py-16 md:py-20 lg:py-24\">\n          <div className=\"container mx-auto px-4 md:px-6\">\n            <div className=\"max-w-4xl mx-auto\">\n              <Card className=\"border-chart-4/50\">\n                <CardContent className=\"p-8 md:p-12 space-y-8\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"flex h-12 w-12 items-center justify-center rounded-md bg-chart-4/10 text-chart-4\">\n                      <Stethoscope className=\"h-6 w-6\" />\n                    </div>\n                    <h2 className=\"font-display text-2xl md:text-3xl font-semibold\" data-testid=\"text-pricing-title\">\n                      Premium Subscription Pricing\n                    </h2>\n                  </div>\n\n                  <div className=\"space-y-6\">\n                    <p className=\"text-muted-foreground\" data-testid=\"text-pricing-description\">\n                      Our premium clinical plan includes comprehensive health assessments, personalized consultations, and chef-prepared meals tailored to your unique health profile.\n                    </p>\n\n                    <div className=\"grid md:grid-cols-3 gap-6\">\n                      <div className=\"space-y-2\">\n                        <p className=\"text-sm text-muted-foreground\">Initial Consultation</p>\n                        <p className=\"font-mono text-xl font-semibold\" data-testid=\"text-consultation-fee\">₹5,000</p>\n                        <p className=\"text-xs text-muted-foreground\">One-time fee</p>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <p className=\"text-sm text-muted-foreground\">Weekly Meal Plan</p>\n                        <p className=\"font-mono text-xl font-semibold\" data-testid=\"text-weekly-price\">₹3,999</p>\n                        <p className=\"text-xs text-muted-foreground\">Per week</p>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <p className=\"text-sm text-muted-foreground\">Monthly Plan</p>\n                        <p className=\"font-mono text-xl font-semibold\" data-testid=\"text-monthly-price\">₹14,999</p>\n                        <p className=\"text-xs text-muted-foreground\">Save 15%</p>\n                      </div>\n                    </div>\n\n                    <div className=\"border-t pt-6\">\n                      <h3 className=\"font-semibold mb-4\">What's Included</h3>\n                      <ul className=\"grid md:grid-cols-2 gap-3\">\n                        {[\n                          'Licensed physician consultation',\n                          'Comprehensive blood work analysis',\n                          'Body composition assessment',\n                          'Personalized nutrition plan',\n                          'Daily chef-prepared meals',\n                          'Weekly progress tracking',\n                          'Nutritionist support',\n                          'Flexible delivery schedule',\n                        ].map((item, index) => (\n                          <li key={index} className=\"flex items-start gap-2\" data-testid={`text-included-${index}`}>\n                            <CheckCircle2 className=\"h-5 w-5 text-primary shrink-0 mt-0.5\" />\n                            <span className=\"text-sm\">{item}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n\n                    <div className=\"flex flex-col sm:flex-row gap-3 pt-4\">\n                      <Link href=\"/book-consultation\" className=\"flex-1\">\n                        <Button size=\"lg\" className=\"w-full\" data-testid=\"button-book-consultation\">\n                          <Calendar className=\"mr-2 h-5 w-5\" />\n                          Book Your First Consultation\n                        </Button>\n                      </Link>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </section>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":5530},"client/src/components/QuizQuestion.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { useState } from 'react';\nimport { ChevronRight } from 'lucide-react';\n\ninterface QuizOption {\n  value: string;\n  label: string;\n  icon?: string;\n}\n\ninterface QuizQuestionProps {\n  question: string;\n  options: QuizOption[];\n  currentStep: number;\n  totalSteps: number;\n  onNext: (answer: string) => void;\n}\n\nexport function QuizQuestion({ question, options, currentStep, totalSteps, onNext }: QuizQuestionProps) {\n  const [selectedAnswer, setSelectedAnswer] = useState<string | null>(null);\n  const progress = (currentStep / totalSteps) * 100;\n\n  const handleNext = () => {\n    if (selectedAnswer) {\n      console.log('Quiz answer:', selectedAnswer);\n      onNext(selectedAnswer);\n    }\n  };\n\n  return (\n    <div className=\"max-w-2xl mx-auto space-y-8\">\n      <div className=\"space-y-2\">\n        <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n          <span data-testid=\"text-quiz-progress\">Question {currentStep} of {totalSteps}</span>\n          <span data-testid=\"text-quiz-percentage\">{Math.round(progress)}%</span>\n        </div>\n        <Progress value={progress} data-testid=\"progress-quiz\" />\n      </div>\n\n      <div className=\"space-y-6\">\n        <h2 className=\"font-display text-2xl md:text-3xl font-semibold\" data-testid=\"text-quiz-question\">\n          {question}\n        </h2>\n\n        <div className=\"grid gap-3\">\n          {options.map((option) => (\n            <Card\n              key={option.value}\n              className={`p-4 cursor-pointer hover-elevate transition-all ${\n                selectedAnswer === option.value ? 'border-primary bg-primary/5' : ''\n              }`}\n              onClick={() => setSelectedAnswer(option.value)}\n              data-testid={`card-option-${option.value}`}\n            >\n              <div className=\"flex items-center gap-3\">\n                {option.icon && <span className=\"text-2xl\">{option.icon}</span>}\n                <span className=\"font-medium\">{option.label}</span>\n              </div>\n            </Card>\n          ))}\n        </div>\n\n        <Button\n          size=\"lg\"\n          className=\"w-full\"\n          onClick={handleNext}\n          disabled={!selectedAnswer}\n          data-testid=\"button-quiz-next\"\n        >\n          Continue\n          <ChevronRight className=\"ml-2 h-5 w-5\" />\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2500},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"light\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"light\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(\"theme\") as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme,\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1257},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ProcessSteps.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\nimport { Calendar, FlaskConical, FileText, MessageSquare, ChefHat, Truck } from 'lucide-react';\n\nconst steps = [\n  {\n    icon: Calendar,\n    title: 'Physician Consultation',\n    description: 'Schedule an online or in-person consultation with our licensed physicians',\n  },\n  {\n    icon: FlaskConical,\n    title: 'At-Home Test Collection',\n    description: 'Convenient blood sample and body composition analysis from your home',\n  },\n  {\n    icon: FileText,\n    title: 'Detailed Report',\n    description: 'Comprehensive health report with insights and recommendations',\n  },\n  {\n    icon: MessageSquare,\n    title: 'Feasibility Discussion',\n    description: 'Review your results and discuss personalized nutrition goals',\n  },\n  {\n    icon: ChefHat,\n    title: 'Custom Diet Chart',\n    description: 'Professional nutritionist creates your personalized meal plan',\n  },\n  {\n    icon: Truck,\n    title: 'Meal Delivery',\n    description: 'Chef-prepared meals delivered fresh to your door daily',\n  },\n];\n\nexport function ProcessSteps() {\n  return (\n    <section id=\"how-it-works\" className=\"py-16 md:py-20 lg:py-24 bg-muted/30\">\n      <div className=\"container mx-auto px-4 md:px-6\">\n        <div className=\"text-center mb-12 space-y-4\">\n          <h2 className=\"font-display text-3xl md:text-4xl font-semibold\" data-testid=\"text-process-title\">\n            How Premium Clinical Plan Works\n          </h2>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\" data-testid=\"text-process-subtitle\">\n            A comprehensive approach to personalized nutrition\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-6xl mx-auto\">\n          {steps.map((step, index) => (\n            <Card key={index} className=\"hover-elevate transition-all\" data-testid={`card-step-${index}`}>\n              <CardContent className=\"p-6 space-y-4\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"flex h-12 w-12 items-center justify-center rounded-md bg-primary/10 text-primary\">\n                    <step.icon className=\"h-6 w-6\" />\n                  </div>\n                  <div className=\"flex h-8 w-8 items-center justify-center rounded-full bg-primary text-primary-foreground text-sm font-semibold\">\n                    {index + 1}\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <h3 className=\"font-semibold text-lg\" data-testid={`text-step-title-${index}`}>\n                    {step.title}\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground\" data-testid={`text-step-description-${index}`}>\n                    {step.description}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2939},"client/src/components/examples/QuizQuestion.tsx":{"content":"import { QuizQuestion } from '../QuizQuestion'\n\nexport default function QuizQuestionExample() {\n  const handleNext = (answer: string) => {\n    console.log('Selected answer:', answer)\n  }\n\n  return (\n    <div className=\"p-8\">\n      <QuizQuestion\n        question=\"What is your primary fitness goal?\"\n        options={[\n          { value: 'weight-loss', label: 'Weight Loss', icon: '🎯' },\n          { value: 'muscle-gain', label: 'Muscle Gain', icon: '💪' },\n          { value: 'maintenance', label: 'Weight Maintenance', icon: '⚖️' },\n          { value: 'health', label: 'Overall Health', icon: '❤️' },\n        ]}\n        currentStep={3}\n        totalSteps={8}\n        onNext={handleNext}\n      />\n    </div>\n  )\n}\n","size_bytes":727},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/pages/Delivery.tsx":{"content":"import { useEffect } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useToast } from '@/hooks/use-toast';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Truck, MapPin, CheckCircle2, Package } from 'lucide-react';\nimport type { Order } from '@shared/schema';\nimport { isUnauthorizedError } from '@/lib/authUtils';\n\nexport default function Delivery() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n\n    if (!isLoading && user && user.role !== 'delivery') {\n      toast({\n        title: \"Access Denied\",\n        description: \"You don't have permission to access this page.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  const isAuthorized = isAuthenticated && user && user.role === 'delivery';\n\n  const { data: readyOrders, isLoading: loadingReady } = useQuery<Order[]>({\n    queryKey: ['/api/delivery/orders/ready'],\n    enabled: isAuthorized,\n  });\n\n  const { data: outForDeliveryOrders, isLoading: loadingOutForDelivery } = useQuery<Order[]>({\n    queryKey: ['/api/delivery/orders/out_for_delivery'],\n    enabled: isAuthorized,\n  });\n\n  const { data: deliveredOrders, isLoading: loadingDelivered } = useQuery<Order[]>({\n    queryKey: ['/api/delivery/orders/delivered'],\n    enabled: isAuthorized,\n  });\n\n  const updateOrderMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      await apiRequest('PATCH', `/api/delivery/orders/${id}`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/delivery/orders/ready'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/delivery/orders/out_for_delivery'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/delivery/orders/delivered'] });\n      toast({\n        title: \"Success\",\n        description: \"Order status updated\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update order status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading || loadingReady || loadingOutForDelivery || loadingDelivered || !isAuthorized) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <p className=\"text-muted-foreground\">Loading...</p>\n      </div>\n    );\n  }\n\n  const OrderCard = ({ order }: { order: Order }) => (\n    <Card className=\"hover-elevate\" data-testid={`order-card-${order.id}`}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start justify-between mb-4\">\n          <div>\n            <p className=\"font-semibold mb-1\" data-testid={`order-id-${order.id}`}>\n              Order #{order.id.slice(0, 8)}\n            </p>\n            <p className=\"text-sm text-muted-foreground\">\n              Delivery: {new Date(order.deliveryDate!).toLocaleDateString()}\n            </p>\n          </div>\n          <Badge\n            variant={\n              order.status === 'ready' ? 'secondary' :\n              order.status === 'out_for_delivery' ? 'default' :\n              'outline'\n            }\n            data-testid={`order-status-${order.id}`}\n          >\n            {order.status === 'out_for_delivery' ? 'Out for Delivery' : order.status}\n          </Badge>\n        </div>\n\n        <div className=\"mb-4\">\n          <p className=\"text-sm font-medium mb-1 flex items-center gap-2\">\n            <MapPin className=\"h-4 w-4\" />\n            Delivery Address\n          </p>\n          <p className=\"text-sm text-muted-foreground pl-6\">{order.deliveryAddress}</p>\n        </div>\n\n        <div className=\"flex gap-2\">\n          {order.status === 'ready' && (\n            <Button\n              size=\"sm\"\n              onClick={() => updateOrderMutation.mutate({ id: order.id, status: 'out_for_delivery' })}\n              disabled={updateOrderMutation.isPending}\n              data-testid={`button-pick-up-${order.id}`}\n            >\n              <Truck className=\"h-4 w-4 mr-2\" />\n              Pick Up Order\n            </Button>\n          )}\n          {order.status === 'out_for_delivery' && (\n            <Button\n              size=\"sm\"\n              onClick={() => updateOrderMutation.mutate({ id: order.id, status: 'delivered' })}\n              disabled={updateOrderMutation.isPending}\n              data-testid={`button-mark-delivered-${order.id}`}\n            >\n              <CheckCircle2 className=\"h-4 w-4 mr-2\" />\n              Mark as Delivered\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"font-display text-3xl font-bold mb-2\" data-testid=\"text-delivery-title\">\n            Delivery Management\n          </h1>\n          <p className=\"text-muted-foreground\">Track and manage order deliveries</p>\n        </div>\n\n        <Tabs defaultValue=\"ready\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"ready\" className=\"flex items-center gap-2\" data-testid=\"tab-ready\">\n              <Package className=\"h-4 w-4\" />\n              Ready ({readyOrders?.length || 0})\n            </TabsTrigger>\n            <TabsTrigger value=\"out_for_delivery\" className=\"flex items-center gap-2\" data-testid=\"tab-out-for-delivery\">\n              <Truck className=\"h-4 w-4\" />\n              Out for Delivery ({outForDeliveryOrders?.length || 0})\n            </TabsTrigger>\n            <TabsTrigger value=\"delivered\" className=\"flex items-center gap-2\" data-testid=\"tab-delivered\">\n              <CheckCircle2 className=\"h-4 w-4\" />\n              Delivered ({deliveredOrders?.length || 0})\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"ready\" className=\"space-y-4 mt-6\">\n            {readyOrders && readyOrders.length > 0 ? (\n              <div className=\"grid gap-4\">\n                {readyOrders.map((order) => (\n                  <OrderCard key={order.id} order={order} />\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <Package className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                <p className=\"text-muted-foreground\">No orders ready for pickup</p>\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"out_for_delivery\" className=\"space-y-4 mt-6\">\n            {outForDeliveryOrders && outForDeliveryOrders.length > 0 ? (\n              <div className=\"grid gap-4\">\n                {outForDeliveryOrders.map((order) => (\n                  <OrderCard key={order.id} order={order} />\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <Truck className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                <p className=\"text-muted-foreground\">No orders out for delivery</p>\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"delivered\" className=\"space-y-4 mt-6\">\n            {deliveredOrders && deliveredOrders.length > 0 ? (\n              <div className=\"grid gap-4\">\n                {deliveredOrders.map((order) => (\n                  <OrderCard key={order.id} order={order} />\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <CheckCircle2 className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                <p className=\"text-muted-foreground\">No delivered orders</p>\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8811},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/examples/MealCard.tsx":{"content":"import { MealCard } from '../MealCard'\nimport breakfastImage from '@assets/generated_images/Healthy_breakfast_bowl_640a6a89.png'\n\nexport default function MealCardExample() {\n  const handleSwap = () => {\n    console.log('Swap meal clicked')\n  }\n\n  return (\n    <div className=\"p-8 max-w-sm\">\n      <MealCard\n        name=\"Greek Yogurt Berry Bowl\"\n        image={breakfastImage}\n        calories={320}\n        protein={18}\n        carbs={42}\n        fats={8}\n        mealType=\"breakfast\"\n        onSwap={handleSwap}\n      />\n    </div>\n  )\n}\n","size_bytes":540},"replit.md":{"content":"# Premium Meal Delivery Platform\n\n## Overview\n\nA comprehensive meal delivery platform offering two distinct service paths: a **Premium Clinical Plan** with medical supervision and personalized health assessments, and an **AI-Assisted Plan** with intelligent meal planning through interactive questionnaires. The platform serves customers seeking personalized nutrition solutions while providing specialized dashboards for administrative staff, kitchen operations, and delivery personnel.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework & Tooling**\n- React with TypeScript for type safety and component-based architecture\n- Vite as the build tool and development server\n- Wouter for lightweight client-side routing\n- TanStack Query (React Query) for server state management and data fetching\n- shadcn/ui component library built on Radix UI primitives\n\n**Styling Approach**\n- Tailwind CSS with custom design system based on health/wellness aesthetic\n- Custom color palette supporting light/dark modes with HSL color variables\n- Typography: Plus Jakarta Sans (headings), Inter (body), JetBrains Mono (numerical data)\n- Design inspired by premium health services (HelloFresh, Factor, BetterMe)\n\n**State Management Strategy**\n- Server state managed through React Query with automatic caching and invalidation\n- Local UI state handled with React hooks\n- Authentication state integrated with query system\n- No global state management library needed due to server-driven architecture\n\n### Backend Architecture\n\n**Server Framework**\n- Express.js with TypeScript for the API layer\n- Session-based authentication using express-session with PostgreSQL storage\n- RESTful API design with role-based access control (customer, admin, clinical, kitchen, delivery)\n\n**Authentication System**\n- OpenID Connect integration with Replit Auth\n- Passport.js strategy for OAuth flow\n- Session persistence in PostgreSQL via connect-pg-simple\n- Role-based middleware for endpoint protection\n- Auto-login support: New users are automatically logged in after signup for 7 days\n- Session types: OIDC sessions (with token refresh) and auto-login sessions (7-day fixed expiration)\n\n**API Design Patterns**\n- Centralized error handling middleware\n- Request/response logging for API endpoints\n- Type-safe route handlers with shared schema validation\n- Middleware chain for authentication and authorization\n\n### Data Layer\n\n**Database Architecture**\n- PostgreSQL via Neon serverless (WebSocket connections)\n- Drizzle ORM for type-safe database queries and migrations\n- Schema-first design with Zod validation for runtime type checking\n\n**Core Data Models**\n- **Users**: Authentication and profile data with role assignment (customer, admin, consultant, lab_technician, nutritionist, chef, delivery), character selection, phone number\n- **Customer Profiles**: Comprehensive health and preference data from quiz responses\n- **Consultations**: Doctor appointments with scheduled date/time, doctor name, meeting type, and status tracking\n- **Milestones**: 5-stage progress tracking (Physician Consultation → Test Collection → Discussion → Diet Chart → Meal Delivery)\n- **Reports**: Store health assessments and diagnostic results for user download\n- **Payment Sessions**: Track consultation payment status with dummy gateway integration (₹1,999 fee)\n- **Orders**: Meal order management with status workflow\n- **Subscriptions**: Customer plan enrollment and billing\n- **Sessions**: Secure session storage for authentication\n- **Acknowledgements**: Task assignment and staff confirmation tracking with UUID IDs, status (pending/acknowledged/completed), timestamps\n- **Staff Activity Log**: Comprehensive audit trail of all staff actions with metadata (document uploads, task acknowledgements, deliveries)\n- **Delivery Location**: Real-time GPS tracking for delivery personnel with latitude/longitude coordinates and status\n\n**Data Access Pattern**\n- Storage abstraction layer (IStorage interface) allows for flexible implementations\n- **DbStorage**: Production database storage using Drizzle ORM for PostgreSQL persistence\n- **MemStorage**: In-memory storage available for testing (data lost on restart)\n- Database schema synced with PostgreSQL via Drizzle migrations\n- All user signups, consultations, milestones, and payments are persisted to PostgreSQL\n\n**Backend API Routes**\n\n*Authentication & User*\n- POST /api/signup-with-consultation: Creates user account with consultation booking and initial milestones\n- POST /api/payment/complete-dummy: Marks dummy payment as completed\n- GET /api/auth/user: Retrieves authenticated user details\n\n*Consultant Routes*\n- GET /api/consultant/customers: Lists all customers for consultant\n- POST /api/consultant/upload-report: Uploads medical reports for stages 1 & 3\n\n*Lab Technician Routes*\n- GET /api/lab/customers: Lists all customers for lab technician\n- POST /api/lab/upload-report: Uploads test reports for stage 2\n\n*Nutritionist Routes*\n- GET /api/nutritionist/customers: Lists customers with completed stage 3\n- POST /api/nutritionist/upload-diet-chart: Uploads diet charts for stage 4\n\n*Chef Routes*\n- GET /api/chef/active-plans: Lists active diet plans for meal preparation\n- POST /api/chef/mark-prepared: Marks meals as prepared with activity logging\n\n*Delivery Routes*\n- GET /api/delivery/assigned: Lists assigned deliveries\n- PATCH /api/delivery/status/:orderId: Updates delivery status\n- POST /api/delivery/location: Updates GPS location for delivery tracking\n\n*Acknowledgement Routes*\n- POST /api/acknowledgements: Creates new acknowledgement with activity logging\n- PATCH /api/acknowledgements/:id: Updates acknowledgement status (validated with Zod, returns 404 if not found)\n- GET /api/acknowledgements/staff: Gets staff's acknowledgements\n- GET /api/admin/acknowledgements: Gets all acknowledgements (admin only)\n\n*Activity Log Routes*\n- GET /api/activity/staff: Gets staff's activity logs\n- GET /api/activity/customer/:userId: Gets customer's activity logs\n- GET /api/admin/activity: Gets all activity logs (admin only)\n\n*Admin Routes*\n- GET /api/admin/customers: Lists all customer accounts\n- GET /api/admin/delivery-locations: Gets all delivery personnel locations\n- GET /api/admin/staff/:role: Gets staff members by role\n- PATCH /api/admin/milestones/:id: Updates milestone status\n- POST /api/admin/documents: Creates document record after upload\n\n*Object Storage*\n- POST /api/objects/upload: Gets presigned URL for file upload\n- GET /objects/:objectPath: Downloads private files with ACL verification\n\n### External Dependencies\n\n**Third-Party Services**\n- **Stripe**: Payment processing integration (@stripe/stripe-js, @stripe/react-stripe-js)\n- **Replit Auth**: OAuth authentication provider via OpenID Connect\n- **Neon Database**: Serverless PostgreSQL hosting with WebSocket support\n- **Replit Object Storage**: Google Cloud Storage-backed file storage for protected document uploads\n  - Presigned URL uploads via Uppy for medical documents, test results, and diet charts\n  - ACL-based access control (owner-based permissions)\n  - Private document directory with authenticated download endpoints\n\n**Development Tools**\n- **Replit Plugins**: Runtime error overlay, cartographer (dev mode), dev banner\n- **Drizzle Kit**: Database migrations and schema management\n\n**UI Component Libraries**\n- **Radix UI**: Accessible, unstyled component primitives for custom design system\n- **Lucide React**: Icon library for consistent iconography\n- **Recharts**: Data visualization for nutritional charts (via chart components)\n\n**Form & Validation**\n- **React Hook Form**: Form state management with @hookform/resolvers\n- **Zod**: Runtime schema validation integrated with Drizzle\n\n**Utilities**\n- **date-fns**: Date manipulation and formatting\n- **clsx & tailwind-merge**: Conditional className utilities\n- **memoizee**: Function memoization for performance optimization\n\n## Recent Implementation (October 2025)\n\n### Clinical Staff Workflow System\n\n**Completed Tasks (6/19)**\n1. ✅ Extended database schema with acknowledgements, staff_activity_log, delivery_location tables\n2. ✅ Updated storage interface with 13 new methods for acknowledgements, activity logs, delivery tracking\n3. ✅ Implemented backend API routes for all clinical staff workflows with Zod validation\n4. ✅ Built acknowledgement system with create/update endpoints and activity logging\n5. ✅ Implemented comprehensive activity logging across all clinical actions\n6. ✅ Built Consultant Panel with customer list, stage 1 & 3 uploads, patient overview, acknowledgements\n\n**Clinical Staff Roles**\n- **Consultant**: Handles physician consultations (Stage 1) and discussion reports (Stage 3)\n- **Lab Technician**: Manages test collection and uploads test reports (Stage 2)\n- **Nutritionist**: Creates diet charts and meal plans (Stage 4)\n- **Chef**: Views active plans, marks meals as prepared\n- **Delivery**: Manages deliveries with GPS tracking and status updates\n\n**Consultant Panel Features** (at /consultant)\n- Customer list view with selection\n- Patient information display\n- 6-stage progress visualization with color-coded status\n- Upload reports for Stage 1 (Initial Consultation) and Stage 3 (Discussion)\n- Document history with download links\n- Pending acknowledgements with update functionality\n- ObjectUploader integration with presigned URLs\n- Customer-specific query invalidations\n- Activity logging on all actions\n\n**Acknowledgement System**\n- UUID-based acknowledgement tracking\n- Status flow: pending → acknowledged → completed\n- PATCH endpoint with Zod validation (z.enum status validation)\n- Returns 404 when acknowledgement not found\n- Automatic activity logging on status updates\n- Conditional acknowledgedAt timestamp (only for acknowledged/completed)\n\n**Activity Logging**\n- All clinical staff actions logged with metadata\n- Tracks: document uploads, task acknowledgements, meal preparation, deliveries\n- Queryable by staff, customer, or admin\n- Includes actionType, stage, description, metadata fields\n\n**Pending Tasks (13/19)**\n- Lab Technician Panel, Nutritionist Panel, Chef Panel, Delivery Panel\n- Enhanced Admin Panel with staff monitoring\n- GPS tracking system, PDF generation, delivery sync logic\n- Notification system, role-based navigation\n- End-to-end testing","size_bytes":10390},"server/routes.ts":{"content":"import type { Express, RequestHandler } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { ObjectStorageService, ObjectNotFoundError } from \"./objectStorage\";\nimport { ObjectPermission } from \"./objectAcl\";\nimport { \n  insertReportSchema, \n  insertOrderSchema,\n  insertPlanSchema,\n  insertStageProgressSchema,\n  insertDocumentSchema,\n  insertDietPlanSchema,\n  insertAddressSchema,\n  insertDeliverySyncSchema,\n  insertAcknowledgementSchema,\n  insertStaffActivityLogSchema,\n  insertDeliveryLocationSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport Razorpay from \"razorpay\";\n\nif (!process.env.RAZORPAY_KEY_ID || !process.env.RAZORPAY_KEY_SECRET) {\n  throw new Error('Missing required Razorpay secrets: RAZORPAY_KEY_ID and RAZORPAY_KEY_SECRET');\n}\n\nconst razorpay = new Razorpay({\n  key_id: process.env.RAZORPAY_KEY_ID,\n  key_secret: process.env.RAZORPAY_KEY_SECRET,\n});\n\nconst isAdmin: RequestHandler = async (req: any, res, next) => {\n  if (!req.user) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  \n  const userId = req.user.claims.sub;\n  const user = await storage.getUser(userId);\n  \n  if (!user || (user.role !== 'admin' && user.role !== 'clinical')) {\n    return res.status(403).json({ message: \"Forbidden\" });\n  }\n  \n  next();\n};\n\nconst isKitchen: RequestHandler = async (req: any, res, next) => {\n  if (!req.user) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  \n  const userId = req.user.claims.sub;\n  const user = await storage.getUser(userId);\n  \n  if (!user || user.role !== 'kitchen') {\n    return res.status(403).json({ message: \"Forbidden\" });\n  }\n  \n  next();\n};\n\nconst isDelivery: RequestHandler = async (req: any, res, next) => {\n  if (!req.user) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  \n  const userId = req.user.claims.sub;\n  const user = await storage.getUser(userId);\n  \n  if (!user || user.role !== 'delivery') {\n    return res.status(403).json({ message: \"Forbidden\" });\n  }\n  \n  next();\n};\n\nconst isConsultant: RequestHandler = async (req: any, res, next) => {\n  if (!req.user) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  \n  const userId = req.user.claims.sub;\n  const user = await storage.getUser(userId);\n  \n  if (!user || (user.role !== 'clinical' && user.role !== 'admin')) {\n    return res.status(403).json({ message: \"Forbidden\" });\n  }\n  \n  next();\n};\n\nconst isNutritionist: RequestHandler = async (req: any, res, next) => {\n  if (!req.user) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  \n  const userId = req.user.claims.sub;\n  const user = await storage.getUser(userId);\n  \n  if (!user || (user.role !== 'nutritionist' && user.role !== 'clinical' && user.role !== 'admin')) {\n    return res.status(403).json({ message: \"Forbidden\" });\n  }\n  \n  next();\n};\n\nconst isLabTechnician: RequestHandler = async (req: any, res, next) => {\n  if (!req.user) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  \n  const userId = req.user.claims.sub;\n  const user = await storage.getUser(userId);\n  \n  if (!user || (user.role !== 'lab_technician' && user.role !== 'clinical' && user.role !== 'admin')) {\n    return res.status(403).json({ message: \"Forbidden\" });\n  }\n  \n  next();\n};\n\nconst isChef: RequestHandler = async (req: any, res, next) => {\n  if (!req.user) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  \n  const userId = req.user.claims.sub;\n  const user = await storage.getUser(userId);\n  \n  if (!user || (user.role !== 'chef' && user.role !== 'kitchen' && user.role !== 'admin')) {\n    return res.status(403).json({ message: \"Forbidden\" });\n  }\n  \n  next();\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  await setupAuth(app);\n\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  app.get('/api/user/consultations', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const consultations = await storage.getUserConsultations(userId);\n      res.json(consultations);\n    } catch (error) {\n      console.error(\"Error fetching consultations:\", error);\n      res.status(500).json({ message: \"Failed to fetch consultations\" });\n    }\n  });\n\n  app.get('/api/user/milestones', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const milestones = await storage.getUserMilestones(userId);\n      res.json(milestones);\n    } catch (error) {\n      console.error(\"Error fetching milestones:\", error);\n      res.status(500).json({ message: \"Failed to fetch milestones\" });\n    }\n  });\n\n  app.get('/api/user/reports', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const reports = await storage.getUserReports(userId);\n      res.json(reports);\n    } catch (error) {\n      console.error(\"Error fetching reports:\", error);\n      res.status(500).json({ message: \"Failed to fetch reports\" });\n    }\n  });\n\n  app.get('/api/user/profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const profile = await storage.getCustomerProfile(userId);\n      res.json(profile);\n    } catch (error) {\n      console.error(\"Error fetching profile:\", error);\n      res.status(500).json({ message: \"Failed to fetch profile\" });\n    }\n  });\n\n  app.get('/api/admin/customers', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const customers = await storage.getCustomers();\n      res.json(customers);\n    } catch (error) {\n      console.error(\"Error fetching customers:\", error);\n      res.status(500).json({ message: \"Failed to fetch customers\" });\n    }\n  });\n\n  app.get('/api/admin/milestones/:userId', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const milestones = await storage.getUserMilestones(req.params.userId);\n      res.json(milestones);\n    } catch (error) {\n      console.error(\"Error fetching milestones:\", error);\n      res.status(500).json({ message: \"Failed to fetch milestones\" });\n    }\n  });\n\n  app.patch('/api/admin/milestones/:id', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const statusSchema = z.object({ status: z.enum(['locked', 'in_progress', 'completed']) });\n      const { status } = statusSchema.parse(req.body);\n      const milestone = await storage.updateMilestone(req.params.id, status);\n      \n      if (!milestone) {\n        return res.status(404).json({ message: \"Milestone not found\" });\n      }\n      \n      res.json(milestone);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid status value\", errors: error.errors });\n      }\n      console.error(\"Error updating milestone:\", error);\n      res.status(500).json({ message: \"Failed to update milestone\" });\n    }\n  });\n\n  app.get('/api/admin/reports/:userId', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const reports = await storage.getUserReports(req.params.userId);\n      res.json(reports);\n    } catch (error) {\n      console.error(\"Error fetching reports:\", error);\n      res.status(500).json({ message: \"Failed to fetch reports\" });\n    }\n  });\n\n  app.post('/api/admin/reports', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const reportData = insertReportSchema.parse(req.body);\n      const report = await storage.createReport(reportData);\n      res.json(report);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid report data\", errors: error.errors });\n      }\n      console.error(\"Error creating report:\", error);\n      res.status(500).json({ message: \"Failed to create report\" });\n    }\n  });\n\n  app.post('/api/admin/orders', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const orderData = insertOrderSchema.parse(req.body);\n      const order = await storage.createOrder(orderData);\n      res.json(order);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid order data\", errors: error.errors });\n      }\n      console.error(\"Error creating order:\", error);\n      res.status(500).json({ message: \"Failed to create order\" });\n    }\n  });\n\n  // Assign delivery person to order (admin only)\n  app.patch('/api/admin/orders/:orderId/assign', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const { orderId } = req.params;\n      const assignSchema = z.object({ deliveryPersonId: z.string().min(1) });\n      const { deliveryPersonId } = assignSchema.parse(req.body);\n\n      // Validate delivery person exists and has delivery role\n      const deliveryPerson = await storage.getUser(deliveryPersonId);\n      if (!deliveryPerson || deliveryPerson.role !== 'delivery') {\n        return res.status(400).json({ message: \"Invalid delivery person\" });\n      }\n\n      // Update order with assigned delivery person\n      const order = await storage.getOrderById(orderId);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n\n      const updatedOrder = await storage.updateOrder(orderId, {\n        assignedDeliveryPersonId: deliveryPersonId\n      });\n\n      // Log assignment activity\n      const activityData = insertStaffActivityLogSchema.parse({\n        staffId: req.user.claims.sub,\n        customerId: order.userId,\n        actionType: 'delivery_assigned',\n        description: `Assigned delivery to ${deliveryPerson.firstName} ${deliveryPerson.lastName}`,\n        metadata: { orderId, deliveryPersonId }\n      });\n      await storage.createStaffActivity(activityData);\n\n      res.json(updatedOrder);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid request\", errors: error.errors });\n      }\n      console.error(\"Error assigning delivery person:\", error);\n      res.status(500).json({ message: \"Failed to assign delivery person\" });\n    }\n  });\n\n  app.get('/api/kitchen/orders/:status', isAuthenticated, isKitchen, async (req: any, res) => {\n    try {\n      const orders = await storage.getOrdersByStatus(req.params.status);\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.patch('/api/kitchen/orders/:id', isAuthenticated, isKitchen, async (req: any, res) => {\n    try {\n      const statusSchema = z.object({ status: z.enum(['pending', 'preparing', 'ready', 'prepared', 'out_for_delivery', 'in_transit', 'delivered']) });\n      const { status } = statusSchema.parse(req.body);\n      const order = await storage.updateOrderStatus(req.params.id, status);\n      \n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      \n      res.json(order);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid status value\", errors: error.errors });\n      }\n      console.error(\"Error updating order:\", error);\n      res.status(500).json({ message: \"Failed to update order\" });\n    }\n  });\n\n  app.get('/api/delivery/orders/:status', isAuthenticated, isDelivery, async (req: any, res) => {\n    try {\n      const orders = await storage.getOrdersByStatus(req.params.status);\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.patch('/api/delivery/orders/:id', isAuthenticated, isDelivery, async (req: any, res) => {\n    try {\n      const statusSchema = z.object({ status: z.enum(['ready', 'prepared', 'out_for_delivery', 'in_transit', 'delivered']) });\n      const { status } = statusSchema.parse(req.body);\n      const order = await storage.updateOrderStatus(req.params.id, status);\n      \n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      \n      res.json(order);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid status value\", errors: error.errors });\n      }\n      console.error(\"Error updating order:\", error);\n      res.status(500).json({ message: \"Failed to update order\" });\n    }\n  });\n\n  app.post('/api/payment-sessions', isAuthenticated, async (req: any, res) => {\n    try {\n      const sessionSchema = z.object({\n        consultationDate: z.string(),\n        planType: z.enum(['clinical', 'ai']),\n      });\n      const data = sessionSchema.parse(req.body);\n      \n      // Server-side pricing based on plan type\n      const planPricing: Record<string, number> = {\n        'clinical': 500000, // ₹5,000 in paise\n        'ai': 0, // Free for AI plan\n      };\n      \n      const amount = planPricing[data.planType];\n      if (amount === undefined) {\n        return res.status(400).json({ message: \"Invalid plan type\" });\n      }\n      \n      const userId = req.user.claims.sub;\n      const session = await storage.createPaymentSession({\n        userId,\n        consultationDate: data.consultationDate,\n        planType: data.planType,\n        amount, // Server-determined amount, not client-provided\n        status: 'pending',\n      });\n      \n      res.json(session);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      console.error(\"Error creating payment session:\", error);\n      res.status(500).json({ message: \"Failed to create payment session\" });\n    }\n  });\n\n  app.patch('/api/user/character', isAuthenticated, async (req: any, res) => {\n    try {\n      const characterSchema = z.object({\n        characterImageUrl: z.string().optional(),\n        characterType: z.string().optional(),\n      });\n      const data = characterSchema.parse(req.body);\n      \n      const userId = req.user.claims.sub;\n      const user = await storage.updateUser(userId, data);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json(user);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      console.error(\"Error updating character:\", error);\n      res.status(500).json({ message: \"Failed to update character\" });\n    }\n  });\n\n  // Complete signup with consultation (unauthenticated - new users)\n  app.post('/api/signup-with-consultation', async (req: any, res) => {\n    try {\n      console.log(\"Received signup data:\", JSON.stringify(req.body, null, 2));\n      \n      const schema = z.object({\n        name: z.string(),\n        email: z.string().email(),\n        phone: z.string(),\n        characterType: z.string(),\n        characterImage: z.string().optional(),\n        consultationDate: z.string(),\n        consultationTime: z.string(),\n        doctorName: z.string(),\n        planType: z.string(),\n      });\n      \n      const data = schema.parse(req.body);\n      const [firstName, ...lastNameParts] = data.name.split(' ');\n      const lastName = lastNameParts.join(' ');\n      \n      // Create user\n      const user = await storage.createUser({\n        email: data.email,\n        firstName,\n        lastName,\n        phone: data.phone,\n        characterType: data.characterType,\n        characterImageUrl: data.characterImage || null,\n        role: 'customer',\n      });\n      \n      // Create consultation\n      const consultation = await storage.createConsultation({\n        userId: user.id,\n        doctorName: data.doctorName,\n        scheduledDate: data.consultationDate,\n        scheduledTime: data.consultationTime,\n        meetingType: 'clinical',\n        status: 'scheduled',\n      });\n      \n      // Create payment session\n      const paymentSession = await storage.createPaymentSession({\n        userId: user.id,\n        consultationDate: data.consultationDate,\n        planType: data.planType,\n        amount: 199900, // ₹1,999 in paise\n        status: 'pending',\n        paymentMethod: 'dummy',\n      });\n\n      // Create plan with pricing breakdown\n      const PLAN_PRICES: Record<string, number> = {\n        'clinical': 9999,\n        'ai': 5999,\n      };\n      const CONSULTATION_FEE = 1999;\n      const planPrice = PLAN_PRICES[data.planType.toLowerCase()] || 9999;\n      \n      await storage.createPlan({\n        userId: user.id,\n        type: data.planType,\n        listPrice: planPrice.toString(),\n        consultationFeeCredited: CONSULTATION_FEE.toString(),\n        finalPayable: (planPrice - CONSULTATION_FEE).toString(),\n        isActive: false, // Will be activated after payment\n        durationDays: 30,\n      });\n      \n      // Initialize milestones\n      const milestoneNames = [\n        'Physician Consultation',\n        'Test Collection',\n        'Discussion',\n        'Diet Chart',\n        'Meal Delivery'\n      ];\n      \n      for (let i = 0; i < milestoneNames.length; i++) {\n        await storage.createMilestone({\n          userId: user.id,\n          name: milestoneNames[i],\n          status: i === 0 ? 'in_progress' : 'locked',\n          order: i + 1,\n        });\n      }\n\n      // Auto-login: Create session for the new user\n      // Match the structure expected by Passport serialization (see replitAuth.ts)\n      const sessionUser = {\n        claims: { \n          sub: user.id,\n          email: user.email,\n          first_name: user.firstName,\n          last_name: user.lastName,\n          exp: Math.floor(Date.now() / 1000) + (7 * 24 * 60 * 60), // 7 days\n        },\n        access_token: 'auto-login-token',\n        refresh_token: null, // No refresh token for auto-login sessions\n        expires_at: Math.floor(Date.now() / 1000) + (7 * 24 * 60 * 60),\n        isAutoLogin: true, // Flag to identify auto-login sessions\n      };\n\n      req.login(sessionUser, (err: any) => {\n        if (err) {\n          console.error(\"Auto-login failed:\", err);\n          // Still return success even if auto-login fails\n          return res.json({ \n            success: true, \n            userId: user.id, \n            paymentSessionId: paymentSession.id,\n            consultationId: consultation.id,\n            autoLoginFailed: true,\n          });\n        }\n\n        res.json({ \n          success: true, \n          userId: user.id, \n          paymentSessionId: paymentSession.id,\n          consultationId: consultation.id,\n          autoLogin: true,\n        });\n      });\n    } catch (error: any) {\n      if (error instanceof z.ZodError) {\n        console.error(\"Validation error:\", JSON.stringify(error.errors, null, 2));\n        return res.status(400).json({ message: \"Invalid signup data\", errors: error.errors });\n      }\n      console.error(\"Error completing signup:\", error);\n      res.status(500).json({ message: \"Error completing signup: \" + error.message });\n    }\n  });\n\n  // Complete dummy payment (unauthenticated - before login)\n  app.post('/api/payment/complete-dummy', async (req, res) => {\n    try {\n      const schema = z.object({\n        paymentSessionId: z.string(),\n        userId: z.string(),\n      });\n      \n      const { paymentSessionId, userId } = schema.parse(req.body);\n      \n      const session = await storage.getPaymentSession(paymentSessionId);\n      \n      if (!session) {\n        return res.status(404).json({ message: \"Payment session not found\" });\n      }\n      \n      if (session.userId !== userId) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n      \n      // Update payment session status\n      await storage.updatePaymentSession(paymentSessionId, { \n        status: 'completed',\n        completedAt: new Date(),\n      });\n      \n      res.json({ success: true, message: \"Payment completed successfully\" });\n    } catch (error: any) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid payment data\", errors: error.errors });\n      }\n      console.error(\"Error completing payment:\", error);\n      res.status(500).json({ message: \"Error completing payment: \" + error.message });\n    }\n  });\n\n  app.post('/api/create-razorpay-order', isAuthenticated, async (req: any, res) => {\n    try {\n      const paymentSchema = z.object({\n        sessionId: z.string(),\n      });\n      const { sessionId } = paymentSchema.parse(req.body);\n\n      const userId = req.user.claims.sub;\n      \n      // Fetch payment session to verify ownership and get amount\n      const session = await storage.getPaymentSession(sessionId);\n      \n      if (!session) {\n        return res.status(404).json({ message: \"Payment session not found\" });\n      }\n      \n      if (session.userId !== userId) {\n        return res.status(403).json({ message: \"Unauthorized - session belongs to different user\" });\n      }\n      \n      if (session.status === 'completed') {\n        return res.status(400).json({ message: \"Payment session already completed\" });\n      }\n\n      // Create Razorpay order\n      const order = await razorpay.orders.create({\n        amount: Math.round(session.amount), // Amount in paise\n        currency: \"INR\",\n        receipt: sessionId,\n        notes: {\n          sessionId,\n          userId,\n        },\n      });\n\n      // Persist Razorpay order ID to the payment session\n      await storage.updatePaymentSession(sessionId, { razorpayOrderId: order.id });\n\n      res.json({ \n        orderId: order.id,\n        amount: order.amount,\n        currency: order.currency,\n        keyId: process.env.RAZORPAY_KEY_ID\n      });\n    } catch (error: any) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      console.error(\"Error creating Razorpay order:\", error);\n      res.status(500).json({ message: \"Error creating payment order: \" + error.message });\n    }\n  });\n\n  app.post('/api/verify-payment', isAuthenticated, async (req: any, res) => {\n    try {\n      const verifySchema = z.object({\n        razorpay_order_id: z.string(),\n        razorpay_payment_id: z.string(),\n        razorpay_signature: z.string(),\n        sessionId: z.string(),\n      });\n      const { razorpay_order_id, razorpay_payment_id, razorpay_signature, sessionId } = verifySchema.parse(req.body);\n\n      const userId = req.user.claims.sub;\n\n      // Validate session ownership and status\n      const session = await storage.getPaymentSession(sessionId);\n      \n      if (!session) {\n        return res.status(404).json({ message: \"Payment session not found\" });\n      }\n      \n      if (session.userId !== userId) {\n        return res.status(403).json({ message: \"Unauthorized - session belongs to different user\" });\n      }\n      \n      if (session.status === 'completed') {\n        return res.status(400).json({ message: \"Payment session already completed\" });\n      }\n\n      // Verify the order ID matches the session's stored order ID\n      if (!session.razorpayOrderId || session.razorpayOrderId !== razorpay_order_id) {\n        return res.status(400).json({ message: \"Order ID mismatch - payment not authorized for this session\" });\n      }\n\n      // Verify payment signature\n      const crypto = await import('crypto');\n      const expectedSignature = crypto\n        .createHmac('sha256', process.env.RAZORPAY_KEY_SECRET!)\n        .update(`${razorpay_order_id}|${razorpay_payment_id}`)\n        .digest('hex');\n\n      if (expectedSignature !== razorpay_signature) {\n        return res.status(400).json({ message: \"Invalid payment signature\" });\n      }\n\n      // Update payment session status\n      await storage.updatePaymentSession(sessionId, { status: 'completed' });\n\n      res.json({ success: true, message: \"Payment verified successfully\" });\n    } catch (error: any) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      console.error(\"Error verifying payment:\", error);\n      res.status(500).json({ message: \"Error verifying payment: \" + error.message });\n    }\n  });\n\n  // ==================== PLANS ROUTES ====================\n  \n  // Get user's active plan\n  app.get('/api/user/plan', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const plan = await storage.getUserPlan(userId);\n      res.json(plan);\n    } catch (error) {\n      console.error(\"Error fetching plan:\", error);\n      res.status(500).json({ message: \"Failed to fetch plan\" });\n    }\n  });\n\n  // Create a new plan for user\n  app.post('/api/plans', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const planData = insertPlanSchema.parse({ ...req.body, userId });\n      const plan = await storage.createPlan(planData);\n      res.json(plan);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid plan data\", errors: error.errors });\n      }\n      console.error(\"Error creating plan:\", error);\n      res.status(500).json({ message: \"Failed to create plan\" });\n    }\n  });\n\n  // Update plan\n  app.patch('/api/plans/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const plan = await storage.getPlan(req.params.id);\n      \n      if (!plan || plan.userId !== userId) {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n      \n      const updated = await storage.updatePlan(req.params.id, req.body);\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error updating plan:\", error);\n      res.status(500).json({ message: \"Failed to update plan\" });\n    }\n  });\n\n  // ==================== STAGE PROGRESS ROUTES ====================\n  \n  // Get user's stage progress\n  app.get('/api/user/stages', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const stages = await storage.getUserStageProgress(userId);\n      res.json(stages);\n    } catch (error) {\n      console.error(\"Error fetching stages:\", error);\n      res.status(500).json({ message: \"Failed to fetch stages\" });\n    }\n  });\n\n  // Update stage status (admin/consultant only)\n  app.patch('/api/stages/:id', isAuthenticated, isConsultant, async (req: any, res) => {\n    try {\n      const statusSchema = z.object({ \n        status: z.enum(['pending', 'in_progress', 'completed', 'failed']) \n      });\n      const { status } = statusSchema.parse(req.body);\n      const stage = await storage.updateStageProgress(req.params.id, { status });\n      \n      if (!stage) {\n        return res.status(404).json({ message: \"Stage not found\" });\n      }\n      \n      res.json(stage);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid status value\", errors: error.errors });\n      }\n      console.error(\"Error updating stage:\", error);\n      res.status(500).json({ message: \"Failed to update stage\" });\n    }\n  });\n\n  // ==================== DOCUMENTS ROUTES ====================\n  \n  // Get user's documents\n  app.get('/api/user/documents', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const documents = await storage.getUserDocuments(userId);\n      res.json(documents);\n    } catch (error) {\n      console.error(\"Error fetching documents:\", error);\n      res.status(500).json({ message: \"Failed to fetch documents\" });\n    }\n  });\n\n  // Upload document (consultant/admin only)\n  app.post('/api/documents', isAuthenticated, isConsultant, async (req: any, res) => {\n    try {\n      const documentData = insertDocumentSchema.parse(req.body);\n      const document = await storage.createDocument(documentData);\n      res.json(document);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid document data\", errors: error.errors });\n      }\n      console.error(\"Error creating document:\", error);\n      res.status(500).json({ message: \"Failed to create document\" });\n    }\n  });\n\n  // Get all documents for a user (admin view)\n  app.get('/api/admin/documents/:userId', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const documents = await storage.getUserDocuments(req.params.userId);\n      res.json(documents);\n    } catch (error) {\n      console.error(\"Error fetching documents:\", error);\n      res.status(500).json({ message: \"Failed to fetch documents\" });\n    }\n  });\n\n  // Get documents by stage and user (admin view)\n  app.get('/api/admin/documents/:userId/:stage', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const documents = await storage.getDocumentsByStage(req.params.userId, parseInt(req.params.stage));\n      res.json(documents);\n    } catch (error) {\n      console.error(\"Error fetching documents:\", error);\n      res.status(500).json({ message: \"Failed to fetch documents\" });\n    }\n  });\n\n  // ==================== DIET PLANS ROUTES ====================\n  \n  // Get user's diet plan\n  app.get('/api/user/diet-plan', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const dietPlan = await storage.getUserDietPlan(userId);\n      res.json(dietPlan);\n    } catch (error) {\n      console.error(\"Error fetching diet plan:\", error);\n      res.status(500).json({ message: \"Failed to fetch diet plan\" });\n    }\n  });\n\n  // Create diet plan (nutritionist/admin only)\n  app.post('/api/diet-plans', isAuthenticated, isNutritionist, async (req: any, res) => {\n    try {\n      const dietPlanData = insertDietPlanSchema.parse(req.body);\n      const dietPlan = await storage.createDietPlan(dietPlanData);\n      res.json(dietPlan);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid diet plan data\", errors: error.errors });\n      }\n      console.error(\"Error creating diet plan:\", error);\n      res.status(500).json({ message: \"Failed to create diet plan\" });\n    }\n  });\n\n  // Update diet plan\n  app.patch('/api/diet-plans/:id', isAuthenticated, isNutritionist, async (req: any, res) => {\n    try {\n      const dietPlan = await storage.updateDietPlan(req.params.id, req.body);\n      if (!dietPlan) {\n        return res.status(404).json({ message: \"Diet plan not found\" });\n      }\n      res.json(dietPlan);\n    } catch (error) {\n      console.error(\"Error updating diet plan:\", error);\n      res.status(500).json({ message: \"Failed to update diet plan\" });\n    }\n  });\n\n  // ==================== ADDRESSES ROUTES ====================\n  \n  // Get user's addresses\n  app.get('/api/user/addresses', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const addresses = await storage.getUserAddresses(userId);\n      res.json(addresses);\n    } catch (error) {\n      console.error(\"Error fetching addresses:\", error);\n      res.status(500).json({ message: \"Failed to fetch addresses\" });\n    }\n  });\n\n  // Create address\n  app.post('/api/addresses', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const addressData = insertAddressSchema.parse({ ...req.body, userId });\n      const address = await storage.createAddress(addressData);\n      res.json(address);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid address data\", errors: error.errors });\n      }\n      console.error(\"Error creating address:\", error);\n      res.status(500).json({ message: \"Failed to create address\" });\n    }\n  });\n\n  // Update address\n  app.patch('/api/addresses/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const address = await storage.getAddress(req.params.id);\n      \n      if (!address || address.userId !== userId) {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n      \n      const updated = await storage.updateAddress(req.params.id, req.body);\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error updating address:\", error);\n      res.status(500).json({ message: \"Failed to update address\" });\n    }\n  });\n\n  // Delete address\n  app.delete('/api/addresses/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const address = await storage.getAddress(req.params.id);\n      \n      if (!address || address.userId !== userId) {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n      \n      await storage.deleteAddress(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting address:\", error);\n      res.status(500).json({ message: \"Failed to delete address\" });\n    }\n  });\n\n  // ==================== DELIVERY SYNC ROUTES ====================\n  \n  // Create delivery sync (admin only)\n  app.post('/api/delivery-sync', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const syncData = insertDeliverySyncSchema.parse(req.body);\n      const sync = await storage.createDeliverySync(syncData);\n      res.json(sync);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid sync data\", errors: error.errors });\n      }\n      console.error(\"Error creating delivery sync:\", error);\n      res.status(500).json({ message: \"Failed to create delivery sync\" });\n    }\n  });\n\n  // Get user's delivery sync status\n  app.get('/api/user/delivery-sync', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const syncs = await storage.getUserDeliverySyncs(userId);\n      res.json(syncs);\n    } catch (error) {\n      console.error(\"Error fetching delivery syncs:\", error);\n      res.status(500).json({ message: \"Failed to fetch delivery syncs\" });\n    }\n  });\n\n  // Update delivery sync status (admin only)\n  app.patch('/api/delivery-sync/:id', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const statusSchema = z.object({ \n        status: z.enum(['queued', 'processing', 'completed', 'failed']) \n      });\n      const { status } = statusSchema.parse(req.body);\n      const sync = await storage.updateDeliverySync(req.params.id, { status });\n      \n      if (!sync) {\n        return res.status(404).json({ message: \"Delivery sync not found\" });\n      }\n      \n      res.json(sync);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid status value\", errors: error.errors });\n      }\n      console.error(\"Error updating delivery sync:\", error);\n      res.status(500).json({ message: \"Failed to update delivery sync\" });\n    }\n  });\n\n  // ==================== OBJECT STORAGE ROUTES ====================\n  // Referenced from javascript_object_storage integration\n  \n  // Get presigned URL for file upload (authenticated users)\n  app.post('/api/objects/upload', isAuthenticated, async (req, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ message: \"Failed to get upload URL\" });\n    }\n  });\n\n  // Download private objects with ACL check\n  app.get('/objects/:objectPath(*)', isAuthenticated, async (req: any, res) => {\n    const userId = req.user?.claims?.sub;\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(req.path);\n      const canAccess = await objectStorageService.canAccessObjectEntity({\n        objectFile,\n        userId: userId,\n        requestedPermission: ObjectPermission.READ,\n      });\n      if (!canAccess) {\n        return res.sendStatus(401);\n      }\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error accessing object:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  // Create document record after upload (admin/clinical only)\n  app.post('/api/admin/documents', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const uploaderId = req.user.claims.sub;\n      const objectStorageService = new ObjectStorageService();\n      \n      // The document owner should be the patient (userId in body), not the uploader\n      const documentOwnerId = req.body.userId;\n      if (!documentOwnerId) {\n        return res.status(400).json({ message: \"userId is required\" });\n      }\n      \n      // Normalize the uploaded file URL and set ACL policy with patient as owner\n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(\n        req.body.fileUrl,\n        {\n          owner: documentOwnerId,\n          visibility: \"private\"\n        }\n      );\n      \n      // Create document record in database\n      const documentData = insertDocumentSchema.parse({\n        ...req.body,\n        fileUrl: objectPath,\n        uploadedBy: uploaderId\n      });\n      \n      const document = await storage.createDocument(documentData);\n      res.json(document);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid document data\", errors: error.errors });\n      }\n      console.error(\"Error creating document:\", error);\n      res.status(500).json({ message: \"Failed to create document\" });\n    }\n  });\n\n  // ========================================\n  // CONSULTANT ROUTES (Doctor Panel)\n  // ========================================\n  \n  // Get assigned Clinical customers for consultant\n  app.get('/api/consultant/customers', isAuthenticated, isConsultant, async (req: any, res) => {\n    try {\n      const customers = await storage.getClinicalCustomers();\n      res.json(customers);\n    } catch (error) {\n      console.error(\"Error fetching consultant customers:\", error);\n      res.status(500).json({ message: \"Failed to fetch customers\" });\n    }\n  });\n\n  // Upload consultation report (Stage 1) or approval report (Stage 3)\n  app.post('/api/consultant/upload-report', isAuthenticated, isConsultant, async (req: any, res) => {\n    try {\n      const staffId = req.user.claims.sub;\n      \n      const objectStorageService = new ObjectStorageService();\n      \n      // Set ACL with patient as owner\n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(req.body.url, {\n        owner: req.body.userId,\n        visibility: \"private\"\n      });\n      \n      // Validate and create document\n      const documentData = insertDocumentSchema.parse({\n        userId: req.body.userId,\n        stage: req.body.stage,\n        label: req.body.label,\n        url: objectPath,\n        uploadedByRole: 'consultant'\n      });\n      \n      const document = await storage.createDocument(documentData);\n      \n      // Log activity\n      const activityData = insertStaffActivityLogSchema.parse({\n        staffId,\n        customerId: req.body.userId,\n        actionType: 'report_upload',\n        stage: req.body.stage,\n        description: `Uploaded ${req.body.label} for stage ${req.body.stage}`,\n        metadata: { documentId: document.id }\n      });\n      await storage.createStaffActivity(activityData);\n      \n      // Update stage progress to completed\n      const stageProgresses = await storage.getUserStageProgress(req.body.userId);\n      const stageProgress = stageProgresses.find(s => s.stage === req.body.stage);\n      if (stageProgress) {\n        await storage.updateStageProgress(stageProgress.id, { status: 'completed' });\n      }\n      \n      res.json(document);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      console.error(\"Error uploading consultant report:\", error);\n      res.status(500).json({ message: \"Failed to upload report\" });\n    }\n  });\n\n  // ========================================\n  // LAB TECHNICIAN ROUTES\n  // ========================================\n  \n  // Get assigned Clinical customers for lab technician\n  app.get('/api/lab/customers', isAuthenticated, isLabTechnician, async (req: any, res) => {\n    try {\n      const customers = await storage.getClinicalCustomers();\n      res.json(customers);\n    } catch (error) {\n      console.error(\"Error fetching lab customers:\", error);\n      res.status(500).json({ message: \"Failed to fetch customers\" });\n    }\n  });\n\n  // Upload test report (Stage 2)\n  app.post('/api/lab/upload-report', isAuthenticated, isLabTechnician, async (req: any, res) => {\n    try {\n      const staffId = req.user.claims.sub;\n      \n      const objectStorageService = new ObjectStorageService();\n      \n      // Set ACL with patient as owner\n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(req.body.url, {\n        owner: req.body.userId,\n        visibility: \"private\"\n      });\n      \n      // Validate and create document for stage 2\n      const documentData = insertDocumentSchema.parse({\n        userId: req.body.userId,\n        stage: 2,\n        label: req.body.label,\n        url: objectPath,\n        uploadedByRole: 'lab_technician'\n      });\n      \n      const document = await storage.createDocument(documentData);\n      \n      // Log activity\n      const activityData = insertStaffActivityLogSchema.parse({\n        staffId,\n        customerId: req.body.userId,\n        actionType: 'test_upload',\n        stage: 2,\n        description: `Uploaded test report: ${req.body.label}`,\n        metadata: { documentId: document.id }\n      });\n      await storage.createStaffActivity(activityData);\n      \n      // Update stage 2 progress to completed\n      const stageProgresses = await storage.getUserStageProgress(req.body.userId);\n      const stageProgress = stageProgresses.find(s => s.stage === 2);\n      if (stageProgress) {\n        await storage.updateStageProgress(stageProgress.id, { status: 'completed' });\n      }\n      \n      res.json(document);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      console.error(\"Error uploading lab report:\", error);\n      res.status(500).json({ message: \"Failed to upload report\" });\n    }\n  });\n\n  // ========================================\n  // NUTRITIONIST ROUTES\n  // ========================================\n  \n  // Get Clinical customers ready for diet chart (stage 3 completed)\n  app.get('/api/nutritionist/customers', isAuthenticated, isNutritionist, async (req: any, res) => {\n    try {\n      const customers = await storage.getClinicalCustomers();\n      \n      // Filter customers where stage 3 is completed\n      const customersWithProgress = await Promise.all(\n        customers.map(async (customer) => {\n          const stageProgress = await storage.getUserStageProgress(customer.id);\n          const stage3 = stageProgress.find(s => s.stage === 3);\n          return {\n            ...customer,\n            stage3Status: stage3?.status || 'pending'\n          };\n        })\n      );\n      \n      res.json(customersWithProgress.filter(c => c.stage3Status === 'completed'));\n    } catch (error) {\n      console.error(\"Error fetching nutritionist customers:\", error);\n      res.status(500).json({ message: \"Failed to fetch customers\" });\n    }\n  });\n\n  // Upload diet chart (Stage 4)\n  app.post('/api/nutritionist/upload-diet-chart', isAuthenticated, isNutritionist, async (req: any, res) => {\n    try {\n      const staffId = req.user.claims.sub;\n      \n      const objectStorageService = new ObjectStorageService();\n      \n      // Set ACL with patient as owner\n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(req.body.url, {\n        owner: req.body.userId,\n        visibility: \"private\"\n      });\n      \n      // Validate and create diet plan document\n      const documentData = insertDocumentSchema.parse({\n        userId: req.body.userId,\n        stage: 4,\n        label: req.body.label,\n        url: objectPath,\n        uploadedByRole: 'nutritionist'\n      });\n      \n      const document = await storage.createDocument(documentData);\n      \n      // Create/update diet plan entry\n      const existingDietPlan = await storage.getUserDietPlan(req.body.userId);\n      if (existingDietPlan) {\n        await storage.updateDietPlan(existingDietPlan.id, {\n          pdfUrl: objectPath,\n          macros: req.body.macros,\n          weeklyPlan: req.body.weeklyPlan\n        });\n      } else {\n        const dietPlanData = insertDietPlanSchema.parse({\n          userId: req.body.userId,\n          pdfUrl: objectPath,\n          macros: req.body.macros,\n          weeklyPlan: req.body.weeklyPlan\n        });\n        await storage.createDietPlan(dietPlanData);\n      }\n      \n      // Log activity\n      const activityData = insertStaffActivityLogSchema.parse({\n        staffId,\n        customerId: req.body.userId,\n        actionType: 'diet_chart_upload',\n        stage: 4,\n        description: `Uploaded diet chart: ${req.body.label}`,\n        metadata: { documentId: document.id }\n      });\n      await storage.createStaffActivity(activityData);\n      \n      // Update stage 4 progress to completed\n      const stageProgresses = await storage.getUserStageProgress(req.body.userId);\n      const stageProgress = stageProgresses.find(s => s.stage === 4);\n      if (stageProgress) {\n        await storage.updateStageProgress(stageProgress.id, { status: 'completed' });\n      }\n      \n      res.json(document);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      console.error(\"Error uploading diet chart:\", error);\n      res.status(500).json({ message: \"Failed to upload diet chart\" });\n    }\n  });\n\n  // Generate diet chart PDF (nutritionist or admin)\n  app.post('/api/nutritionist/diet-plan/:userId/pdf', isAuthenticated, async (req: any, res) => {\n    try {\n      const { userId } = req.params;\n      const staffId = req.user.claims.sub;\n      const staffRole = req.user.role;\n\n      // Check authorization (nutritionist or admin)\n      if (staffRole !== 'nutritionist' && staffRole !== 'admin') {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      // Get user data\n      const customer = await storage.getUserById(userId);\n      if (!customer) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n\n      // Get macros and weeklyPlan from request body or existing diet plan\n      let macros = req.body.macros;\n      let weeklyPlan = req.body.weeklyPlan;\n\n      // Always fetch or create diet plan\n      let dietPlan = await storage.getUserDietPlan(userId);\n      \n      if (!macros && !weeklyPlan) {\n        if (!dietPlan || (!dietPlan.macros && !dietPlan.weeklyPlan)) {\n          return res.status(400).json({ message: \"Diet plan data not available\" });\n        }\n        macros = dietPlan.macros;\n        weeklyPlan = dietPlan.weeklyPlan;\n      } else {\n        // If macros/weeklyPlan provided in request, create/update diet plan with new data\n        if (dietPlan) {\n          await storage.updateDietPlan(dietPlan.id, {\n            macros,\n            weeklyPlan\n          });\n        } else {\n          const dietPlanData = insertDietPlanSchema.parse({\n            userId,\n            macros,\n            weeklyPlan\n          });\n          dietPlan = await storage.createDietPlan(dietPlanData);\n        }\n      }\n\n      // Generate PDF\n      const { generateDietChartPDF } = await import('./pdfGenerator');\n      const pdfBuffer = await generateDietChartPDF({\n        customerName: customer.name || 'Patient',\n        customerId: userId,\n        macros,\n        weeklyPlan,\n        nutritionistName: req.user.claims.name,\n        generatedDate: new Date()\n      });\n\n      // Upload to object storage\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = await objectStorageService.uploadBufferToPrivateDir(\n        pdfBuffer,\n        `diet-chart-${userId}.pdf`,\n        'application/pdf'\n      );\n\n      // Set ACL with patient as owner\n      const normalizedPath = await objectStorageService.trySetObjectEntityAclPolicy(objectPath, {\n        owner: userId,\n        visibility: \"private\"\n      });\n\n      // Update diet plan with PDF URL (dietPlan is now always defined)\n      await storage.updateDietPlan(dietPlan.id, {\n        pdfUrl: normalizedPath\n      });\n\n      // Create document record\n      const documentData = insertDocumentSchema.parse({\n        userId,\n        stage: 4,\n        label: 'Generated Diet Chart',\n        url: normalizedPath,\n        uploadedByRole: staffRole\n      });\n      const document = await storage.createDocument(documentData);\n\n      // Log activity\n      const activityData = insertStaffActivityLogSchema.parse({\n        staffId,\n        customerId: userId,\n        actionType: 'document_uploaded',\n        stage: 4,\n        description: `Generated diet chart PDF`,\n        metadata: { documentId: document.id, generated: true }\n      });\n      await storage.createStaffActivity(activityData);\n\n      res.json({ success: true, pdfUrl: normalizedPath, document });\n    } catch (error) {\n      console.error(\"Error generating diet chart PDF:\", error);\n      res.status(500).json({ message: \"Failed to generate PDF\" });\n    }\n  });\n\n  // Generate consolidated report (admin or clinical staff)\n  app.post('/api/reports/:userId/consolidated', isAuthenticated, async (req: any, res) => {\n    try {\n      const { userId } = req.params;\n      const staffId = req.user.claims.sub;\n      const staffRole = req.user.role;\n\n      // Check authorization (admin or clinical roles)\n      const authorizedRoles = ['admin', 'consultant', 'nutritionist'];\n      if (!authorizedRoles.includes(staffRole)) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      // Get customer data\n      const customer = await storage.getUserById(userId);\n      if (!customer) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n\n      // Get stage progress and documents\n      const stageProgresses = await storage.getUserStageProgress(userId);\n      const documents = await storage.getUserDocuments(userId);\n      const dietPlan = await storage.getUserDietPlan(userId);\n      const acknowledgements = await storage.getAcknowledgementsByCustomer(userId);\n\n      // Build stages data\n      const stages = stageProgresses.map(stage => ({\n        stage: stage.stage,\n        status: stage.status,\n        completedAt: stage.completedAt || undefined,\n        documents: documents\n          .filter(doc => doc.stage === stage.stage)\n          .map(doc => ({\n            label: doc.label,\n            url: doc.url,\n            uploadedAt: doc.uploadedAt || new Date()\n          }))\n      }));\n\n      // Generate consolidated report PDF\n      const { generateConsolidatedReportPDF } = await import('./pdfGenerator');\n      const pdfBuffer = await generateConsolidatedReportPDF({\n        customerName: customer.name || 'Patient',\n        customerId: userId,\n        stages,\n        dietPlan: dietPlan ? {\n          macros: dietPlan.macros,\n          weeklyPlan: dietPlan.weeklyPlan\n        } : undefined,\n        acknowledgements: acknowledgements.map(ack => ({\n          taskType: ack.taskType,\n          status: ack.status,\n          createdAt: ack.createdAt || new Date()\n        }))\n      });\n\n      // Upload to object storage\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = await objectStorageService.uploadBufferToPrivateDir(\n        pdfBuffer,\n        `consolidated-report-${userId}.pdf`,\n        'application/pdf'\n      );\n\n      // Set ACL with patient as owner\n      const normalizedPath = await objectStorageService.trySetObjectEntityAclPolicy(objectPath, {\n        owner: userId,\n        visibility: \"private\"\n      });\n\n      // Create document record as consolidated report\n      const documentData = insertDocumentSchema.parse({\n        userId,\n        stage: 6, // Use stage 6 for consolidated reports\n        label: 'Consolidated Clinical Report',\n        url: normalizedPath,\n        uploadedByRole: staffRole\n      });\n      const document = await storage.createDocument(documentData);\n\n      // Log activity\n      const activityData = insertStaffActivityLogSchema.parse({\n        staffId,\n        customerId: userId,\n        actionType: 'document_uploaded',\n        stage: 6,\n        description: `Generated consolidated clinical report`,\n        metadata: { documentId: document.id, consolidated: true }\n      });\n      await storage.createStaffActivity(activityData);\n\n      res.json({ success: true, pdfUrl: normalizedPath, document });\n    } catch (error) {\n      console.error(\"Error generating consolidated report:\", error);\n      res.status(500).json({ message: \"Failed to generate consolidated report\" });\n    }\n  });\n\n  // ========================================\n  // CHEF ROUTES\n  // ========================================\n  \n  // Get all active plans (both Clinical and AI)\n  app.get('/api/chef/active-plans', isAuthenticated, isChef, async (req: any, res) => {\n    try {\n      // Get all users with active plans\n      const allCustomers = await storage.getCustomers();\n      \n      const activePlans = await Promise.all(\n        allCustomers.map(async (customer) => {\n          const plan = await storage.getUserPlan(customer.id);\n          const addresses = await storage.getUserAddresses(customer.id);\n          const dietPlan = await storage.getUserDietPlan(customer.id);\n          \n          return {\n            customer,\n            plan,\n            addresses,\n            dietPlan\n          };\n        })\n      );\n      \n      // Filter only active plans\n      res.json(activePlans.filter(p => p.plan?.isActive));\n    } catch (error) {\n      console.error(\"Error fetching active plans:\", error);\n      res.status(500).json({ message: \"Failed to fetch active plans\" });\n    }\n  });\n\n  // Mark meal as prepared\n  app.post('/api/chef/mark-prepared', isAuthenticated, isChef, async (req: any, res) => {\n    try {\n      const staffId = req.user.claims.sub;\n      const { userId, mealType, date } = req.body;\n      \n      // Validate and log activity\n      const activityData = insertStaffActivityLogSchema.parse({\n        staffId,\n        customerId: userId,\n        actionType: 'meal_prepared',\n        description: `Marked ${mealType} as prepared for ${date}`,\n        metadata: { mealType, date }\n      });\n      \n      await storage.createStaffActivity(activityData);\n      \n      // Auto-create order for delivery (delivery sync logic)\n      const customer = await storage.getUser(userId);\n      const addresses = await storage.getUserAddresses(userId);\n      const primaryAddress = addresses.find(a => a.isPrimary) || addresses[0];\n      \n      if (customer && primaryAddress) {\n        // Check if order already exists for this date (any status)\n        const existingOrders = await storage.getOrdersByUserId(userId);\n        const orderExists = existingOrders.some(order => {\n          const orderDate = new Date(order.deliveryDate).toDateString();\n          const requestDate = new Date(date).toDateString();\n          return orderDate === requestDate;\n        });\n        \n        if (!orderExists) {\n          const orderData = insertOrderSchema.parse({\n            userId,\n            deliveryDate: new Date(date),\n            deliveryAddress: `${primaryAddress.street}, ${primaryAddress.city}, ${primaryAddress.state} ${primaryAddress.zipCode}`,\n            status: 'prepared'\n          });\n          \n          await storage.createOrder(orderData);\n        }\n      } else if (customer && !primaryAddress) {\n        console.warn(`Chef marked meal prepared for user ${userId}, but user has no delivery address. Order not created.`);\n      }\n      \n      res.json({ success: true });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      console.error(\"Error marking meal as prepared:\", error);\n      res.status(500).json({ message: \"Failed to mark meal as prepared\" });\n    }\n  });\n\n  // ========================================\n  // DELIVERY ROUTES\n  // ========================================\n  \n  // Get assigned deliveries\n  app.get('/api/delivery/assigned', isAuthenticated, isDelivery, async (req: any, res) => {\n    try {\n      const deliveryPersonId = req.user.claims.sub;\n      \n      // Get orders assigned to this delivery person (both prepared and in_transit)\n      const preparedOrders = await storage.getOrdersByStatus('prepared');\n      const inTransitOrders = await storage.getOrdersByStatus('in_transit');\n      const allOrders = [...preparedOrders, ...inTransitOrders];\n      const assignedOrders = allOrders.filter(o => o.assignedDeliveryPersonId === deliveryPersonId);\n      \n      res.json(assignedOrders);\n    } catch (error) {\n      console.error(\"Error fetching assigned deliveries:\", error);\n      res.status(500).json({ message: \"Failed to fetch deliveries\" });\n    }\n  });\n\n  // Update delivery status\n  app.patch('/api/delivery/status/:orderId', isAuthenticated, isDelivery, async (req: any, res) => {\n    try {\n      const { orderId } = req.params;\n      const deliveryPersonId = req.user.claims.sub;\n      \n      const order = await storage.updateOrderStatus(orderId, req.body.status);\n      \n      if (order && req.body.status === 'delivered') {\n        const activityData = insertStaffActivityLogSchema.parse({\n          staffId: deliveryPersonId,\n          customerId: order.userId,\n          actionType: 'delivery_completed',\n          description: `Delivered order ${orderId}`,\n          metadata: { orderId, deliveredAt: new Date() }\n        });\n        await storage.createStaffActivity(activityData);\n      }\n      \n      res.json(order);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      console.error(\"Error updating delivery status:\", error);\n      res.status(500).json({ message: \"Failed to update status\" });\n    }\n  });\n\n  // Update delivery location (GPS tracking)\n  app.post('/api/delivery/location', isAuthenticated, isDelivery, async (req: any, res) => {\n    try {\n      const deliveryPersonId = req.user.claims.sub;\n      \n      const locationData = insertDeliveryLocationSchema.parse({\n        deliveryPersonId,\n        latitude: req.body.latitude,\n        longitude: req.body.longitude,\n        status: req.body.status || 'on_duty'\n      });\n      \n      const location = await storage.upsertDeliveryLocation(locationData);\n      \n      res.json(location);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid location data\", errors: error.errors });\n      }\n      console.error(\"Error updating delivery location:\", error);\n      res.status(500).json({ message: \"Failed to update location\" });\n    }\n  });\n\n  // ========================================\n  // ACKNOWLEDGEMENT ROUTES (All Clinical Staff)\n  // ========================================\n  \n  // Create acknowledgement\n  app.post('/api/acknowledgements', isAuthenticated, async (req: any, res) => {\n    try {\n      const staffId = req.user.claims.sub;\n      \n      const ackData = insertAcknowledgementSchema.parse({\n        staffId,\n        customerId: req.body.customerId,\n        taskType: req.body.taskType,\n        stage: req.body.stage,\n        status: req.body.status || 'pending',\n        acknowledgedAt: new Date()\n      });\n      \n      const ack = await storage.createAcknowledgement(ackData);\n      \n      // Log activity\n      const activityData = insertStaffActivityLogSchema.parse({\n        staffId,\n        customerId: ackData.customerId,\n        actionType: 'task_acknowledged',\n        stage: ackData.stage,\n        description: `Acknowledged task: ${ackData.taskType}`,\n        metadata: { acknowledgementId: ack.id }\n      });\n      \n      await storage.createStaffActivity(activityData);\n      \n      res.json(ack);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid acknowledgement data\", errors: error.errors });\n      }\n      console.error(\"Error creating acknowledgement:\", error);\n      res.status(500).json({ message: \"Failed to create acknowledgement\" });\n    }\n  });\n\n  // Update acknowledgement status\n  app.patch('/api/acknowledgements/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const staffId = req.user.claims.sub;\n      const { id } = req.params;\n      \n      // Validate status field\n      const statusSchema = z.enum(['pending', 'acknowledged', 'completed']);\n      const status = statusSchema.parse(req.body.status);\n      \n      const updates: { status: 'pending' | 'acknowledged' | 'completed'; acknowledgedAt?: Date } = {\n        status\n      };\n      \n      // Set acknowledgedAt only when status becomes 'acknowledged' or 'completed'\n      if (status === 'acknowledged' || status === 'completed') {\n        updates.acknowledgedAt = new Date();\n      }\n      \n      const ack = await storage.updateAcknowledgement(id, updates);\n      \n      if (!ack) {\n        return res.status(404).json({ message: \"Acknowledgement not found\" });\n      }\n      \n      // Log activity\n      const activityData = insertStaffActivityLogSchema.parse({\n        staffId,\n        customerId: ack.customerId,\n        actionType: 'task_acknowledged',\n        stage: ack.stage,\n        description: `Updated task status: ${ack.taskType} to ${status}`,\n        metadata: { acknowledgementId: ack.id, status }\n      });\n      await storage.createStaffActivity(activityData);\n      \n      res.json(ack);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      console.error(\"Error updating acknowledgement:\", error);\n      res.status(500).json({ message: \"Failed to update acknowledgement\" });\n    }\n  });\n\n  // Get staff acknowledgements\n  app.get('/api/acknowledgements/staff', isAuthenticated, async (req: any, res) => {\n    try {\n      const staffId = req.user.claims.sub;\n      const acknowledgements = await storage.getStaffAcknowledgements(staffId);\n      res.json(acknowledgements);\n    } catch (error) {\n      console.error(\"Error fetching acknowledgements:\", error);\n      res.status(500).json({ message: \"Failed to fetch acknowledgements\" });\n    }\n  });\n\n  // Get all acknowledgements (admin only)\n  app.get('/api/admin/acknowledgements', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const acknowledgements = await storage.getAllAcknowledgements();\n      res.json(acknowledgements);\n    } catch (error) {\n      console.error(\"Error fetching all acknowledgements:\", error);\n      res.status(500).json({ message: \"Failed to fetch acknowledgements\" });\n    }\n  });\n\n  // ========================================\n  // STAFF ACTIVITY LOG ROUTES\n  // ========================================\n  \n  // Get staff activities (own activities)\n  app.get('/api/activities/staff', isAuthenticated, async (req: any, res) => {\n    try {\n      const staffId = req.user.claims.sub;\n      const activities = await storage.getStaffActivities(staffId);\n      res.json(activities);\n    } catch (error) {\n      console.error(\"Error fetching staff activities:\", error);\n      res.status(500).json({ message: \"Failed to fetch activities\" });\n    }\n  });\n\n  // Get all staff activities (admin only)\n  app.get('/api/admin/activities', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const activities = await storage.getAllStaffActivities();\n      res.json(activities);\n    } catch (error) {\n      console.error(\"Error fetching all activities:\", error);\n      res.status(500).json({ message: \"Failed to fetch activities\" });\n    }\n  });\n\n  // Get customer activities (admin only)\n  app.get('/api/admin/activities/:customerId', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const { customerId } = req.params;\n      const activities = await storage.getCustomerActivities(customerId);\n      res.json(activities);\n    } catch (error) {\n      console.error(\"Error fetching customer activities:\", error);\n      res.status(500).json({ message: \"Failed to fetch activities\" });\n    }\n  });\n\n  // ========================================\n  // ADMIN - DELIVERY TRACKING ROUTES\n  // ========================================\n  \n  // Get all delivery locations (admin only)\n  app.get('/api/admin/delivery-locations', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const locations = await storage.getAllDeliveryLocations();\n      res.json(locations);\n    } catch (error) {\n      console.error(\"Error fetching delivery locations:\", error);\n      res.status(500).json({ message: \"Failed to fetch locations\" });\n    }\n  });\n\n  // Get staff by role (admin only)\n  app.get('/api/admin/staff/:role', isAuthenticated, isAdmin, async (req: any, res) => {\n    try {\n      const { role } = req.params;\n      const staff = await storage.getStaffByRole(role);\n      res.json(staff);\n    } catch (error) {\n      console.error(\"Error fetching staff by role:\", error);\n      res.status(500).json({ message: \"Failed to fetch staff\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":66375},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/pages/AIPlan.tsx":{"content":"import { Header } from '@/components/Header';\nimport { Footer } from '@/components/Footer';\nimport { QuizQuestion } from '@/components/QuizQuestion';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Slider } from '@/components/ui/slider';\nimport { useState } from 'react';\nimport { CheckCircle2, Sparkles, PartyPopper } from 'lucide-react';\nimport { Link } from 'wouter';\n\nconst quizSections = [\n  {\n    section: 'Basic Profile',\n    cheerMessage: \"Great start! Every answer helps us build the perfect plan just for you 💪\",\n    questions: [\n      {\n        question: \"What's your age group?\",\n        type: 'choice',\n        options: [\n          { value: 'under-18', label: 'Under 18', icon: '👶' },\n          { value: '18-25', label: '18–25', icon: '🧑' },\n          { value: '26-35', label: '26–35', icon: '👨' },\n          { value: '36-45', label: '36–45', icon: '👴' },\n          { value: '46+', label: '46+', icon: '👵' },\n        ],\n      },\n      {\n        question: \"What's your gender?\",\n        type: 'choice',\n        options: [\n          { value: 'male', label: 'Male', icon: '👨' },\n          { value: 'female', label: 'Female', icon: '👩' },\n          { value: 'other', label: 'Other / Prefer not to say', icon: '🙂' },\n        ],\n      },\n      {\n        question: \"What's your current weight (kg)?\",\n        type: 'input',\n        inputType: 'number',\n        placeholder: 'Enter your weight in kg',\n      },\n      {\n        question: \"What's your height (cm)?\",\n        type: 'input',\n        inputType: 'number',\n        placeholder: 'Enter your height in cm',\n      },\n    ],\n  },\n  {\n    section: 'Health & Lifestyle',\n    cheerMessage: \"Awesome! You're one step closer to achieving your health goals 🚀\",\n    questions: [\n      {\n        question: \"What's your primary goal?\",\n        type: 'choice',\n        options: [\n          { value: 'lose-weight', label: 'Lose weight', icon: '🎯' },\n          { value: 'gain-muscle', label: 'Gain muscle', icon: '💪' },\n          { value: 'maintain-weight', label: 'Maintain weight', icon: '⚖️' },\n          { value: 'improve-health', label: 'Improve overall health', icon: '❤️' },\n        ],\n      },\n      {\n        question: 'How active are you on a daily basis?',\n        type: 'choice',\n        options: [\n          { value: 'sedentary', label: 'Sedentary (little to no exercise)', icon: '🪑' },\n          { value: 'light', label: 'Light activity (1–2 workouts/week)', icon: '🚶' },\n          { value: 'moderate', label: 'Moderate activity (3–5 workouts/week)', icon: '🏃' },\n          { value: 'very-active', label: 'Very active (6–7 workouts/week)', icon: '🔥' },\n        ],\n      },\n      {\n        question: 'Do you have any of these health concerns?',\n        type: 'choice',\n        options: [\n          { value: 'diabetes', label: 'Diabetes', icon: '🩺' },\n          { value: 'high-bp', label: 'High blood pressure', icon: '💉' },\n          { value: 'high-cholesterol', label: 'High cholesterol', icon: '🫀' },\n          { value: 'pcos', label: 'PCOS / Hormonal issues', icon: '🔬' },\n          { value: 'none', label: 'None', icon: '✅' },\n        ],\n      },\n      {\n        question: 'Do you take any regular medications?',\n        type: 'choice',\n        options: [\n          { value: 'yes', label: 'Yes', icon: '💊' },\n          { value: 'no', label: 'No', icon: '✅' },\n        ],\n      },\n    ],\n  },\n  {\n    section: 'Food Preferences',\n    cheerMessage: \"Noted! We'll make sure your meals are safe and tasty 🌱🍲\",\n    questions: [\n      {\n        question: \"What's your dietary preference?\",\n        type: 'choice',\n        options: [\n          { value: 'vegetarian', label: 'Vegetarian', icon: '🥗' },\n          { value: 'vegan', label: 'Vegan', icon: '🌱' },\n          { value: 'eggetarian', label: 'Eggetarian', icon: '🥚' },\n          { value: 'non-veg', label: 'Non-vegetarian', icon: '🍗' },\n          { value: 'keto', label: 'Keto / Low-carb', icon: '🥑' },\n        ],\n      },\n      {\n        question: 'Any allergies or foods to avoid?',\n        type: 'choice',\n        options: [\n          { value: 'dairy', label: 'Dairy', icon: '🥛' },\n          { value: 'gluten', label: 'Gluten', icon: '🌾' },\n          { value: 'nuts', label: 'Nuts', icon: '🥜' },\n          { value: 'shellfish', label: 'Shellfish', icon: '🦐' },\n          { value: 'soy', label: 'Soy', icon: '🫘' },\n          { value: 'none', label: 'None', icon: '✅' },\n        ],\n      },\n      {\n        question: 'How many meals do you prefer per day?',\n        type: 'choice',\n        options: [\n          { value: '3-meals', label: '3 (Breakfast, Lunch, Dinner)', icon: '🍽️' },\n          { value: '4-5-meals', label: '4–5 small meals/snacks', icon: '🥗' },\n          { value: 'flexible', label: \"Flexible, I don't mind\", icon: '😊' },\n        ],\n      },\n      {\n        question: 'Do you prefer spicy, mild, or balanced flavors?',\n        type: 'choice',\n        options: [\n          { value: 'spicy', label: 'Spicy 🌶️', icon: '🌶️' },\n          { value: 'mild', label: 'Mild 🌸', icon: '🌸' },\n          { value: 'balanced', label: 'Balanced 🍴', icon: '🍴' },\n        ],\n      },\n    ],\n  },\n  {\n    section: 'Habits & Routine',\n    cheerMessage: \"We're building your lifestyle-friendly plan – you're doing amazing 👏\",\n    questions: [\n      {\n        question: 'When do you usually wake up?',\n        type: 'input',\n        inputType: 'time',\n        placeholder: 'Select wake up time',\n      },\n      {\n        question: 'When do you usually sleep?',\n        type: 'input',\n        inputType: 'time',\n        placeholder: 'Select sleep time',\n      },\n      {\n        question: 'Do you usually eat late at night?',\n        type: 'choice',\n        options: [\n          { value: 'yes', label: 'Yes', icon: '🌙' },\n          { value: 'no', label: 'No', icon: '🌞' },\n        ],\n      },\n      {\n        question: 'Do you consume alcohol?',\n        type: 'choice',\n        options: [\n          { value: 'never', label: 'Never', icon: '🚫' },\n          { value: 'occasionally', label: 'Occasionally', icon: '🍷' },\n          { value: 'regularly', label: 'Regularly', icon: '🍺' },\n        ],\n      },\n      {\n        question: 'How much water do you drink daily?',\n        type: 'choice',\n        options: [\n          { value: 'less-1l', label: 'Less than 1L', icon: '💧' },\n          { value: '1-2l', label: '1–2L', icon: '💧💧' },\n          { value: '2-3l', label: '2–3L', icon: '💧💧💧' },\n          { value: '3l+', label: '3L+', icon: '💧💧💧💧' },\n        ],\n      },\n    ],\n  },\n  {\n    section: 'Personalization',\n    cheerMessage: \"Fantastic! 🎉 Your personalized plan is ready. Get ready to enjoy meals designed exactly for your body and goals.\",\n    questions: [\n      {\n        question: 'Do you want to include snacks & desserts in your plan?',\n        type: 'choice',\n        options: [\n          { value: 'yes', label: 'Yes', icon: '🍪' },\n          { value: 'no', label: 'No', icon: '🚫' },\n        ],\n      },\n      {\n        question: \"What's your food budget per day (₹)?\",\n        type: 'slider',\n        min: 100,\n        max: 1000,\n        step: 50,\n        defaultValue: 300,\n      },\n      {\n        question: 'How soon do you want to see results?',\n        type: 'choice',\n        options: [\n          { value: '2-4-weeks', label: '2–4 weeks', icon: '⚡' },\n          { value: '1-3-months', label: '1–3 months', icon: '📅' },\n          { value: '3-6-months', label: '3–6 months', icon: '📆' },\n          { value: 'long-term', label: 'Long-term lifestyle', icon: '🌟' },\n        ],\n      },\n    ],\n  },\n];\n\nexport default function AIPlan() {\n  const [currentSectionIndex, setCurrentSectionIndex] = useState(0);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState<Record<string, string>>({});\n  const [showCheer, setShowCheer] = useState(false);\n  const [showResults, setShowResults] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [sliderValue, setSliderValue] = useState<number[]>([300]);\n\n  const currentSection = quizSections[currentSectionIndex];\n  const currentQuestion = currentSection.questions[currentQuestionIndex];\n  const totalQuestions = quizSections.reduce((sum, section) => sum + section.questions.length, 0);\n  const answeredQuestions = Object.keys(answers).length;\n\n  const handleNext = (answer: string) => {\n    const questionId = `${currentSectionIndex}-${currentQuestionIndex}`;\n    setAnswers({ ...answers, [questionId]: answer });\n    setInputValue('');\n    \n    if (currentQuestionIndex < currentSection.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      setShowCheer(true);\n      console.log('Section completed:', currentSection.section);\n    }\n  };\n\n  const handleContinueAfterCheer = () => {\n    setShowCheer(false);\n    \n    if (currentSectionIndex < quizSections.length - 1) {\n      setCurrentSectionIndex(currentSectionIndex + 1);\n      setCurrentQuestionIndex(0);\n    } else {\n      setShowResults(true);\n      console.log('Quiz completed. All answers:', answers);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-1\">\n        <section className=\"py-16 md:py-24\">\n          <div className=\"container mx-auto px-4 md:px-6\">\n            {!showResults ? (\n              <div className=\"space-y-12\">\n                <div className=\"text-center space-y-4 max-w-3xl mx-auto\">\n                  <div className=\"inline-flex items-center gap-2 bg-primary/10 text-primary px-4 py-2 rounded-full\">\n                    <Sparkles className=\"h-5 w-5\" />\n                    <span className=\"text-sm font-semibold\">AI-Powered Meal Planning</span>\n                  </div>\n                  <h1 className=\"font-display text-3xl md:text-4xl lg:text-5xl font-bold\" data-testid=\"text-ai-plan-title\">\n                    Let's Create Your Perfect Meal Plan\n                  </h1>\n                  <p className=\"text-lg text-muted-foreground\" data-testid=\"text-ai-plan-subtitle\">\n                    Answer a few questions and our AI will design a personalized nutrition plan just for you\n                  </p>\n                </div>\n\n                {!showCheer ? (\n                  <div className=\"max-w-2xl mx-auto space-y-8\">\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n                        <span data-testid=\"text-quiz-progress\">\n                          Question {answeredQuestions + 1} of {totalQuestions}\n                        </span>\n                        <span data-testid=\"text-section-name\">{currentSection.section}</span>\n                      </div>\n                      <div className=\"w-full bg-muted rounded-full h-2\">\n                        <div\n                          className=\"bg-primary h-2 rounded-full transition-all\"\n                          style={{ width: `${(answeredQuestions / totalQuestions) * 100}%` }}\n                          data-testid=\"progress-quiz\"\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-6\">\n                      <h2 className=\"font-display text-2xl md:text-3xl font-semibold\" data-testid=\"text-quiz-question\">\n                        {currentQuestion.question}\n                      </h2>\n\n                      {currentQuestion.type === 'choice' && (\n                        <div className=\"grid gap-3\">\n                          {currentQuestion.options?.map((option) => (\n                            <Card\n                              key={option.value}\n                              className=\"p-4 cursor-pointer hover-elevate transition-all\"\n                              onClick={() => handleNext(option.value)}\n                              data-testid={`card-option-${option.value}`}\n                            >\n                              <div className=\"flex items-center gap-3\">\n                                {option.icon && <span className=\"text-2xl\">{option.icon}</span>}\n                                <span className=\"font-medium\">{option.label}</span>\n                              </div>\n                            </Card>\n                          ))}\n                        </div>\n                      )}\n\n                      {currentQuestion.type === 'input' && 'inputType' in currentQuestion && (\n                        <div className=\"space-y-4\">\n                          <Input\n                            type={currentQuestion.inputType}\n                            placeholder={currentQuestion.placeholder}\n                            value={inputValue}\n                            onChange={(e) => setInputValue(e.target.value)}\n                            className=\"text-lg\"\n                            data-testid=\"input-quiz-answer\"\n                          />\n                          <Button\n                            size=\"lg\"\n                            className=\"w-full\"\n                            onClick={() => handleNext(inputValue)}\n                            disabled={!inputValue}\n                            data-testid=\"button-quiz-next\"\n                          >\n                            Continue\n                          </Button>\n                        </div>\n                      )}\n\n                      {currentQuestion.type === 'slider' && 'min' in currentQuestion && (\n                        <div className=\"space-y-6\">\n                          <div className=\"space-y-4\">\n                            <Label className=\"text-lg\">₹{sliderValue[0]} per day</Label>\n                            <Slider\n                              min={currentQuestion.min}\n                              max={currentQuestion.max}\n                              step={currentQuestion.step}\n                              value={sliderValue}\n                              onValueChange={setSliderValue}\n                              data-testid=\"slider-budget\"\n                            />\n                            <div className=\"flex justify-between text-sm text-muted-foreground\">\n                              <span>₹{currentQuestion.min}</span>\n                              <span>₹{currentQuestion.max}</span>\n                            </div>\n                          </div>\n                          <Button\n                            size=\"lg\"\n                            className=\"w-full\"\n                            onClick={() => handleNext(sliderValue[0].toString())}\n                            data-testid=\"button-quiz-next\"\n                          >\n                            Continue\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"max-w-2xl mx-auto\">\n                    <Card className=\"border-primary/50 bg-primary/5\">\n                      <CardContent className=\"p-8 md:p-12 text-center space-y-6\">\n                        <div className=\"flex justify-center\">\n                          <div className=\"flex h-16 w-16 items-center justify-center rounded-full bg-primary text-primary-foreground\">\n                            <PartyPopper className=\"h-8 w-8\" />\n                          </div>\n                        </div>\n                        <p className=\"text-xl font-semibold\" data-testid=\"text-cheer-message\">\n                          {currentSection.cheerMessage}\n                        </p>\n                        <Button\n                          size=\"lg\"\n                          onClick={handleContinueAfterCheer}\n                          data-testid=\"button-continue-section\"\n                        >\n                          Continue to Next Section\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  </div>\n                )}\n              </div>\n            ) : (\n              <div className=\"max-w-3xl mx-auto space-y-8\">\n                <Card className=\"border-primary/50 bg-primary/5\">\n                  <CardContent className=\"p-8 space-y-6\">\n                    <div className=\"flex items-center gap-3 text-primary\">\n                      <div className=\"flex h-12 w-12 items-center justify-center rounded-full bg-primary text-primary-foreground\">\n                        <CheckCircle2 className=\"h-6 w-6\" />\n                      </div>\n                      <h2 className=\"font-display text-2xl font-semibold\" data-testid=\"text-plan-ready\">\n                        Your AI Meal Plan is Ready!\n                      </h2>\n                    </div>\n                    \n                    <div className=\"space-y-4\">\n                      <p className=\"text-muted-foreground\" data-testid=\"text-plan-description\">\n                        Based on your responses, we've created a personalized meal plan tailored to your goals, preferences, and lifestyle.\n                      </p>\n                      \n                      <div className=\"grid md:grid-cols-2 gap-4 py-4\">\n                        <div className=\"space-y-2\">\n                          <p className=\"text-sm text-muted-foreground\">Weekly Plan Price</p>\n                          <p className=\"font-mono text-2xl font-semibold\" data-testid=\"text-pricing\">₹1,299/week</p>\n                        </div>\n                        <div className=\"space-y-2\">\n                          <p className=\"text-sm text-muted-foreground\">Daily Calories</p>\n                          <p className=\"font-mono text-2xl font-semibold\" data-testid=\"text-calories-target\">1,800 kcal</p>\n                        </div>\n                      </div>\n\n                      <ul className=\"space-y-2\">\n                        <li className=\"flex items-center gap-2\">\n                          <CheckCircle2 className=\"h-5 w-5 text-primary\" />\n                          <span className=\"text-sm\">3 meals + 1 snack daily</span>\n                        </li>\n                        <li className=\"flex items-center gap-2\">\n                          <CheckCircle2 className=\"h-5 w-5 text-primary\" />\n                          <span className=\"text-sm\">Customized to your dietary preferences</span>\n                        </li>\n                        <li className=\"flex items-center gap-2\">\n                          <CheckCircle2 className=\"h-5 w-5 text-primary\" />\n                          <span className=\"text-sm\">Fresh meals delivered daily</span>\n                        </li>\n                      </ul>\n                    </div>\n\n                    <div className=\"flex flex-col sm:flex-row gap-3 pt-4\">\n                      <Link href=\"/auth/login?redirect=/checkout\" className=\"flex-1\">\n                        <Button size=\"lg\" className=\"w-full\" data-testid=\"button-proceed-checkout\">\n                          Proceed to Checkout\n                        </Button>\n                      </Link>\n                      <Button size=\"lg\" variant=\"outline\" className=\"flex-1\" onClick={() => {\n                        setCurrentSectionIndex(0);\n                        setCurrentQuestionIndex(0);\n                        setAnswers({});\n                        setShowResults(false);\n                      }} data-testid=\"button-retake-quiz\">\n                        Retake Quiz\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </div>\n        </section>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":20014},"client/src/pages/ConsultationBooking.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { Header } from '@/components/Header';\nimport { Footer } from '@/components/Footer';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Calendar as CalendarIcon, Clock, User, ArrowRight, CheckCircle2 } from 'lucide-react';\nimport { format, addDays, isBefore, startOfDay } from 'date-fns';\nimport { Calendar } from '@/components/ui/calendar';\n\nconst doctors = [\n  { id: '1', name: 'Dr. Priya Sharma', specialty: 'Clinical Nutritionist', slots: ['10:00 AM', '11:30 AM', '02:00 PM', '03:30 PM', '05:00 PM'] },\n  { id: '2', name: 'Dr. Rajesh Kumar', specialty: 'Endocrinologist', slots: ['09:00 AM', '10:30 AM', '01:00 PM', '02:30 PM', '04:00 PM'] },\n  { id: '3', name: 'Dr. Anjali Mehta', specialty: 'Dietitian & Wellness Coach', slots: ['10:00 AM', '12:00 PM', '02:00 PM', '04:00 PM', '05:30 PM'] },\n];\n\nconst CONSULTATION_FEE = 1999;\n\nexport default function ConsultationBooking() {\n  const [, navigate] = useLocation();\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>();\n  const [selectedTime, setSelectedTime] = useState<string>('');\n  const [selectedDoctor, setSelectedDoctor] = useState(doctors[0]);\n\n  const minDate = addDays(new Date(), 1);\n\n  const isDateDisabled = (date: Date) => {\n    return isBefore(startOfDay(date), startOfDay(minDate));\n  };\n\n  const handleContinue = () => {\n    if (!selectedDate || !selectedTime) {\n      return;\n    }\n\n    const bookingData = {\n      planType: 'clinical',\n      date: format(selectedDate, 'yyyy-MM-dd'),\n      time: selectedTime,\n      doctorName: selectedDoctor.name,\n    };\n\n    localStorage.setItem('consultationData', JSON.stringify(bookingData));\n    navigate('/signup-character');\n  };\n\n  const canContinue = selectedDate && selectedTime;\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-gradient-to-b from-blue-50/30 via-white to-emerald-50/20\">\n      <Header />\n      <main className=\"flex-1 py-12 md:py-16\">\n        <div className=\"container mx-auto px-4 md:px-6\">\n          <div className=\"max-w-6xl mx-auto space-y-8\">\n            <div className=\"text-center space-y-3\">\n              <h1 className=\"font-display text-3xl md:text-4xl font-bold\" data-testid=\"text-booking-title\">\n                Book Your Consultation\n              </h1>\n              <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\" data-testid=\"text-booking-subtitle\">\n                Schedule your first appointment with our expert medical team\n              </p>\n            </div>\n\n            <div className=\"grid lg:grid-cols-3 gap-6\">\n              <div className=\"lg:col-span-2 space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <User className=\"h-5 w-5 text-primary\" />\n                      Select Doctor\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid sm:grid-cols-2 gap-3\">\n                      {doctors.map((doctor) => (\n                        <button\n                          key={doctor.id}\n                          onClick={() => {\n                            setSelectedDoctor(doctor);\n                            setSelectedTime('');\n                          }}\n                          className={`p-4 rounded-lg border-2 text-left transition-all hover-elevate ${\n                            selectedDoctor.id === doctor.id\n                              ? 'border-primary bg-primary/5'\n                              : 'border-border'\n                          }`}\n                          data-testid={`button-doctor-${doctor.id}`}\n                        >\n                          <div className=\"font-semibold\">{doctor.name}</div>\n                          <div className=\"text-sm text-muted-foreground\">{doctor.specialty}</div>\n                          {selectedDoctor.id === doctor.id && (\n                            <CheckCircle2 className=\"h-4 w-4 text-primary mt-2\" />\n                          )}\n                        </button>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <CalendarIcon className=\"h-5 w-5 text-primary\" />\n                      Select Date\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"flex justify-center\">\n                      <Calendar\n                        mode=\"single\"\n                        selected={selectedDate}\n                        onSelect={setSelectedDate}\n                        disabled={isDateDisabled}\n                        className=\"rounded-md border\"\n                        data-testid=\"calendar-date-picker\"\n                      />\n                    </div>\n                    {selectedDate && (\n                      <p className=\"text-sm text-muted-foreground text-center mt-4\" data-testid=\"text-selected-date\">\n                        Selected: {format(selectedDate, 'EEEE, MMMM d, yyyy')}\n                      </p>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {selectedDate && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Clock className=\"h-5 w-5 text-primary\" />\n                        Select Time Slot\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-3\">\n                        {selectedDoctor.slots.map((slot) => (\n                          <button\n                            key={slot}\n                            onClick={() => setSelectedTime(slot)}\n                            className={`p-3 rounded-lg border-2 text-sm font-medium transition-all hover-elevate ${\n                              selectedTime === slot\n                                ? 'border-primary bg-primary/5 text-primary'\n                                : 'border-border'\n                            }`}\n                            data-testid={`button-time-${slot.replace(/[: ]/g, '-')}`}\n                          >\n                            {slot}\n                          </button>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n\n              <div className=\"lg:col-span-1\">\n                <Card className=\"sticky top-4\">\n                  <CardHeader>\n                    <CardTitle>Booking Summary</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    <div className=\"space-y-3\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-muted-foreground\">Plan Type</span>\n                        <span className=\"font-medium\" data-testid=\"text-plan-type\">Clinical-Level Guided</span>\n                      </div>\n                      \n                      {selectedDoctor && (\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-muted-foreground\">Doctor</span>\n                          <span className=\"font-medium\" data-testid=\"text-selected-doctor\">{selectedDoctor.name}</span>\n                        </div>\n                      )}\n\n                      {selectedDate && (\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-muted-foreground\">Date</span>\n                          <span className=\"font-medium\" data-testid=\"text-summary-date\">\n                            {format(selectedDate, 'MMM d, yyyy')}\n                          </span>\n                        </div>\n                      )}\n\n                      {selectedTime && (\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-muted-foreground\">Time</span>\n                          <span className=\"font-medium\" data-testid=\"text-summary-time\">{selectedTime}</span>\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"border-t pt-4\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"font-semibold\">Consultation Fee</span>\n                        <span className=\"font-mono text-xl font-bold\" data-testid=\"text-consultation-fee\">\n                          ₹{CONSULTATION_FEE}\n                        </span>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground mt-1\">One-time consultation fee</p>\n                    </div>\n\n                    <Button\n                      size=\"lg\"\n                      className=\"w-full\"\n                      disabled={!canContinue}\n                      onClick={handleContinue}\n                      data-testid=\"button-continue-signup\"\n                    >\n                      Continue to Sign Up\n                      <ArrowRight className=\"ml-2 h-4 w-4\" />\n                    </Button>\n\n                    {!canContinue && (\n                      <p className=\"text-xs text-center text-muted-foreground\">\n                        Please select a date and time to continue\n                      </p>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":9952},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"design_guidelines.md":{"content":"# Design Guidelines: Premium Meal Delivery Platform\n\n## Design Approach\n\n**Reference-Based Approach** drawing inspiration from premium health and meal delivery services (HelloFresh, Factor, Trifecta) combined with modern health tech interfaces (BetterMe). The design emphasizes trust, wellness, and personalization through clean aesthetics with strategic use of food photography.\n\n**Core Principles:**\n- Health-forward visual language conveying freshness and vitality\n- Premium but approachable aesthetic balancing clinical precision with warmth\n- Clear differentiation between the two service paths (Clinical vs AI)\n- Data visualization that makes nutritional information digestible and motivating\n\n---\n\n## Color Palette\n\n### Light Mode\n- **Primary:** 142 71% 45% (Fresh green - health, vitality)\n- **Primary Hover:** 142 71% 38%\n- **Secondary:** 24 100% 50% (Warm orange - energy, appetite)\n- **Background:** 0 0% 100%\n- **Surface:** 0 0% 98%\n- **Text Primary:** 0 0% 13%\n- **Text Secondary:** 0 0% 45%\n- **Border:** 0 0% 89%\n\n### Dark Mode\n- **Primary:** 142 65% 55%\n- **Primary Hover:** 142 65% 48%\n- **Secondary:** 24 95% 60%\n- **Background:** 0 0% 9%\n- **Surface:** 0 0% 13%\n- **Text Primary:** 0 0% 95%\n- **Text Secondary:** 0 0% 65%\n- **Border:** 0 0% 23%\n\n### Accent Colors (Sparingly)\n- **Success/Health:** 142 71% 45% (matches primary)\n- **Warning/Premium:** 45 93% 47% (Gold for premium tier badges)\n- **Info/Data:** 217 91% 60% (Blue for nutritional charts)\n\n---\n\n## Typography\n\n**Font Families:**\n- **Display/Headings:** 'Plus Jakarta Sans' (Modern, friendly, health-tech feel)\n- **Body/UI:** 'Inter' (Excellent readability for data and forms)\n- **Accent/Numbers:** 'JetBrains Mono' (For nutritional data, calories)\n\n**Scale:**\n- Hero Headline: text-5xl md:text-7xl font-bold\n- Section Headers: text-3xl md:text-4xl font-semibold\n- Subsection Headers: text-xl md:text-2xl font-semibold\n- Body Large: text-lg leading-relaxed\n- Body Regular: text-base leading-relaxed\n- Small/Meta: text-sm\n- Nutritional Data: text-lg md:text-xl font-mono font-semibold\n\n---\n\n## Layout System\n\n**Spacing Primitives:** Use Tailwind units of 4, 6, 8, 12, 16, 20 consistently\n- Component padding: p-4 md:p-6 lg:p-8\n- Section vertical spacing: py-16 md:py-20 lg:py-24\n- Card spacing: p-6 md:p-8\n- Grid gaps: gap-6 md:gap-8\n\n**Container Strategy:**\n- Full-width sections with inner max-w-7xl mx-auto px-4 md:px-6\n- Content sections: max-w-6xl\n- Text content: max-w-3xl\n- Forms/Quiz: max-w-2xl\n\n**Grid Patterns:**\n- Features/Plans: grid-cols-1 md:grid-cols-2 gap-8\n- Meal cards: grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\n- Nutritional breakdown: grid-cols-2 md:grid-cols-4 gap-4\n\n---\n\n## Component Library\n\n### Navigation\n- Transparent header with backdrop-blur-md on scroll\n- Logo + primary navigation + CTA buttons (Login, Get Started)\n- Mobile: Hamburger menu with full-screen overlay\n- Sticky positioning with subtle shadow on scroll\n\n### Hero Section\n- Split layout: 60/40 text-to-image on desktop\n- Large hero image showcasing vibrant, healthy meal\n- Prominent headline with tagline\n- Two distinct CTAs: \"Premium Clinical Plan\" (primary) and \"AI-Assisted Plan\" (secondary outline)\n- Trust indicators below CTAs: \"Trusted by 10,000+ health-conscious individuals\"\n\n### Plan Comparison Cards\n- Side-by-side cards with subtle elevation (shadow-lg)\n- Icon at top (medical cross for Clinical, AI brain for AI-Assisted)\n- Clear feature lists with checkmark icons\n- Differentiated visual treatment (Clinical has subtle gold accent border)\n- \"Learn More\" CTA at bottom\n\n### Interactive Quiz (AI Path)\n- Progress bar at top showing completion (1/8, 2/8, etc.)\n- Single question per screen with smooth transitions\n- Large, tappable option buttons (min-h-16) with hover states\n- Visual icons accompanying each option\n- \"Next\" button appears after selection\n- Background with subtle meal imagery at 10% opacity\n\n### Meal Plan Display\n- Card-based layout with meal imagery\n- Nutritional badge overlay (calories, protein, carbs, fats in compact format)\n- Swap/customize button on hover\n- Weekly calendar view with day selector\n- Color-coded meal types (breakfast, lunch, dinner, snacks)\n\n### Nutritional Dashboard\n- Circular progress charts for macro tracking\n- Bar charts for weekly calorie trends\n- Card-based stat displays (protein, carbs, fats, fiber)\n- Color-coded to match brand palette (green for protein, orange for carbs, blue for fats)\n\n### Testimonials Section\n- Three-column grid on desktop, single on mobile\n- Customer photo (circular) + name + transformation metric\n- Star rating display\n- Quote in large, italic text\n- Before/after meal photos in some cards\n\n### Footer\n- Four-column layout: Company, Resources, Plans, Contact\n- Newsletter signup with inline form\n- Social media icons\n- Trust badges (organic, non-GMO, etc.)\n- Payment method icons\n\n### Forms\n- Floating label inputs with focus states\n- Clear error states with red border and helper text\n- Success states with green checkmark\n- Radio buttons and checkboxes with custom styling matching brand\n- Date/time pickers for consultation booking\n\n---\n\n## Animations\n\n**Minimal Motion Strategy:**\n- Subtle fade-in on scroll for sections (opacity 0 to 1, 400ms)\n- Smooth transitions on interactive elements (150ms ease-in-out)\n- Progress bar animations for quiz completion\n- No parallax, no elaborate scroll-triggered animations\n- Hover states: subtle scale (1.02) and shadow increase\n\n---\n\n## Images\n\n**Hero Section:** Large, high-quality image of a beautifully plated healthy meal (salmon, vegetables, quinoa) with natural lighting. Image should be 1920x1080, positioned on right side of hero split layout.\n\n**Plan Cards:** Icon-style illustrations for each plan type (medical professional for Clinical, AI chip/brain for AI-Assisted)\n\n**Meal Cards:** High-quality food photography showing variety of meals from different angles. Each meal should look fresh, colorful, and appetizing. Minimum 800x600 resolution.\n\n**Testimonials:** Customer headshots (circular crop, 120x120) and optional before/after meal selection images\n\n**Process Steps (Clinical Path):** Illustrated icons or photos showing: consultation, test kit, report, nutritionist meeting, meal delivery\n\n**Dashboard:** Chart visualizations using libraries (Chart.js or Recharts), meal thumbnail images in calendar view\n\n**Trust Indicators:** Logo badges for certifications (organic, nutritionist-approved, etc.)\n\nThis design creates a premium, health-forward experience that balances clinical precision with approachable warmth, using strategic imagery and clean layouts to build trust and drive conversions.","size_bytes":6628},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport { AuthenticatedLayout } from \"@/components/AuthenticatedLayout\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Home from \"@/pages/Home\";\nimport Plans from \"@/pages/Plans\";\nimport AIPlan from \"@/pages/AIPlan\";\nimport ClinicalPlan from \"@/pages/ClinicalPlan\";\nimport ConsultationBooking from \"@/pages/ConsultationBooking\";\nimport SignupCharacter from \"@/pages/SignupCharacter\";\nimport DummyPayment from \"@/pages/DummyPayment\";\nimport PaymentSuccess from \"@/pages/PaymentSuccess\";\nimport Profile from \"@/pages/Profile\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Admin from \"@/pages/Admin\";\nimport Kitchen from \"@/pages/Kitchen\";\nimport Delivery from \"@/pages/Delivery\";\nimport ConsultantPanel from \"@/pages/ConsultantPanel\";\nimport LabTechnicianPanel from \"@/pages/LabTechnicianPanel\";\nimport NutritionistPanel from \"@/pages/NutritionistPanel\";\nimport ChefPanel from \"@/pages/ChefPanel\";\nimport DeliveryPanel from \"@/pages/DeliveryPanel\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  const withLayout = (Component: React.ComponentType) => () => (\n    <AuthenticatedLayout>\n      <Component />\n    </AuthenticatedLayout>\n  );\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/plans\" component={Plans} />\n          <Route path=\"/ai-plan\" component={AIPlan} />\n          <Route path=\"/clinical-plan\" component={ClinicalPlan} />\n          <Route path=\"/book-consultation\" component={ConsultationBooking} />\n          <Route path=\"/signup-character\" component={SignupCharacter} />\n          <Route path=\"/payment\" component={DummyPayment} />\n          <Route path=\"/payment-success\" component={PaymentSuccess} />\n          <Route component={NotFound} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={withLayout(Profile)} />\n          <Route path=\"/plans\" component={Plans} />\n          <Route path=\"/ai-plan\" component={AIPlan} />\n          <Route path=\"/clinical-plan\" component={ClinicalPlan} />\n          <Route path=\"/book-consultation\" component={ConsultationBooking} />\n          <Route path=\"/signup-character\" component={SignupCharacter} />\n          <Route path=\"/payment\" component={DummyPayment} />\n          <Route path=\"/payment-success\" component={PaymentSuccess} />\n          <Route path=\"/profile\" component={withLayout(Profile)} />\n          <Route path=\"/dashboard\" component={withLayout(Dashboard)} />\n          <Route path=\"/admin\" component={withLayout(Admin)} />\n          <Route path=\"/kitchen\" component={withLayout(Kitchen)} />\n          <Route path=\"/delivery\" component={withLayout(Delivery)} />\n          <Route path=\"/consultant\" component={withLayout(ConsultantPanel)} />\n          <Route path=\"/lab\" component={withLayout(LabTechnicianPanel)} />\n          <Route path=\"/nutritionist\" component={withLayout(NutritionistPanel)} />\n          <Route path=\"/chef\" component={withLayout(ChefPanel)} />\n          <Route path=\"/delivery-panel\" component={withLayout(DeliveryPanel)} />\n          <Route component={NotFound} />\n        </>\n      )}\n    </Switch>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":3784},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/CharacterCreation.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Upload, User, Heart, Sparkles, Star, Smile } from 'lucide-react';\nimport { Label } from '@/components/ui/label';\nimport { cn } from '@/lib/utils';\n\nconst PRESET_AVATARS = [\n  { id: 'avatar-1', icon: User, color: 'bg-chart-1', label: 'Classic' },\n  { id: 'avatar-2', icon: Heart, color: 'bg-chart-2', label: 'Heart' },\n  { id: 'avatar-3', icon: Sparkles, color: 'bg-chart-3', label: 'Sparkles' },\n  { id: 'avatar-4', icon: Star, color: 'bg-chart-4', label: 'Star' },\n  { id: 'avatar-5', icon: Smile, color: 'bg-chart-5', label: 'Smile' },\n];\n\ninterface CharacterCreationProps {\n  onComplete: (characterData: { characterImageUrl?: string; characterType?: string }) => void;\n  onSkip?: () => void;\n}\n\nexport function CharacterCreation({ onComplete, onSkip }: CharacterCreationProps) {\n  const [selectedAvatar, setSelectedAvatar] = useState<string | null>(null);\n  const [uploadedImage, setUploadedImage] = useState<string | null>(null);\n  const [isUploading, setIsUploading] = useState(false);\n\n  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setIsUploading(true);\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setUploadedImage(reader.result as string);\n        setSelectedAvatar(null);\n        setIsUploading(false);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleAvatarSelect = (avatarId: string) => {\n    setSelectedAvatar(avatarId);\n    setUploadedImage(null);\n  };\n\n  const handleContinue = () => {\n    if (uploadedImage) {\n      onComplete({ characterImageUrl: uploadedImage });\n    } else if (selectedAvatar) {\n      onComplete({ characterType: selectedAvatar });\n    }\n  };\n\n  const canContinue = uploadedImage || selectedAvatar;\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"text-center space-y-3\">\n        <h2 className=\"font-display text-2xl md:text-3xl font-semibold\" data-testid=\"text-character-title\">\n          Create Your Health Journey Character\n        </h2>\n        <p className=\"text-muted-foreground max-w-2xl mx-auto\" data-testid=\"text-character-subtitle\">\n          Your character will accompany you through each milestone of your health journey\n        </p>\n      </div>\n\n      <div className=\"grid md:grid-cols-2 gap-8\">\n        <Card className=\"hover-elevate\" data-testid=\"card-upload-photo\">\n          <CardContent className=\"p-6 space-y-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"flex h-10 w-10 items-center justify-center rounded-md bg-primary/10 text-primary\">\n                <Upload className=\"h-5 w-5\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold\">Upload Your Photo</h3>\n                <p className=\"text-sm text-muted-foreground\">Create a custom character</p>\n              </div>\n            </div>\n\n            <div className=\"border-2 border-dashed rounded-md p-8 text-center space-y-4\">\n              {uploadedImage ? (\n                <div className=\"space-y-4\">\n                  <div className=\"relative w-32 h-32 mx-auto rounded-full overflow-hidden border-4 border-primary\">\n                    <img\n                      src={uploadedImage}\n                      alt=\"Character preview\"\n                      className=\"w-full h-full object-cover\"\n                      data-testid=\"img-character-preview\"\n                    />\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setUploadedImage(null)}\n                    data-testid=\"button-remove-photo\"\n                  >\n                    Remove Photo\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  <Upload className=\"h-12 w-12 mx-auto text-muted-foreground\" />\n                  <div>\n                    <Label\n                      htmlFor=\"photo-upload\"\n                      className=\"cursor-pointer text-primary hover:underline\"\n                      data-testid=\"label-upload-photo\"\n                    >\n                      Click to upload\n                    </Label>\n                    <input\n                      id=\"photo-upload\"\n                      type=\"file\"\n                      accept=\"image/*\"\n                      className=\"hidden\"\n                      onChange={handleImageUpload}\n                      disabled={isUploading}\n                      data-testid=\"input-photo-upload\"\n                    />\n                    <p className=\"text-sm text-muted-foreground mt-1\">PNG, JPG up to 5MB</p>\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover-elevate\" data-testid=\"card-preset-avatars\">\n          <CardContent className=\"p-6 space-y-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"flex h-10 w-10 items-center justify-center rounded-md bg-primary/10 text-primary\">\n                <Sparkles className=\"h-5 w-5\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold\">Choose a Preset Avatar</h3>\n                <p className=\"text-sm text-muted-foreground\">Quick and fun options</p>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-3 gap-3\">\n              {PRESET_AVATARS.map((avatar) => {\n                const Icon = avatar.icon;\n                const isSelected = selectedAvatar === avatar.id;\n                return (\n                  <button\n                    key={avatar.id}\n                    onClick={() => handleAvatarSelect(avatar.id)}\n                    className={cn(\n                      'flex flex-col items-center gap-2 p-4 rounded-md border-2 transition-all hover-elevate active-elevate-2',\n                      isSelected\n                        ? 'border-primary bg-primary/5'\n                        : 'border-border'\n                    )}\n                    data-testid={`button-avatar-${avatar.id}`}\n                  >\n                    <div className={cn('h-16 w-16 rounded-full flex items-center justify-center', avatar.color)}>\n                      <Icon className=\"h-8 w-8 text-white\" />\n                    </div>\n                    <span className=\"text-xs font-medium\">{avatar.label}</span>\n                  </button>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"flex gap-3 justify-center\">\n        {onSkip && (\n          <Button\n            variant=\"outline\"\n            size=\"lg\"\n            onClick={onSkip}\n            data-testid=\"button-skip-character\"\n          >\n            Skip for Now\n          </Button>\n        )}\n        <Button\n          size=\"lg\"\n          onClick={handleContinue}\n          disabled={!canContinue}\n          data-testid=\"button-continue-character\"\n        >\n          Continue to Payment\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7250},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/PaymentCheckout.tsx":{"content":"import { useStripe, Elements, PaymentElement, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useEffect, useState } from 'react';\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\n\nif (!import.meta.env.VITE_STRIPE_PUBLIC_KEY) {\n  throw new Error('Missing required Stripe key: VITE_STRIPE_PUBLIC_KEY');\n}\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY);\n\nconst CheckoutForm = ({ onSuccess }: { onSuccess: () => void }) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsProcessing(true);\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        return_url: `${window.location.origin}/dashboard`,\n      },\n      redirect: 'if_required',\n    });\n\n    if (error) {\n      toast({\n        title: \"Payment Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      setIsProcessing(false);\n    } else {\n      toast({\n        title: \"Payment Successful\",\n        description: \"Your consultation has been booked!\",\n      });\n      onSuccess();\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <PaymentElement />\n      <Button \n        type=\"submit\" \n        size=\"lg\" \n        className=\"w-full\" \n        disabled={!stripe || !elements || isProcessing}\n        data-testid=\"button-submit-payment\"\n      >\n        {isProcessing ? 'Processing...' : 'Complete Payment'}\n      </Button>\n    </form>\n  );\n};\n\ninterface PaymentCheckoutProps {\n  sessionId: string;\n  onSuccess: () => void;\n}\n\nexport function PaymentCheckout({ sessionId, onSuccess }: PaymentCheckoutProps) {\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const createPaymentIntent = async () => {\n      try {\n        const response = await apiRequest('POST', '/api/create-payment-intent', { \n          sessionId \n        }) as unknown as { clientSecret: string };\n        setClientSecret(response.clientSecret);\n      } catch (error) {\n        console.error('Error creating payment intent:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    createPaymentIntent();\n  }, [sessionId]);\n\n  if (isLoading || !clientSecret) {\n    return (\n      <Card>\n        <CardContent className=\"p-8\">\n          <div className=\"flex flex-col items-center justify-center space-y-4\">\n            <div className=\"animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full\" />\n            <p className=\"text-muted-foreground\">Loading payment...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardContent className=\"p-8\">\n        <Elements stripe={stripePromise} options={{ clientSecret }}>\n          <CheckoutForm onSuccess={onSuccess} />\n        </Elements>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3308},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000;\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  // Auto-login sessions don't have refresh tokens, require re-login when expired\n  if (user.isAutoLogin || !user.refresh_token) {\n    res.status(401).json({ message: \"Unauthorized - Session expired\" });\n    return;\n  }\n\n  const refreshToken = user.refresh_token;\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4337},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/Testimonials.tsx":{"content":"import { Testimonials } from '../Testimonials'\n\nexport default function TestimonialsExample() {\n  return <Testimonials />\n}\n","size_bytes":124},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/examples/PlanCards.tsx":{"content":"import { PlanCards } from '../PlanCards'\n\nexport default function PlanCardsExample() {\n  return <PlanCards />\n}\n","size_bytes":112},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/pages/Home.tsx":{"content":"import { Header } from '@/components/Header';\nimport { Hero } from '@/components/Hero';\nimport { PlanCards } from '@/components/PlanCards';\nimport { ProcessSteps } from '@/components/ProcessSteps';\nimport { Testimonials } from '@/components/Testimonials';\nimport { Footer } from '@/components/Footer';\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-1\">\n        <Hero />\n        <PlanCards />\n        <ProcessSteps />\n        <Testimonials />\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":583},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/Hero.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Link } from 'wouter';\nimport heroImage from '@assets/generated_images/Hero_healthy_salmon_meal_9774e6ea.png';\nimport { CheckCircle2 } from 'lucide-react';\n\nexport function Hero() {\n  return (\n    <section className=\"relative py-16 md:py-24 lg:py-32 overflow-hidden\">\n      <div className=\"container mx-auto px-4 md:px-6\">\n        <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n          <div className=\"space-y-8\">\n            <div className=\"space-y-4\">\n              <h1 className=\"font-display text-4xl md:text-5xl lg:text-6xl xl:text-7xl font-bold tracking-tight\" data-testid=\"text-hero-title\">\n                Your body, your meals — crafted for you\n              </h1>\n              <p className=\"text-lg md:text-xl text-muted-foreground leading-relaxed max-w-2xl\" data-testid=\"text-hero-subtitle\">\n                Personalized nutrition delivered to your door. Choose between our premium clinical plan with expert consultations or AI-powered meal planning.\n              </p>\n            </div>\n\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <Link href=\"/clinical-plan\">\n                <Button size=\"lg\" className=\"w-full sm:w-auto\" data-testid=\"button-premium-clinical\">\n                  Premium Clinical Plan\n                </Button>\n              </Link>\n              <Link href=\"/ai-plan\">\n                <Button size=\"lg\" variant=\"outline\" className=\"w-full sm:w-auto\" data-testid=\"button-ai-assisted\">\n                  AI-Assisted Plan\n                </Button>\n              </Link>\n            </div>\n\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground pt-4\" data-testid=\"text-trust-indicator\">\n              <CheckCircle2 className=\"h-5 w-5 text-primary\" />\n              <span>Trusted by 10,000+ health-conscious individuals</span>\n            </div>\n          </div>\n\n          <div className=\"relative\">\n            <div className=\"relative rounded-lg overflow-hidden shadow-2xl\">\n              <img\n                src={heroImage}\n                alt=\"Healthy meal with salmon and vegetables\"\n                className=\"w-full h-auto object-cover\"\n                data-testid=\"img-hero\"\n              />\n            </div>\n            <div className=\"absolute -bottom-6 -right-6 w-32 h-32 bg-primary/10 rounded-full blur-3xl\" />\n            <div className=\"absolute -top-6 -left-6 w-32 h-32 bg-chart-2/10 rounded-full blur-3xl\" />\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2556},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/examples/Hero.tsx":{"content":"import { Hero } from '../Hero'\n\nexport default function HeroExample() {\n  return <Hero />\n}\n","size_bytes":92},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/BookingCalendar.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Calendar as CalendarIcon, Clock } from 'lucide-react';\nimport { useState } from 'react';\n\ninterface TimeSlot {\n  time: string;\n  available: boolean;\n}\n\ninterface DaySlots {\n  date: string;\n  day: string;\n  slots: TimeSlot[];\n}\n\nconst availableDates: DaySlots[] = [\n  {\n    date: '2025-01-06',\n    day: 'Mon, Jan 6',\n    slots: [\n      { time: '09:00 AM', available: true },\n      { time: '10:00 AM', available: true },\n      { time: '02:00 PM', available: false },\n      { time: '04:00 PM', available: true },\n    ],\n  },\n  {\n    date: '2025-01-07',\n    day: 'Tue, Jan 7',\n    slots: [\n      { time: '09:00 AM', available: true },\n      { time: '11:00 AM', available: true },\n      { time: '03:00 PM', available: true },\n      { time: '05:00 PM', available: false },\n    ],\n  },\n  {\n    date: '2025-01-08',\n    day: 'Wed, Jan 8',\n    slots: [\n      { time: '10:00 AM', available: true },\n      { time: '01:00 PM', available: true },\n      { time: '03:00 PM', available: true },\n      { time: '04:00 PM', available: true },\n    ],\n  },\n];\n\ninterface BookingCalendarProps {\n  onDateSelect?: (date: Date) => void;\n}\n\nexport function BookingCalendar({ onDateSelect }: BookingCalendarProps = {}) {\n  const [selectedDate, setSelectedDate] = useState<string | null>(null);\n  const [selectedTime, setSelectedTime] = useState<string | null>(null);\n\n  const handleDateChange = (date: string) => {\n    setSelectedDate(date);\n    setSelectedTime(null);\n  };\n\n  const handleTimeChange = (time: string) => {\n    setSelectedTime(time);\n    if (selectedDate && onDateSelect) {\n      const fullDateTime = new Date(`${selectedDate}T${convertTo24Hour(time)}`);\n      onDateSelect(fullDateTime);\n    }\n  };\n\n  const convertTo24Hour = (time: string): string => {\n    const [timeStr, period] = time.split(' ');\n    let [hours, minutes] = timeStr.split(':').map(Number);\n    if (period === 'PM' && hours !== 12) hours += 12;\n    if (period === 'AM' && hours === 12) hours = 0;\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:00`;\n  };\n\n  const handleBooking = () => {\n    if (selectedDate && selectedTime) {\n      console.log('Booking consultation:', { date: selectedDate, time: selectedTime });\n      alert(`Consultation booked for ${selectedDate} at ${selectedTime}`);\n    }\n  };\n\n  return (\n    <Card data-testid=\"card-booking-calendar\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <CalendarIcon className=\"h-5 w-5\" />\n          Schedule Your Consultation\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"space-y-4\">\n          <p className=\"text-sm text-muted-foreground\">\n            Select a date and time for your initial physician consultation\n          </p>\n\n          <div className=\"space-y-3\">\n            <label className=\"text-sm font-medium\">Available Dates</label>\n            <div className=\"grid gap-2\">\n              {availableDates.map((dateSlot) => (\n                <Button\n                  key={dateSlot.date}\n                  variant={selectedDate === dateSlot.date ? 'default' : 'outline'}\n                  className=\"w-full justify-start\"\n                  onClick={() => handleDateChange(dateSlot.date)}\n                  data-testid={`button-date-${dateSlot.date}`}\n                >\n                  <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                  {dateSlot.day}\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          {selectedDate && (\n            <div className=\"space-y-3\">\n              <label className=\"text-sm font-medium\">Available Time Slots</label>\n              <div className=\"grid grid-cols-2 gap-2\">\n                {availableDates\n                  .find((d) => d.date === selectedDate)\n                  ?.slots.map((slot) => (\n                    <Button\n                      key={slot.time}\n                      variant={selectedTime === slot.time ? 'default' : 'outline'}\n                      disabled={!slot.available}\n                      className=\"w-full\"\n                      onClick={() => handleTimeChange(slot.time)}\n                      data-testid={`button-time-${slot.time.replace(/\\s/g, '-')}`}\n                    >\n                      <Clock className=\"mr-2 h-4 w-4\" />\n                      {slot.time}\n                      {!slot.available && (\n                        <Badge variant=\"secondary\" className=\"ml-2\">\n                          Booked\n                        </Badge>\n                      )}\n                    </Button>\n                  ))}\n              </div>\n            </div>\n          )}\n\n          {selectedDate && selectedTime && (\n            <div className=\"p-4 rounded-md bg-primary/5 border border-primary/20\">\n              <p className=\"text-sm font-medium mb-2\">Selected Appointment</p>\n              <p className=\"text-sm text-muted-foreground\">\n                {availableDates.find((d) => d.date === selectedDate)?.day} at {selectedTime}\n              </p>\n            </div>\n          )}\n        </div>\n\n        <Button\n          size=\"lg\"\n          className=\"w-full\"\n          onClick={handleBooking}\n          disabled={!selectedDate || !selectedTime}\n          data-testid=\"button-confirm-booking\"\n        >\n          Confirm Booking\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5556},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        display: [\"var(--font-display)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4092},"client/src/pages/Plans.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Check, Sparkles, Stethoscope } from \"lucide-react\";\n\nexport default function Plans() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold mb-4\">Choose Your Wellness Plan</h1>\n          <p className=\"text-lg text-muted-foreground\">\n            Select the plan that best fits your health goals\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 gap-8 max-w-5xl mx-auto\">\n          {/* Clinical Plan Card */}\n          <Card className=\"relative border-primary\" data-testid=\"card-clinical-plan\">\n            <div className=\"absolute top-4 right-4\">\n              <span className=\"bg-primary text-primary-foreground px-3 py-1 rounded-full text-sm font-medium\">\n                Recommended\n              </span>\n            </div>\n            <CardHeader>\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4\">\n                <Stethoscope className=\"w-6 h-6 text-primary\" />\n              </div>\n              <CardTitle className=\"text-2xl\">Clinical-Level Guided Plan</CardTitle>\n              <CardDescription className=\"text-base\">\n                Personalized medical supervision with comprehensive health assessment\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-3\">\n                <div className=\"flex items-start gap-3\">\n                  <Check className=\"w-5 h-5 text-primary mt-0.5\" />\n                  <span className=\"text-sm\">Doctor consultation and health assessment</span>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <Check className=\"w-5 h-5 text-primary mt-0.5\" />\n                  <span className=\"text-sm\">Diagnostic test reports and analysis</span>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <Check className=\"w-5 h-5 text-primary mt-0.5\" />\n                  <span className=\"text-sm\">Nutritionist-approved personalized diet chart</span>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <Check className=\"w-5 h-5 text-primary mt-0.5\" />\n                  <span className=\"text-sm\">Meal delivery with health tracking</span>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <Check className=\"w-5 h-5 text-primary mt-0.5\" />\n                  <span className=\"text-sm\">6-stage progress monitoring</span>\n                </div>\n              </div>\n\n              <div className=\"pt-4 border-t\">\n                <div className=\"flex items-baseline gap-2 mb-4\">\n                  <span className=\"text-3xl font-bold\">₹25,000</span>\n                  <span className=\"text-muted-foreground\">/month</span>\n                </div>\n                <Button className=\"w-full\" size=\"lg\" data-testid=\"button-select-clinical\" asChild>\n                  <Link href=\"/book-consultation\">\n                    Get Started\n                  </Link>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* AI-Assisted Plan Card */}\n          <Card data-testid=\"card-ai-plan\">\n            <CardHeader>\n              <div className=\"w-12 h-12 bg-purple-100 dark:bg-purple-900/20 rounded-lg flex items-center justify-center mb-4\">\n                <Sparkles className=\"w-6 h-6 text-purple-600 dark:text-purple-400\" />\n              </div>\n              <CardTitle className=\"text-2xl\">AI-Assisted Plan</CardTitle>\n              <CardDescription className=\"text-base\">\n                Intelligent meal planning through interactive questionnaires\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-3\">\n                <div className=\"flex items-start gap-3\">\n                  <Check className=\"w-5 h-5 text-purple-600 dark:text-purple-400 mt-0.5\" />\n                  <span className=\"text-sm\">AI-powered health assessment quiz</span>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <Check className=\"w-5 h-5 text-purple-600 dark:text-purple-400 mt-0.5\" />\n                  <span className=\"text-sm\">Personalized meal recommendations</span>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <Check className=\"w-5 h-5 text-purple-600 dark:text-purple-400 mt-0.5\" />\n                  <span className=\"text-sm\">Automated diet plan generation</span>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <Check className=\"w-5 h-5 text-purple-600 dark:text-purple-400 mt-0.5\" />\n                  <span className=\"text-sm\">Self-service meal selection</span>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <Check className=\"w-5 h-5 text-purple-600 dark:text-purple-400 mt-0.5\" />\n                  <span className=\"text-sm\">Flexible scheduling</span>\n                </div>\n              </div>\n\n              <div className=\"pt-4 border-t\">\n                <div className=\"flex items-baseline gap-2 mb-4\">\n                  <span className=\"text-3xl font-bold\">₹15,000</span>\n                  <span className=\"text-muted-foreground\">/month</span>\n                </div>\n                <Button variant=\"outline\" className=\"w-full\" size=\"lg\" data-testid=\"button-select-ai\" asChild>\n                  <Link href=\"/ai-plan\">\n                    Get Started\n                  </Link>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"text-center mt-12\">\n          <p className=\"text-sm text-muted-foreground\">\n            All plans include free delivery within city limits\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6262},"client/src/pages/PaymentSuccess.tsx":{"content":"import { useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { Header } from '@/components/Header';\nimport { Footer } from '@/components/Footer';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { CheckCircle2, Calendar, User, ArrowRight } from 'lucide-react';\n\nexport default function PaymentSuccess() {\n  const [, navigate] = useLocation();\n  \n  const consultationData = JSON.parse(localStorage.getItem('consultationData') || '{}');\n  const signupData = JSON.parse(localStorage.getItem('signupData') || '{}');\n\n  useEffect(() => {\n    // Auto-redirect to login after 3 seconds\n    const timer = setTimeout(() => {\n      window.location.href = '/api/login';\n    }, 3000);\n\n    return () => {\n      clearTimeout(timer);\n      localStorage.removeItem('consultationData');\n      localStorage.removeItem('signupData');\n      localStorage.removeItem('pendingUserId');\n      localStorage.removeItem('pendingPaymentSessionId');\n      localStorage.removeItem('userEmail');\n    };\n  }, []);\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-gradient-to-b from-emerald-50/30 via-white to-blue-50/20\">\n      <Header />\n      <main className=\"flex-1 flex items-center justify-center px-4 py-12\">\n        <div className=\"max-w-2xl w-full space-y-8\">\n          <Card className=\"text-center\">\n            <CardContent className=\"p-12 space-y-6\">\n              <div className=\"flex justify-center\">\n                <div className=\"h-24 w-24 rounded-full bg-emerald-100 flex items-center justify-center\">\n                  <CheckCircle2 className=\"h-14 w-14 text-emerald-600\" data-testid=\"icon-success\" />\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <h1 className=\"text-3xl font-bold\" data-testid=\"text-success-title\">\n                  Payment Successful!\n                </h1>\n                <p className=\"text-lg text-muted-foreground\">\n                  Your consultation has been booked successfully\n                </p>\n              </div>\n\n              <div className=\"bg-muted/30 rounded-lg p-6 space-y-4 text-left\">\n                <h3 className=\"font-semibold text-center mb-4\">Booking Details</h3>\n                \n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-3\">\n                    <User className=\"h-5 w-5 text-primary\" />\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm text-muted-foreground\">Patient Name</p>\n                      <p className=\"font-medium\" data-testid=\"text-patient-name\">{signupData.name}</p>\n                    </div>\n                  </div>\n\n                  {consultationData.doctorName && (\n                    <div className=\"flex items-center gap-3\">\n                      <User className=\"h-5 w-5 text-primary\" />\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm text-muted-foreground\">Doctor</p>\n                        <p className=\"font-medium\" data-testid=\"text-doctor\">{consultationData.doctorName}</p>\n                      </div>\n                    </div>\n                  )}\n\n                  {consultationData.date && consultationData.time && (\n                    <div className=\"flex items-center gap-3\">\n                      <Calendar className=\"h-5 w-5 text-primary\" />\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm text-muted-foreground\">Appointment</p>\n                        <p className=\"font-medium\" data-testid=\"text-appointment\">\n                          {consultationData.date} at {consultationData.time}\n                        </p>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"space-y-3 pt-4\">\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 text-sm text-blue-900\">\n                  <p className=\"font-semibold mb-1\">What's Next?</p>\n                  <p>Redirecting you to sign in... You'll be able to access your dashboard and track your progress through our 5-stage wellness journey.</p>\n                </div>\n\n                <div className=\"flex items-center justify-center gap-2 text-sm text-muted-foreground\">\n                  <div className=\"animate-spin h-4 w-4 border-2 border-primary border-t-transparent rounded-full\" />\n                  <span>Preparing your dashboard...</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":4705},"client/src/pages/SignupCharacter.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { Header } from '@/components/Header';\nimport { Footer } from '@/components/Footer';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { ArrowRight, Upload, User, Mail, Phone, Lock } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\nconst presetCharacters = [\n  { id: 'chef', name: 'Chef Alex', emoji: '👨‍🍳', color: 'bg-orange-100' },\n  { id: 'athlete', name: 'Athletic Ana', emoji: '🏃‍♀️', color: 'bg-blue-100' },\n  { id: 'professional', name: 'Pro Pat', emoji: '💼', color: 'bg-purple-100' },\n  { id: 'student', name: 'Student Sam', emoji: '🎓', color: 'bg-green-100' },\n  { id: 'parent', name: 'Parent Parker', emoji: '👨‍👩‍👧', color: 'bg-pink-100' },\n  { id: 'senior', name: 'Senior Sarah', emoji: '👵', color: 'bg-amber-100' },\n];\n\nexport default function SignupCharacter() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [step, setStep] = useState<'signup' | 'character'>('signup');\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    password: '',\n  });\n  const [selectedCharacter, setSelectedCharacter] = useState('');\n  const [uploadedImage, setUploadedImage] = useState('');\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const handleSignupSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name || !formData.email || !formData.phone || !formData.password) {\n      toast({\n        title: 'Missing Information',\n        description: 'Please fill in all fields',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setStep('character');\n  };\n\n  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setUploadedImage(reader.result as string);\n        setSelectedCharacter('uploaded');\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleContinue = async () => {\n    if (!selectedCharacter) {\n      toast({\n        title: 'Select Your Character',\n        description: 'Please choose a character to represent you',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    const consultationData = JSON.parse(localStorage.getItem('consultationData') || '{}');\n\n    try {\n      const response = await fetch('/api/signup-with-consultation', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          name: formData.name,\n          email: formData.email,\n          phone: formData.phone,\n          characterType: selectedCharacter,\n          characterImage: selectedCharacter === 'uploaded' ? uploadedImage : undefined,\n          consultationDate: consultationData.date,\n          consultationTime: consultationData.time,\n          doctorName: consultationData.doctorName,\n          planType: consultationData.planType,\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Signup failed');\n      }\n\n      const data = await response.json();\n      \n      // Store userId and payment session ID for later\n      localStorage.setItem('pendingUserId', data.userId);\n      localStorage.setItem('pendingPaymentSessionId', data.paymentSessionId);\n      localStorage.setItem('userEmail', formData.email);\n      \n      navigate('/payment');\n    } catch (error) {\n      toast({\n        title: 'Signup Failed',\n        description: error instanceof Error ? error.message : 'Something went wrong',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  if (step === 'signup') {\n    return (\n      <div className=\"min-h-screen flex flex-col bg-gradient-to-b from-blue-50/30 via-white to-emerald-50/20\">\n        <Header />\n        <main className=\"flex-1 flex items-center justify-center py-12 px-4\">\n          <Card className=\"w-full max-w-md\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl text-center\">Create Your Account</CardTitle>\n              <p className=\"text-center text-muted-foreground\">\n                Join us on your journey to better health\n              </p>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSignupSubmit} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"name\">Full Name</Label>\n                  <div className=\"relative\">\n                    <User className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      id=\"name\"\n                      name=\"name\"\n                      placeholder=\"John Doe\"\n                      value={formData.name}\n                      onChange={handleInputChange}\n                      className=\"pl-10\"\n                      data-testid=\"input-name\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <div className=\"relative\">\n                    <Mail className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"email\"\n                      placeholder=\"john@example.com\"\n                      value={formData.email}\n                      onChange={handleInputChange}\n                      className=\"pl-10\"\n                      data-testid=\"input-email\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"phone\">Phone Number</Label>\n                  <div className=\"relative\">\n                    <Phone className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      id=\"phone\"\n                      name=\"phone\"\n                      type=\"tel\"\n                      placeholder=\"+91 98765 43210\"\n                      value={formData.phone}\n                      onChange={handleInputChange}\n                      className=\"pl-10\"\n                      data-testid=\"input-phone\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\">Password</Label>\n                  <div className=\"relative\">\n                    <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      id=\"password\"\n                      name=\"password\"\n                      type=\"password\"\n                      placeholder=\"••••••••\"\n                      value={formData.password}\n                      onChange={handleInputChange}\n                      className=\"pl-10\"\n                      data-testid=\"input-password\"\n                    />\n                  </div>\n                </div>\n\n                <Button type=\"submit\" size=\"lg\" className=\"w-full\" data-testid=\"button-next-character\">\n                  Next: Create Character\n                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-gradient-to-b from-blue-50/30 via-white to-emerald-50/20\">\n      <Header />\n      <main className=\"flex-1 py-12 px-4\">\n        <div className=\"container mx-auto max-w-5xl space-y-8\">\n          <div className=\"text-center space-y-3\">\n            <h1 className=\"font-display text-3xl md:text-4xl font-bold\" data-testid=\"text-character-title\">\n              Create Your Character\n            </h1>\n            <p className=\"text-lg text-muted-foreground\">\n              Choose an avatar that represents you on your wellness journey\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Upload className=\"h-5 w-5\" />\n                  Upload Your Photo\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div\n                    className={`border-2 border-dashed rounded-lg p-8 text-center transition-all ${\n                      uploadedImage ? 'border-primary bg-primary/5' : 'border-border'\n                    }`}\n                  >\n                    {uploadedImage ? (\n                      <div className=\"space-y-3\">\n                        <img\n                          src={uploadedImage}\n                          alt=\"Uploaded\"\n                          className=\"w-32 h-32 rounded-full object-cover mx-auto border-4 border-primary\"\n                        />\n                        <p className=\"text-sm text-muted-foreground\">Photo uploaded successfully!</p>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-3\">\n                        <div className=\"w-20 h-20 rounded-full bg-muted mx-auto flex items-center justify-center\">\n                          <Upload className=\"h-8 w-8 text-muted-foreground\" />\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Upload a selfie to create your AI-generated avatar\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                  <Input\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={handleImageUpload}\n                    className=\"cursor-pointer\"\n                    data-testid=\"input-upload-photo\"\n                  />\n                  <p className=\"text-xs text-muted-foreground\">\n                    AI avatar generation coming soon! For now, we'll use your photo.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Choose a Preset Character</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 gap-3\">\n                  {presetCharacters.map((char) => (\n                    <button\n                      key={char.id}\n                      onClick={() => {\n                        setSelectedCharacter(char.id);\n                        setUploadedImage('');\n                      }}\n                      className={`p-4 rounded-lg border-2 transition-all text-center hover-elevate ${\n                        selectedCharacter === char.id\n                          ? 'border-primary bg-primary/5'\n                          : 'border-border'\n                      }`}\n                      data-testid={`button-character-${char.id}`}\n                    >\n                      <div className={`text-4xl mb-2 p-3 rounded-full ${char.color} inline-block`}>\n                        {char.emoji}\n                      </div>\n                      <div className=\"text-sm font-medium\">{char.name}</div>\n                    </button>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {selectedCharacter && (\n            <div className=\"flex justify-center\">\n              <Card className=\"max-w-md w-full\">\n                <CardContent className=\"p-6 flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    {selectedCharacter === 'uploaded' && uploadedImage ? (\n                      <img\n                        src={uploadedImage}\n                        alt=\"Selected\"\n                        className=\"w-16 h-16 rounded-full object-cover border-2 border-primary\"\n                      />\n                    ) : (\n                      <div className={`text-3xl p-3 rounded-full ${\n                        presetCharacters.find(c => c.id === selectedCharacter)?.color\n                      }`}>\n                        {presetCharacters.find(c => c.id === selectedCharacter)?.emoji}\n                      </div>\n                    )}\n                    <div>\n                      <p className=\"font-semibold\">Character Selected</p>\n                      <p className=\"text-sm text-muted-foreground\" data-testid=\"text-selected-character\">\n                        {selectedCharacter === 'uploaded'\n                          ? 'Your Photo'\n                          : presetCharacters.find(c => c.id === selectedCharacter)?.name}\n                      </p>\n                    </div>\n                  </div>\n                  <Button onClick={handleContinue} data-testid=\"button-proceed-payment\">\n                    Proceed to Payment\n                    <ArrowRight className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":13557},"client/src/pages/DummyPayment.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { Header } from '@/components/Header';\nimport { Footer } from '@/components/Footer';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { CreditCard, Lock, CheckCircle2, Loader2 } from 'lucide-react';\n\ntype Plan = {\n  id: string;\n  listPrice: string;\n  consultationFeeCredited: string;\n  finalPayable: string;\n  type: string;\n};\n\nexport default function DummyPayment() {\n  const [, navigate] = useLocation();\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [cardData, setCardData] = useState({\n    name: '',\n    number: '',\n    expiry: '',\n    cvv: '',\n  });\n\n  // Fetch user's active plan\n  const { data: plan, isLoading: isPlanLoading } = useQuery<Plan>({\n    queryKey: ['/api/user/plan'],\n  });\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setCardData({\n      ...cardData,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const handlePayment = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsProcessing(true);\n\n    try {\n      // Simulate payment processing\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Get stored data from localStorage\n      const userId = localStorage.getItem('pendingUserId');\n      const paymentSessionId = localStorage.getItem('pendingPaymentSessionId');\n\n      if (!userId || !paymentSessionId) {\n        throw new Error('Missing payment session data');\n      }\n\n      // Call backend to complete payment\n      const response = await fetch('/api/payment/complete-dummy', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          userId,\n          paymentSessionId,\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Payment failed');\n      }\n\n      setIsProcessing(false);\n      setIsSuccess(true);\n\n      setTimeout(() => {\n        navigate('/payment-success');\n      }, 2000);\n    } catch (error) {\n      setIsProcessing(false);\n      console.error('Payment error:', error);\n      alert(error instanceof Error ? error.message : 'Payment failed. Please try again.');\n    }\n  };\n\n  const consultationData = JSON.parse(localStorage.getItem('consultationData') || '{}');\n  const signupData = JSON.parse(localStorage.getItem('signupData') || '{}');\n\n  if (isSuccess) {\n    return (\n      <div className=\"min-h-screen flex flex-col bg-gradient-to-b from-emerald-50/30 via-white to-blue-50/20\">\n        <Header />\n        <main className=\"flex-1 flex items-center justify-center px-4\">\n          <Card className=\"max-w-md w-full text-center\">\n            <CardContent className=\"p-12 space-y-6\">\n              <div className=\"flex justify-center\">\n                <div className=\"h-20 w-20 rounded-full bg-emerald-100 flex items-center justify-center\">\n                  <CheckCircle2 className=\"h-12 w-12 text-emerald-600\" data-testid=\"icon-success\" />\n                </div>\n              </div>\n              <div>\n                <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"text-success-title\">\n                  Payment Successful!\n                </h2>\n                <p className=\"text-muted-foreground\">\n                  Your consultation has been booked. Redirecting to your dashboard...\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-gradient-to-b from-blue-50/30 via-white to-emerald-50/20\">\n      <Header />\n      <main className=\"flex-1 py-12 px-4\">\n        <div className=\"container mx-auto max-w-4xl\">\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"md:col-span-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <CreditCard className=\"h-5 w-5\" />\n                    Payment Details\n                  </CardTitle>\n                  <p className=\"text-sm text-muted-foreground\">\n                    This is a test payment gateway. No real charges will be made.\n                  </p>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handlePayment} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"name\">Name on Card</Label>\n                      <Input\n                        id=\"name\"\n                        name=\"name\"\n                        placeholder=\"JOHN DOE\"\n                        value={cardData.name}\n                        onChange={handleInputChange}\n                        required\n                        data-testid=\"input-card-name\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"number\">Card Number</Label>\n                      <Input\n                        id=\"number\"\n                        name=\"number\"\n                        placeholder=\"1234 5678 9012 3456\"\n                        maxLength={19}\n                        value={cardData.number}\n                        onChange={handleInputChange}\n                        required\n                        data-testid=\"input-card-number\"\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"expiry\">Expiry Date</Label>\n                        <Input\n                          id=\"expiry\"\n                          name=\"expiry\"\n                          placeholder=\"MM/YY\"\n                          maxLength={5}\n                          value={cardData.expiry}\n                          onChange={handleInputChange}\n                          required\n                          data-testid=\"input-card-expiry\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"cvv\">CVV</Label>\n                        <Input\n                          id=\"cvv\"\n                          name=\"cvv\"\n                          type=\"password\"\n                          placeholder=\"123\"\n                          maxLength={3}\n                          value={cardData.cvv}\n                          onChange={handleInputChange}\n                          required\n                          data-testid=\"input-card-cvv\"\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center gap-2 p-4 bg-muted/50 rounded-lg\">\n                      <Lock className=\"h-4 w-4 text-muted-foreground\" />\n                      <p className=\"text-xs text-muted-foreground\">\n                        Your payment is secure and encrypted. This is a demo gateway for testing.\n                      </p>\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      size=\"lg\"\n                      className=\"w-full\"\n                      disabled={isProcessing || isPlanLoading || !plan}\n                      data-testid=\"button-pay-now\"\n                    >\n                      {isProcessing ? (\n                        <span className=\"flex items-center gap-2\">\n                          <div className=\"animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full\" />\n                          Processing...\n                        </span>\n                      ) : plan ? (\n                        `Pay ₹${parseFloat(plan.finalPayable).toLocaleString('en-IN')}`\n                      ) : (\n                        'Loading...'\n                      )}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"md:col-span-1\">\n              <Card className=\"sticky top-4\">\n                <CardHeader>\n                  <CardTitle>Order Summary</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Plan</span>\n                      <span className=\"font-medium\" data-testid=\"text-plan-type\">\n                        {consultationData.planType || 'Clinical-Level Guided'}\n                      </span>\n                    </div>\n\n                    {consultationData.doctorName && (\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-muted-foreground\">Doctor</span>\n                        <span className=\"font-medium\" data-testid=\"text-doctor\">\n                          {consultationData.doctorName}\n                        </span>\n                      </div>\n                    )}\n\n                    {consultationData.date && (\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-muted-foreground\">Date</span>\n                        <span className=\"font-medium\" data-testid=\"text-date\">\n                          {consultationData.date}\n                        </span>\n                      </div>\n                    )}\n\n                    {consultationData.time && (\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-muted-foreground\">Time</span>\n                        <span className=\"font-medium\" data-testid=\"text-time\">\n                          {consultationData.time}\n                        </span>\n                      </div>\n                    )}\n\n                    {signupData.name && (\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-muted-foreground\">Patient</span>\n                        <span className=\"font-medium\" data-testid=\"text-patient-name\">\n                          {signupData.name}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"border-t pt-4 space-y-3\">\n                    {plan ? (\n                      <>\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-muted-foreground\">Plan Price</span>\n                          <span className=\"font-mono font-medium\" data-testid=\"text-plan-price\">\n                            ₹{parseFloat(plan.listPrice).toLocaleString('en-IN')}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-emerald-600\">Consultation Credit</span>\n                          <span className=\"font-mono font-medium text-emerald-600\" data-testid=\"text-consultation-credit\">\n                            -₹{parseFloat(plan.consultationFeeCredited).toLocaleString('en-IN')}\n                          </span>\n                        </div>\n                        <div className=\"border-t pt-3\">\n                          <div className=\"flex justify-between items-center\">\n                            <span className=\"font-semibold text-lg\">Final Payable</span>\n                            <span className=\"font-mono text-2xl font-bold\" data-testid=\"text-final-payable\">\n                              ₹{parseFloat(plan.finalPayable).toLocaleString('en-IN')}\n                            </span>\n                          </div>\n                        </div>\n                      </>\n                    ) : (\n                      <div className=\"flex justify-center py-4\">\n                        <Loader2 className=\"h-6 w-6 animate-spin text-muted-foreground\" />\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":12521},"client/src/pages/Profile.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport type { Report, Address } from '@shared/schema';\nimport { Header } from '@/components/Header';\nimport { Footer } from '@/components/Footer';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { FileText, Utensils, User, Download, Calendar, MapPin, Plus, Loader2, Sunrise, Sun, Moon } from 'lucide-react';\n\nexport default function Profile() {\n  const { user } = useAuth();\n  const [activeTab, setActiveTab] = useState('reports');\n\n  const { data: reports = [], isLoading: isReportsLoading } = useQuery<Report[]>({\n    queryKey: ['/api/user/reports'],\n    enabled: !!user,\n  });\n\n  const { data: addresses = [], isLoading: isAddressesLoading } = useQuery<Address[]>({\n    queryKey: ['/api/user/addresses'],\n    enabled: !!user,\n  });\n\n  const mockReports = [\n    {\n      id: '1',\n      title: 'Lipid Profile',\n      date: '2025-10-15',\n      status: 'Normal Range',\n      fileUrl: '#',\n    },\n    {\n      id: '2',\n      title: 'Complete Blood Count',\n      date: '2025-10-15',\n      status: 'Normal Range',\n      fileUrl: '#',\n    },\n    {\n      id: '3',\n      title: 'Physician Notes',\n      date: '2025-10-16',\n      status: 'Diet Plan Feasible - Proceed to Nutrition Stage',\n      fileUrl: '#',\n    },\n  ];\n\n  const mockDietPlan = {\n    title: 'Personalized 7-Day Meal Plan',\n    calories: 2000,\n    protein: 150,\n    carbs: 200,\n    fats: 67,\n    meals: [\n      {\n        day: 'Monday',\n        breakfast: 'Greek Yogurt with Berries & Almonds',\n        lunch: 'Grilled Chicken Salad with Quinoa',\n        dinner: 'Baked Salmon with Steamed Vegetables',\n      },\n      {\n        day: 'Tuesday',\n        breakfast: 'Oatmeal with Banana & Chia Seeds',\n        lunch: 'Lentil Soup with Whole Grain Bread',\n        dinner: 'Turkey Meatballs with Zucchini Noodles',\n      },\n    ],\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Header />\n      <main className=\"flex-1 py-12 bg-gradient-to-b from-blue-50/30 via-white to-emerald-50/20\">\n        <div className=\"container mx-auto px-4 md:px-6\">\n          <div className=\"max-w-6xl mx-auto space-y-8\">\n            <div className=\"flex items-center gap-6\">\n              <Avatar className=\"h-24 w-24\">\n                <AvatarImage src={user?.profileImageUrl || user?.characterImageUrl || undefined} />\n                <AvatarFallback className=\"text-2xl bg-primary/10\">\n                  {user?.firstName?.[0]}{user?.lastName?.[0]}\n                </AvatarFallback>\n              </Avatar>\n              <div>\n                <h1 className=\"text-3xl font-bold\" data-testid=\"text-profile-name\">\n                  {user?.firstName} {user?.lastName}\n                </h1>\n                <p className=\"text-muted-foreground\">{user?.email}</p>\n              </div>\n            </div>\n\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"reports\" className=\"flex items-center gap-2\" data-testid=\"tab-reports\">\n                  <FileText className=\"h-4 w-4\" />\n                  My Reports\n                </TabsTrigger>\n                <TabsTrigger value=\"plan\" className=\"flex items-center gap-2\" data-testid=\"tab-plan\">\n                  <Utensils className=\"h-4 w-4\" />\n                  My Plan\n                </TabsTrigger>\n                <TabsTrigger value=\"account\" className=\"flex items-center gap-2\" data-testid=\"tab-account\">\n                  <User className=\"h-4 w-4\" />\n                  Account Details\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"reports\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Lab Reports & Medical Notes</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {isReportsLoading ? (\n                      <div className=\"flex justify-center py-12\">\n                        <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n                      </div>\n                    ) : reports.length > 0 ? (\n                      reports.map((report) => (\n                        <div\n                          key={report.id}\n                          className=\"flex items-center justify-between p-4 border rounded-lg hover-elevate\"\n                          data-testid={`report-${report.id}`}\n                        >\n                          <div className=\"flex items-center gap-4\">\n                            <div className=\"h-12 w-12 rounded-lg bg-primary/10 flex items-center justify-center\">\n                              <FileText className=\"h-6 w-6 text-primary\" />\n                            </div>\n                            <div>\n                              <h3 className=\"font-semibold\">{report.title}</h3>\n                              <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                                <span className=\"flex items-center gap-1\">\n                                  <Calendar className=\"h-3 w-3\" />\n                                  {report.createdAt ? new Date(report.createdAt).toLocaleDateString() : 'N/A'}\n                                </span>\n                                <span>{report.reportType}</span>\n                              </div>\n                            </div>\n                          </div>\n                          {report.fileUrl && (\n                            <Button variant=\"outline\" size=\"sm\" data-testid={`button-download-${report.id}`}>\n                              <Download className=\"h-4 w-4 mr-2\" />\n                              Download\n                            </Button>\n                          )}\n                        </div>\n                      ))\n                    ) : (\n                      <div className=\"text-center py-12 text-muted-foreground\">\n                        <FileText className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                        <p>No reports available yet</p>\n                        <p className=\"text-sm\">Your lab reports will appear here once processed</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"plan\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Personalized Diet Chart</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    <div className=\"grid grid-cols-4 gap-4\">\n                      <div className=\"text-center p-4 bg-muted/50 rounded-lg\">\n                        <p className=\"text-sm text-muted-foreground\">Calories</p>\n                        <p className=\"text-2xl font-bold\">{mockDietPlan.calories}</p>\n                      </div>\n                      <div className=\"text-center p-4 bg-muted/50 rounded-lg\">\n                        <p className=\"text-sm text-muted-foreground\">Protein</p>\n                        <p className=\"text-2xl font-bold\">{mockDietPlan.protein}g</p>\n                      </div>\n                      <div className=\"text-center p-4 bg-muted/50 rounded-lg\">\n                        <p className=\"text-sm text-muted-foreground\">Carbs</p>\n                        <p className=\"text-2xl font-bold\">{mockDietPlan.carbs}g</p>\n                      </div>\n                      <div className=\"text-center p-4 bg-muted/50 rounded-lg\">\n                        <p className=\"text-sm text-muted-foreground\">Fats</p>\n                        <p className=\"text-2xl font-bold\">{mockDietPlan.fats}g</p>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-4\">\n                      <h3 className=\"font-semibold text-lg\">Weekly Meal Plan</h3>\n                      {mockDietPlan.meals.map((day, index) => (\n                        <div key={index} className=\"border rounded-lg p-4 space-y-2\">\n                          <h4 className=\"font-semibold\">{day.day}</h4>\n                          <div className=\"grid md:grid-cols-3 gap-4 text-sm\">\n                            <div>\n                              <p className=\"text-muted-foreground\">Breakfast</p>\n                              <p>{day.breakfast}</p>\n                            </div>\n                            <div>\n                              <p className=\"text-muted-foreground\">Lunch</p>\n                              <p>{day.lunch}</p>\n                            </div>\n                            <div>\n                              <p className=\"text-muted-foreground\">Dinner</p>\n                              <p>{day.dinner}</p>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n\n                    <Button className=\"w-full\" data-testid=\"button-download-plan\">\n                      <Download className=\"mr-2 h-4 w-4\" />\n                      Download Complete Plan (PDF)\n                    </Button>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"account\" className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Account Information</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    <div className=\"grid md:grid-cols-2 gap-6\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"firstName\">First Name</Label>\n                        <Input\n                          id=\"firstName\"\n                          defaultValue={user?.firstName || ''}\n                          data-testid=\"input-first-name\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"lastName\">Last Name</Label>\n                        <Input\n                          id=\"lastName\"\n                          defaultValue={user?.lastName || ''}\n                          data-testid=\"input-last-name\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"email\">Email</Label>\n                        <Input\n                          id=\"email\"\n                          type=\"email\"\n                          defaultValue={user?.email || ''}\n                          disabled\n                          data-testid=\"input-email\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"phone\">Phone Number</Label>\n                        <Input\n                          id=\"phone\"\n                          defaultValue={user?.phone || ''}\n                          data-testid=\"input-phone\"\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label>Character Avatar</Label>\n                      <div className=\"flex items-center gap-4\">\n                        <Avatar className=\"h-20 w-20\">\n                          <AvatarImage src={user?.characterImageUrl || user?.profileImageUrl || undefined} />\n                          <AvatarFallback className=\"text-xl\">\n                            {user?.firstName?.[0]}{user?.lastName?.[0]}\n                          </AvatarFallback>\n                        </Avatar>\n                        <Button variant=\"outline\" data-testid=\"button-change-avatar\">\n                          Change Avatar\n                        </Button>\n                      </div>\n                    </div>\n\n                    <div className=\"flex gap-3 pt-4\">\n                      <Button className=\"flex-1\" data-testid=\"button-save-changes\">\n                        Save Changes\n                      </Button>\n                      <Button variant=\"outline\" className=\"flex-1\" data-testid=\"button-cancel\">\n                        Cancel\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle>Delivery Addresses</CardTitle>\n                      <Button size=\"sm\" data-testid=\"button-add-address\">\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Add Address\n                      </Button>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {isAddressesLoading ? (\n                      <div className=\"flex justify-center py-8\">\n                        <Loader2 className=\"h-6 w-6 animate-spin text-muted-foreground\" />\n                      </div>\n                    ) : addresses.length > 0 ? (\n                      addresses.map((address) => (\n                        <div\n                          key={address.id}\n                          className=\"p-4 border rounded-lg hover-elevate\"\n                          data-testid={`address-${address.id}`}\n                        >\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex items-start gap-3 flex-1\">\n                              <div className=\"h-10 w-10 rounded-lg bg-primary/10 flex items-center justify-center mt-1\">\n                                <MapPin className=\"h-5 w-5 text-primary\" />\n                              </div>\n                              <div className=\"flex-1 space-y-2\">\n                                <div className=\"flex items-center gap-2\">\n                                  {address.label && (\n                                    <Badge variant=\"outline\" className=\"text-xs\">\n                                      {address.label}\n                                    </Badge>\n                                  )}\n                                  {address.isDefault && (\n                                    <Badge variant=\"default\" className=\"text-xs\">\n                                      Default\n                                    </Badge>\n                                  )}\n                                </div>\n                                <p className=\"font-medium\">{address.line1}</p>\n                                {address.line2 && <p className=\"text-sm text-muted-foreground\">{address.line2}</p>}\n                                <p className=\"text-sm text-muted-foreground\">\n                                  {address.city}, {address.state} - {address.pincode}\n                                </p>\n                                <div className=\"flex gap-3 text-xs text-muted-foreground\">\n                                  {address.breakfast && (\n                                    <span className=\"flex items-center gap-1\">\n                                      <Sunrise className=\"h-3 w-3\" />\n                                      Breakfast\n                                    </span>\n                                  )}\n                                  {address.lunch && (\n                                    <span className=\"flex items-center gap-1\">\n                                      <Sun className=\"h-3 w-3\" />\n                                      Lunch\n                                    </span>\n                                  )}\n                                  {address.dinner && (\n                                    <span className=\"flex items-center gap-1\">\n                                      <Moon className=\"h-3 w-3\" />\n                                      Dinner\n                                    </span>\n                                  )}\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"flex gap-2\">\n                              <Button variant=\"outline\" size=\"sm\" data-testid={`button-edit-address-${address.id}`}>\n                                Edit\n                              </Button>\n                              <Button variant=\"outline\" size=\"sm\" data-testid={`button-delete-address-${address.id}`}>\n                                Delete\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      ))\n                    ) : (\n                      <div className=\"text-center py-12 text-muted-foreground\">\n                        <MapPin className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                        <p>No delivery addresses saved</p>\n                        <p className=\"text-sm\">Add an address to start receiving meal deliveries</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":17701},"client/src/pages/LabTechnicianPanel.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { FileText, Upload, CheckCircle, Clock, AlertCircle, Microscope } from \"lucide-react\";\n\ntype Customer = {\n  id: string;\n  email: string;\n  name: string | null;\n  role: string;\n};\n\ntype StageProgress = {\n  id: number;\n  userId: string;\n  stage: number;\n  status: 'pending' | 'in_progress' | 'completed';\n  startedAt: Date | null;\n  completedAt: Date | null;\n};\n\ntype Document = {\n  id: number;\n  userId: string;\n  stage: number;\n  label: string;\n  url: string;\n  uploadedByRole: string;\n  uploadedAt: Date;\n};\n\ntype Acknowledgement = {\n  id: string;\n  staffId: string;\n  customerId: string;\n  taskType: string;\n  stage: number | null;\n  status: 'pending' | 'acknowledged' | 'completed';\n  acknowledgedAt: Date | null;\n};\n\nexport default function LabTechnicianPanel() {\n  const { toast } = useToast();\n  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null);\n  const [uploadLabel, setUploadLabel] = useState(\"\");\n  const reminderShown = useRef(false);\n\n  // Fetch all customers\n  const { data: customers = [], isLoading: loadingCustomers } = useQuery<Customer[]>({\n    queryKey: ['/api/lab/customers']\n  });\n\n  // Fetch customer stage progress\n  const { data: stageProgresses = [] } = useQuery<StageProgress[]>({\n    queryKey: ['/api/user/stage-progress', selectedCustomer?.id],\n    enabled: !!selectedCustomer\n  });\n\n  // Fetch customer documents\n  const { data: documents = [] } = useQuery<Document[]>({\n    queryKey: ['/api/user/documents', selectedCustomer?.id],\n    enabled: !!selectedCustomer\n  });\n\n  // Fetch staff acknowledgements\n  const { data: acknowledgements = [] } = useQuery<Acknowledgement[]>({\n    queryKey: ['/api/acknowledgements/staff']\n  });\n\n  // Show reminder for pending acknowledgements\n  useEffect(() => {\n    if (!reminderShown.current && acknowledgements.length > 0) {\n      const pendingCount = acknowledgements.filter(ack => ack.status === 'pending').length;\n      if (pendingCount > 0) {\n        toast({\n          title: \"Pending Tasks\",\n          description: `You have ${pendingCount} pending acknowledgement${pendingCount > 1 ? 's' : ''} to review`,\n        });\n        reminderShown.current = true;\n      }\n    }\n  }, [acknowledgements, toast]);\n\n  // Upload report mutation\n  const uploadMutation = useMutation({\n    mutationFn: async (data: { userId: string; stage: number; label: string; url: string }) => {\n      return apiRequest('POST', '/api/lab/upload-report', data);\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user/stage-progress', variables.userId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/user/documents', variables.userId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/acknowledgements/staff'] });\n      toast({\n        title: \"Success\",\n        description: \"Test report uploaded successfully\"\n      });\n      setUploadLabel(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to upload test report\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Update acknowledgement mutation\n  const acknowledgeMutation = useMutation({\n    mutationFn: async (data: { id: string; status: string }) => {\n      return apiRequest('PATCH', `/api/acknowledgements/${data.id}`, { status: data.status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/acknowledgements/staff'] });\n      toast({\n        title: \"Success\",\n        description: \"Task acknowledged successfully\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to acknowledge task\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const getUploadParams = async () => {\n    const res = await apiRequest('POST', '/api/objects/upload');\n    const data = await res.json();\n    return {\n      method: \"PUT\" as const,\n      url: data.url\n    };\n  };\n\n  const handleUploadComplete = (result: any) => {\n    if (!selectedCustomer || !uploadLabel.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a label for the upload\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const uploadedFile = result.successful?.[0];\n    if (!uploadedFile) {\n      toast({\n        title: \"Error\",\n        description: \"Upload failed\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Extract object path from presigned URL\n    const urlObj = new URL(uploadedFile.uploadURL);\n    const objectPath = urlObj.pathname.substring(1); // Remove leading /\n\n    uploadMutation.mutate({\n      userId: selectedCustomer.id,\n      stage: 2, // Lab technician only uploads for stage 2\n      label: uploadLabel,\n      url: objectPath\n    });\n  };\n\n  const getStageStatus = (stage: number): 'pending' | 'in_progress' | 'completed' => {\n    const progress = stageProgresses.find(p => p.stage === stage);\n    return progress?.status || 'pending';\n  };\n\n  const getPendingAcknowledgements = () => {\n    return acknowledgements.filter(ack => ack.status === 'pending');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n              <Microscope className=\"h-8 w-8\" />\n              Lab Technician Panel\n            </h1>\n            <p className=\"text-muted-foreground\">Manage test collections and upload lab reports</p>\n          </div>\n          <Badge variant=\"outline\" className=\"text-lg px-4 py-2\" data-testid=\"badge-role\">\n            Lab Technician\n          </Badge>\n        </div>\n\n        {getPendingAcknowledgements().length > 0 && (\n          <Card className=\"border-yellow-500/50\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <AlertCircle className=\"h-5 w-5 text-yellow-500\" />\n                Pending Acknowledgements ({getPendingAcknowledgements().length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2\">\n              {getPendingAcknowledgements().map(ack => (\n                <div key={ack.id} className=\"flex items-center justify-between p-3 bg-muted rounded-md\" data-testid={`acknowledgement-${ack.id}`}>\n                  <div>\n                    <p className=\"font-medium\">{ack.taskType}</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {ack.stage ? `Stage ${ack.stage}` : 'General'} - Customer: {ack.customerId}\n                    </p>\n                  </div>\n                  <Button\n                    size=\"sm\"\n                    onClick={() => acknowledgeMutation.mutate({\n                      id: ack.id,\n                      status: 'acknowledged'\n                    })}\n                    disabled={acknowledgeMutation.isPending}\n                    data-testid={`button-acknowledge-${ack.id}`}\n                  >\n                    <CheckCircle className=\"h-4 w-4 mr-2\" />\n                    Acknowledge\n                  </Button>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        )}\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Customer List */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Test Queue ({customers.length})</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {loadingCustomers ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <Clock className=\"h-6 w-6 animate-spin\" />\n                </div>\n              ) : (\n                <div className=\"space-y-2 max-h-[600px] overflow-y-auto\">\n                  {customers.map(customer => (\n                    <button\n                      key={customer.id}\n                      onClick={() => setSelectedCustomer(customer)}\n                      className={`w-full text-left p-3 rounded-md transition-colors ${\n                        selectedCustomer?.id === customer.id\n                          ? 'bg-primary text-primary-foreground'\n                          : 'hover-elevate active-elevate-2'\n                      }`}\n                      data-testid={`button-customer-${customer.id}`}\n                    >\n                      <p className=\"font-medium\">{customer.name || 'Unnamed'}</p>\n                      <p className=\"text-sm opacity-80\">{customer.email}</p>\n                    </button>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Patient Details & Actions */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {!selectedCustomer ? (\n              <Card>\n                <CardContent className=\"py-12 text-center\">\n                  <p className=\"text-muted-foreground\">Select a customer to view test details</p>\n                </CardContent>\n              </Card>\n            ) : (\n              <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n                <TabsList className=\"grid w-full grid-cols-3\">\n                  <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n                  <TabsTrigger value=\"upload\" data-testid=\"tab-upload\">Upload Test Report</TabsTrigger>\n                  <TabsTrigger value=\"documents\" data-testid=\"tab-documents\">Test History</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"overview\" className=\"space-y-4\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Patient Information</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div>\n                        <Label>Name</Label>\n                        <p className=\"text-lg font-medium\" data-testid=\"text-customer-name\">{selectedCustomer.name || 'Not provided'}</p>\n                      </div>\n                      <div>\n                        <Label>Email</Label>\n                        <p className=\"text-lg\" data-testid=\"text-customer-email\">{selectedCustomer.email}</p>\n                      </div>\n                      <div>\n                        <Label>Customer ID</Label>\n                        <p className=\"text-sm font-mono\" data-testid=\"text-customer-id\">{selectedCustomer.id}</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Stage Progress</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      {[1, 2, 3, 4, 5, 6].map(stage => {\n                        const status = getStageStatus(stage);\n                        const stageName = ['Consultation', 'Test Collection', 'Discussion', 'Diet Chart', 'Payment', 'Delivery'][stage - 1];\n                        const isLabStage = stage === 2;\n                        return (\n                          <div key={stage} className={`flex items-center justify-between p-2 rounded-md ${isLabStage ? 'bg-blue-500/10 border border-blue-500/20' : 'bg-muted'}`} data-testid={`stage-${stage}`}>\n                            <div className=\"flex items-center gap-3\">\n                              <div className={`h-8 w-8 rounded-full flex items-center justify-center ${\n                                status === 'completed' ? 'bg-green-500' :\n                                status === 'in_progress' ? 'bg-blue-500' :\n                                'bg-gray-500'\n                              }`}>\n                                <span className=\"text-white font-semibold\">{stage}</span>\n                              </div>\n                              <div>\n                                <p className=\"font-medium\">{stageName} {isLabStage && '(Your Stage)'}</p>\n                              </div>\n                            </div>\n                            <Badge variant={\n                              status === 'completed' ? 'default' :\n                              status === 'in_progress' ? 'secondary' :\n                              'outline'\n                            } data-testid={`badge-status-${stage}`}>\n                              {status === 'completed' ? 'Completed' :\n                               status === 'in_progress' ? 'In Progress' :\n                               'Pending'}\n                            </Badge>\n                          </div>\n                        );\n                      })}\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"upload\" className=\"space-y-4\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Upload Test Report (Stage 2)</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"p-4 bg-blue-500/10 border border-blue-500/20 rounded-md\">\n                        <p className=\"text-sm font-medium\">Stage 2: Test Collection</p>\n                        <p className=\"text-sm text-muted-foreground mt-1\">\n                          Upload lab test results and diagnostic reports for the patient.\n                        </p>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"upload-label\">Report Label</Label>\n                        <Input\n                          id=\"upload-label\"\n                          placeholder=\"e.g., Blood Work Results, X-Ray Report\"\n                          value={uploadLabel}\n                          onChange={(e) => setUploadLabel(e.target.value)}\n                          data-testid=\"input-label\"\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label>Upload File</Label>\n                        <ObjectUploader\n                          onGetUploadParameters={getUploadParams}\n                          onComplete={handleUploadComplete}\n                          maxFileSize={10 * 1024 * 1024}\n                          buttonVariant=\"outline\"\n                        >\n                          <Upload className=\"h-4 w-4 mr-2\" />\n                          Choose File\n                        </ObjectUploader>\n                      </div>\n\n                      <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                        <FileText className=\"h-4 w-4\" />\n                        <p>Supported formats: PDF, JPG, PNG (max 10MB)</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"documents\" className=\"space-y-4\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Test History ({documents.length})</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      {documents.length === 0 ? (\n                        <p className=\"text-center text-muted-foreground py-8\">No test reports uploaded yet</p>\n                      ) : (\n                        <div className=\"space-y-3\">\n                          {documents.map(doc => (\n                            <div key={doc.id} className=\"flex items-center justify-between p-3 bg-muted rounded-md\" data-testid={`document-${doc.id}`}>\n                              <div className=\"flex items-center gap-3\">\n                                <FileText className=\"h-5 w-5 text-muted-foreground\" />\n                                <div>\n                                  <p className=\"font-medium\">{doc.label}</p>\n                                  <p className=\"text-sm text-muted-foreground\">\n                                    Stage {doc.stage} - Uploaded by {doc.uploadedByRole}\n                                  </p>\n                                </div>\n                              </div>\n                              <Button variant=\"outline\" size=\"sm\" asChild data-testid={`button-download-${doc.id}`}>\n                                <a href={`/objects/${doc.url}`} download>\n                                  Download\n                                </a>\n                              </Button>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n              </Tabs>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17388},"client/src/components/ObjectUploader.tsx":{"content":"// Referenced from javascript_object_storage integration\nimport { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  buttonVariant?: \"default\" | \"outline\" | \"secondary\" | \"ghost\" | \"destructive\";\n  children: ReactNode;\n}\n\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760,\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  buttonVariant = \"default\",\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n        setShowModal(false);\n      })\n  );\n\n  return (\n    <div>\n      <Button \n        onClick={() => setShowModal(true)} \n        className={buttonClassName}\n        variant={buttonVariant}\n        type=\"button\"\n      >\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}\n","size_bytes":1796},"server/objectAcl.ts":{"content":"// Referenced from javascript_object_storage integration\nimport { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n}\n\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  if (!userId) {\n    return false;\n  }\n\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  return false;\n}\n","size_bytes":1526},"server/objectStorage.ts":{"content":"// Referenced from javascript_object_storage integration\nimport { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\nexport class ObjectStorageService {\n  constructor() {}\n\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      const [metadata] = await file.getMetadata();\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      \n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(rawPath: string): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n\n  async uploadBufferToPrivateDir(\n    buffer: Buffer,\n    filename: string,\n    contentType: string = 'application/pdf'\n  ): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    const uniqueId = randomUUID();\n    const objectPath = `${privateObjectDir}/${uniqueId}-${filename}`;\n    \n    const { bucketName, objectName } = parseObjectPath(objectPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const file = bucket.file(objectName);\n    \n    await file.save(buffer, {\n      contentType,\n      metadata: {\n        contentType\n      }\n    });\n    \n    return `/objects/${uniqueId}-${filename}`;\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}\n","size_bytes":8129},"client/src/pages/NutritionistPanel.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { FileText, Upload, CheckCircle, Clock, AlertCircle, Apple } from \"lucide-react\";\n\ntype Customer = {\n  id: string;\n  email: string;\n  name: string | null;\n  role: string;\n};\n\ntype StageProgress = {\n  id: number;\n  userId: string;\n  stage: number;\n  status: 'pending' | 'in_progress' | 'completed';\n  startedAt: Date | null;\n  completedAt: Date | null;\n};\n\ntype Document = {\n  id: number;\n  userId: string;\n  stage: number;\n  label: string;\n  url: string;\n  uploadedByRole: string;\n  uploadedAt: Date;\n};\n\ntype Acknowledgement = {\n  id: string;\n  staffId: string;\n  customerId: string;\n  taskType: string;\n  stage: number | null;\n  status: 'pending' | 'acknowledged' | 'completed';\n  acknowledgedAt: Date | null;\n};\n\nexport default function NutritionistPanel() {\n  const { toast } = useToast();\n  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null);\n  const [uploadLabel, setUploadLabel] = useState(\"\");\n  const [macros, setMacros] = useState(\"\");\n  const [weeklyPlan, setWeeklyPlan] = useState(\"\");\n  const reminderShown = useRef(false);\n\n  // Fetch customers with completed stage 3\n  const { data: customers = [], isLoading: loadingCustomers } = useQuery<Customer[]>({\n    queryKey: ['/api/nutritionist/customers']\n  });\n\n  // Fetch customer stage progress\n  const { data: stageProgresses = [] } = useQuery<StageProgress[]>({\n    queryKey: ['/api/user/stage-progress', selectedCustomer?.id],\n    enabled: !!selectedCustomer\n  });\n\n  // Fetch customer documents\n  const { data: documents = [] } = useQuery<Document[]>({\n    queryKey: ['/api/user/documents', selectedCustomer?.id],\n    enabled: !!selectedCustomer\n  });\n\n  // Fetch staff acknowledgements\n  const { data: acknowledgements = [] } = useQuery<Acknowledgement[]>({\n    queryKey: ['/api/acknowledgements/staff']\n  });\n\n  // Show reminder for pending acknowledgements\n  useEffect(() => {\n    if (!reminderShown.current && acknowledgements.length > 0) {\n      const pendingCount = acknowledgements.filter(ack => ack.status === 'pending').length;\n      if (pendingCount > 0) {\n        toast({\n          title: \"Pending Tasks\",\n          description: `You have ${pendingCount} pending acknowledgement${pendingCount > 1 ? 's' : ''} to review`,\n        });\n        reminderShown.current = true;\n      }\n    }\n  }, [acknowledgements, toast]);\n\n  // Generate PDF mutation\n  const generatePdfMutation = useMutation({\n    mutationFn: async (data: { userId: string; macros?: string; weeklyPlan?: string }) => {\n      return apiRequest('POST', `/api/nutritionist/diet-plan/${data.userId}/pdf`, {\n        macros: data.macros,\n        weeklyPlan: data.weeklyPlan\n      });\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user/documents', variables.userId] });\n      toast({\n        title: \"PDF Generated\",\n        description: \"Diet chart PDF has been generated successfully\"\n      });\n      setMacros(\"\");\n      setWeeklyPlan(\"\");\n      setUploadLabel(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Generation Failed\",\n        description: \"Failed to generate PDF. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Upload diet chart mutation\n  const uploadMutation = useMutation({\n    mutationFn: async (data: { userId: string; label: string; url: string; macros?: string; weeklyPlan?: string }) => {\n      return apiRequest('POST', '/api/nutritionist/upload-diet-chart', data);\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user/stage-progress', variables.userId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/user/documents', variables.userId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/acknowledgements/staff'] });\n      toast({\n        title: \"Success\",\n        description: \"Diet chart uploaded successfully\"\n      });\n      setUploadLabel(\"\");\n      setMacros(\"\");\n      setWeeklyPlan(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to upload diet chart\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Update acknowledgement mutation\n  const acknowledgeMutation = useMutation({\n    mutationFn: async (data: { id: string; status: string }) => {\n      return apiRequest('PATCH', `/api/acknowledgements/${data.id}`, { status: data.status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/acknowledgements/staff'] });\n      toast({\n        title: \"Success\",\n        description: \"Task acknowledged successfully\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to acknowledge task\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const getUploadParams = async () => {\n    const res = await apiRequest('POST', '/api/objects/upload');\n    const data = await res.json();\n    return {\n      method: \"PUT\" as const,\n      url: data.url\n    };\n  };\n\n  const handleUploadComplete = (result: any) => {\n    if (!selectedCustomer || !uploadLabel.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a label for the diet chart\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const uploadedFile = result.successful?.[0];\n    if (!uploadedFile) {\n      toast({\n        title: \"Error\",\n        description: \"Upload failed\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Extract object path from presigned URL\n    const urlObj = new URL(uploadedFile.uploadURL);\n    const objectPath = urlObj.pathname.substring(1); // Remove leading /\n\n    uploadMutation.mutate({\n      userId: selectedCustomer.id,\n      label: uploadLabel,\n      url: objectPath,\n      macros: macros || undefined,\n      weeklyPlan: weeklyPlan || undefined\n    });\n  };\n\n  const getStageStatus = (stage: number): 'pending' | 'in_progress' | 'completed' => {\n    const progress = stageProgresses.find(p => p.stage === stage);\n    return progress?.status || 'pending';\n  };\n\n  const getPendingAcknowledgements = () => {\n    return acknowledgements.filter(ack => ack.status === 'pending');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n              <Apple className=\"h-8 w-8\" />\n              Nutritionist Panel\n            </h1>\n            <p className=\"text-muted-foreground\">Create personalized diet charts and meal plans</p>\n          </div>\n          <Badge variant=\"outline\" className=\"text-lg px-4 py-2\" data-testid=\"badge-role\">\n            Nutritionist\n          </Badge>\n        </div>\n\n        {getPendingAcknowledgements().length > 0 && (\n          <Card className=\"border-yellow-500/50\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <AlertCircle className=\"h-5 w-5 text-yellow-500\" />\n                Pending Acknowledgements ({getPendingAcknowledgements().length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2\">\n              {getPendingAcknowledgements().map(ack => (\n                <div key={ack.id} className=\"flex items-center justify-between p-3 bg-muted rounded-md\" data-testid={`acknowledgement-${ack.id}`}>\n                  <div>\n                    <p className=\"font-medium\">{ack.taskType}</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {ack.stage ? `Stage ${ack.stage}` : 'General'} - Customer: {ack.customerId}\n                    </p>\n                  </div>\n                  <Button\n                    size=\"sm\"\n                    onClick={() => acknowledgeMutation.mutate({\n                      id: ack.id,\n                      status: 'acknowledged'\n                    })}\n                    disabled={acknowledgeMutation.isPending}\n                    data-testid={`button-acknowledge-${ack.id}`}\n                  >\n                    <CheckCircle className=\"h-4 w-4 mr-2\" />\n                    Acknowledge\n                  </Button>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        )}\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Customer List */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Ready for Diet Plan ({customers.length})</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {loadingCustomers ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <Clock className=\"h-6 w-6 animate-spin\" />\n                </div>\n              ) : (\n                <div className=\"space-y-2 max-h-[600px] overflow-y-auto\">\n                  {customers.length === 0 ? (\n                    <p className=\"text-center text-muted-foreground py-4\">No customers ready yet</p>\n                  ) : (\n                    customers.map(customer => (\n                      <button\n                        key={customer.id}\n                        onClick={() => setSelectedCustomer(customer)}\n                        className={`w-full text-left p-3 rounded-md transition-colors ${\n                          selectedCustomer?.id === customer.id\n                            ? 'bg-primary text-primary-foreground'\n                            : 'hover-elevate active-elevate-2'\n                        }`}\n                        data-testid={`button-customer-${customer.id}`}\n                      >\n                        <p className=\"font-medium\">{customer.name || 'Unnamed'}</p>\n                        <p className=\"text-sm opacity-80\">{customer.email}</p>\n                      </button>\n                    ))\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Patient Details & Actions */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {!selectedCustomer ? (\n              <Card>\n                <CardContent className=\"py-12 text-center\">\n                  <p className=\"text-muted-foreground\">Select a customer to create diet plan</p>\n                </CardContent>\n              </Card>\n            ) : (\n              <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n                <TabsList className=\"grid w-full grid-cols-3\">\n                  <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n                  <TabsTrigger value=\"create\" data-testid=\"tab-create\">Create Diet Chart</TabsTrigger>\n                  <TabsTrigger value=\"documents\" data-testid=\"tab-documents\">Diet Plans</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"overview\" className=\"space-y-4\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Patient Information</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div>\n                        <Label>Name</Label>\n                        <p className=\"text-lg font-medium\" data-testid=\"text-customer-name\">{selectedCustomer.name || 'Not provided'}</p>\n                      </div>\n                      <div>\n                        <Label>Email</Label>\n                        <p className=\"text-lg\" data-testid=\"text-customer-email\">{selectedCustomer.email}</p>\n                      </div>\n                      <div>\n                        <Label>Customer ID</Label>\n                        <p className=\"text-sm font-mono\" data-testid=\"text-customer-id\">{selectedCustomer.id}</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Stage Progress</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      {[1, 2, 3, 4, 5, 6].map(stage => {\n                        const status = getStageStatus(stage);\n                        const stageName = ['Consultation', 'Test Collection', 'Discussion', 'Diet Chart', 'Payment', 'Delivery'][stage - 1];\n                        const isNutritionistStage = stage === 4;\n                        return (\n                          <div key={stage} className={`flex items-center justify-between p-2 rounded-md ${isNutritionistStage ? 'bg-green-500/10 border border-green-500/20' : 'bg-muted'}`} data-testid={`stage-${stage}`}>\n                            <div className=\"flex items-center gap-3\">\n                              <div className={`h-8 w-8 rounded-full flex items-center justify-center ${\n                                status === 'completed' ? 'bg-green-500' :\n                                status === 'in_progress' ? 'bg-blue-500' :\n                                'bg-gray-500'\n                              }`}>\n                                <span className=\"text-white font-semibold\">{stage}</span>\n                              </div>\n                              <div>\n                                <p className=\"font-medium\">{stageName} {isNutritionistStage && '(Your Stage)'}</p>\n                              </div>\n                            </div>\n                            <Badge variant={\n                              status === 'completed' ? 'default' :\n                              status === 'in_progress' ? 'secondary' :\n                              'outline'\n                            } data-testid={`badge-status-${stage}`}>\n                              {status === 'completed' ? 'Completed' :\n                               status === 'in_progress' ? 'In Progress' :\n                               'Pending'}\n                            </Badge>\n                          </div>\n                        );\n                      })}\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"create\" className=\"space-y-4\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Create Diet Chart (Stage 4)</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"p-4 bg-green-500/10 border border-green-500/20 rounded-md\">\n                        <p className=\"text-sm font-medium\">Stage 4: Diet Chart Creation</p>\n                        <p className=\"text-sm text-muted-foreground mt-1\">\n                          Create a personalized diet plan based on consultation and test results.\n                        </p>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"upload-label\">Diet Plan Name</Label>\n                        <Input\n                          id=\"upload-label\"\n                          placeholder=\"e.g., Personalized Nutrition Plan, Weight Loss Diet\"\n                          value={uploadLabel}\n                          onChange={(e) => setUploadLabel(e.target.value)}\n                          data-testid=\"input-label\"\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"macros\">Macros (Optional)</Label>\n                        <Textarea\n                          id=\"macros\"\n                          placeholder=\"e.g., Protein: 150g, Carbs: 200g, Fats: 60g\"\n                          value={macros}\n                          onChange={(e) => setMacros(e.target.value)}\n                          data-testid=\"input-macros\"\n                          rows={3}\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"weekly-plan\">Weekly Plan Summary (Optional)</Label>\n                        <Textarea\n                          id=\"weekly-plan\"\n                          placeholder=\"Describe the weekly meal plan structure...\"\n                          value={weeklyPlan}\n                          onChange={(e) => setWeeklyPlan(e.target.value)}\n                          data-testid=\"input-weekly-plan\"\n                          rows={4}\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label>Upload Diet Chart (PDF)</Label>\n                        <ObjectUploader\n                          onGetUploadParameters={getUploadParams}\n                          onComplete={handleUploadComplete}\n                          maxFileSize={10 * 1024 * 1024}\n                          buttonVariant=\"outline\"\n                        >\n                          <Upload className=\"h-4 w-4 mr-2\" />\n                          Choose File\n                        </ObjectUploader>\n                      </div>\n\n                      <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                        <FileText className=\"h-4 w-4\" />\n                        <p>Supported formats: PDF (max 10MB)</p>\n                      </div>\n\n                      <div className=\"pt-4 border-t\">\n                        <p className=\"text-sm text-muted-foreground mb-3\">\n                          Or generate a PDF automatically from macros and weekly plan data:\n                        </p>\n                        <Button\n                          onClick={() => selectedCustomer && generatePdfMutation.mutate({\n                            userId: selectedCustomer.id,\n                            macros,\n                            weeklyPlan\n                          })}\n                          disabled={generatePdfMutation.isPending || !macros || !weeklyPlan}\n                          variant=\"secondary\"\n                          className=\"w-full\"\n                          data-testid=\"button-generate-pdf\"\n                        >\n                          <FileText className=\"h-4 w-4 mr-2\" />\n                          {generatePdfMutation.isPending ? 'Generating PDF...' : 'Generate PDF from Data'}\n                        </Button>\n                        {(!macros || !weeklyPlan) && (\n                          <p className=\"text-xs text-muted-foreground mt-2\">\n                            Fill in macros and weekly plan to enable PDF generation\n                          </p>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"documents\" className=\"space-y-4\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Diet Plans ({documents.filter(d => d.stage === 4).length})</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      {documents.filter(d => d.stage === 4).length === 0 ? (\n                        <p className=\"text-center text-muted-foreground py-8\">No diet plans uploaded yet</p>\n                      ) : (\n                        <div className=\"space-y-3\">\n                          {documents.filter(d => d.stage === 4).map(doc => (\n                            <div key={doc.id} className=\"flex items-center justify-between p-3 bg-muted rounded-md\" data-testid={`document-${doc.id}`}>\n                              <div className=\"flex items-center gap-3\">\n                                <FileText className=\"h-5 w-5 text-muted-foreground\" />\n                                <div>\n                                  <p className=\"font-medium\">{doc.label}</p>\n                                  <p className=\"text-sm text-muted-foreground\">\n                                    Stage {doc.stage} - Uploaded by {doc.uploadedByRole}\n                                  </p>\n                                </div>\n                              </div>\n                              <Button variant=\"outline\" size=\"sm\" asChild data-testid={`button-download-${doc.id}`}>\n                                <a href={`/objects/${doc.url}`} download>\n                                  Download\n                                </a>\n                              </Button>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n              </Tabs>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":21292},"client/src/pages/ConsultantPanel.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { FileText, Upload, CheckCircle, Clock, AlertCircle } from \"lucide-react\";\n\ntype Customer = {\n  id: string;\n  email: string;\n  name: string | null;\n  role: string;\n};\n\ntype StageProgress = {\n  id: number;\n  userId: string;\n  stage: number;\n  status: 'pending' | 'in_progress' | 'completed';\n  startedAt: Date | null;\n  completedAt: Date | null;\n};\n\ntype Document = {\n  id: number;\n  userId: string;\n  stage: number;\n  label: string;\n  url: string;\n  uploadedByRole: string;\n  uploadedAt: Date;\n};\n\ntype Acknowledgement = {\n  id: string;\n  staffId: string;\n  customerId: string;\n  taskType: string;\n  stage: number | null;\n  status: 'pending' | 'acknowledged' | 'completed';\n  acknowledgedAt: Date | null;\n};\n\nexport default function ConsultantPanel() {\n  const { toast } = useToast();\n  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null);\n  const [uploadStage, setUploadStage] = useState<1 | 3>(1);\n  const [uploadLabel, setUploadLabel] = useState(\"\");\n  const reminderShown = useRef(false);\n\n  // Fetch all customers\n  const { data: customers = [], isLoading: loadingCustomers } = useQuery<Customer[]>({\n    queryKey: ['/api/consultant/customers']\n  });\n\n  // Fetch customer stage progress\n  const { data: stageProgresses = [] } = useQuery<StageProgress[]>({\n    queryKey: ['/api/user/stage-progress', selectedCustomer?.id],\n    enabled: !!selectedCustomer\n  });\n\n  // Fetch customer documents\n  const { data: documents = [] } = useQuery<Document[]>({\n    queryKey: ['/api/user/documents', selectedCustomer?.id],\n    enabled: !!selectedCustomer\n  });\n\n  // Fetch staff acknowledgements\n  const { data: acknowledgements = [] } = useQuery<Acknowledgement[]>({\n    queryKey: ['/api/acknowledgements/staff']\n  });\n\n  // Show reminder for pending acknowledgements\n  useEffect(() => {\n    if (!reminderShown.current && acknowledgements.length > 0) {\n      const pendingCount = acknowledgements.filter(ack => ack.status === 'pending').length;\n      if (pendingCount > 0) {\n        toast({\n          title: \"Pending Tasks\",\n          description: `You have ${pendingCount} pending acknowledgement${pendingCount > 1 ? 's' : ''} to review`,\n        });\n        reminderShown.current = true;\n      }\n    }\n  }, [acknowledgements, toast]);\n\n  // Upload report mutation\n  const uploadMutation = useMutation({\n    mutationFn: async (data: { userId: string; stage: number; label: string; url: string }) => {\n      return apiRequest('POST', '/api/consultant/upload-report', data);\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user/stage-progress', variables.userId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/user/documents', variables.userId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/acknowledgements/staff'] });\n      toast({\n        title: \"Success\",\n        description: \"Report uploaded successfully\"\n      });\n      setUploadLabel(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to upload report\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Update acknowledgement mutation\n  const acknowledgeMutation = useMutation({\n    mutationFn: async (data: { id: string; status: string }) => {\n      return apiRequest('PATCH', `/api/acknowledgements/${data.id}`, { status: data.status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/acknowledgements/staff'] });\n      toast({\n        title: \"Success\",\n        description: \"Task acknowledged successfully\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to acknowledge task\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const getUploadParams = async () => {\n    const res = await apiRequest('POST', '/api/objects/upload');\n    const data = await res.json();\n    return {\n      method: \"PUT\" as const,\n      url: data.url\n    };\n  };\n\n  const handleUploadComplete = (result: any) => {\n    if (!selectedCustomer || !uploadLabel.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a label for the upload\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const uploadedFile = result.successful?.[0];\n    if (!uploadedFile) {\n      toast({\n        title: \"Error\",\n        description: \"Upload failed\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Extract object path from presigned URL\n    const urlObj = new URL(uploadedFile.uploadURL);\n    const objectPath = urlObj.pathname.substring(1); // Remove leading /\n\n    uploadMutation.mutate({\n      userId: selectedCustomer.id,\n      stage: uploadStage,\n      label: uploadLabel,\n      url: objectPath\n    });\n  };\n\n  const getStageStatus = (stage: number): 'pending' | 'in_progress' | 'completed' => {\n    const progress = stageProgresses.find(p => p.stage === stage);\n    return progress?.status || 'pending';\n  };\n\n  const getPendingAcknowledgements = () => {\n    return acknowledgements.filter(ack => ack.status === 'pending');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Consultant Panel</h1>\n            <p className=\"text-muted-foreground\">Manage patient consultations and medical reports</p>\n          </div>\n          <Badge variant=\"outline\" className=\"text-lg px-4 py-2\" data-testid=\"badge-role\">\n            Consultant\n          </Badge>\n        </div>\n\n        {getPendingAcknowledgements().length > 0 && (\n          <Card className=\"border-yellow-500/50\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <AlertCircle className=\"h-5 w-5 text-yellow-500\" />\n                Pending Acknowledgements ({getPendingAcknowledgements().length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2\">\n              {getPendingAcknowledgements().map(ack => (\n                <div key={ack.id} className=\"flex items-center justify-between p-3 bg-muted rounded-md\" data-testid={`acknowledgement-${ack.id}`}>\n                  <div>\n                    <p className=\"font-medium\">{ack.taskType}</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {ack.stage ? `Stage ${ack.stage}` : 'General'} - Customer: {ack.customerId}\n                    </p>\n                  </div>\n                  <Button\n                    size=\"sm\"\n                    onClick={() => acknowledgeMutation.mutate({\n                      id: ack.id,\n                      status: 'acknowledged'\n                    })}\n                    disabled={acknowledgeMutation.isPending}\n                    data-testid={`button-acknowledge-${ack.id}`}\n                  >\n                    <CheckCircle className=\"h-4 w-4 mr-2\" />\n                    Acknowledge\n                  </Button>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        )}\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Customer List */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Customers ({customers.length})</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {loadingCustomers ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <Clock className=\"h-6 w-6 animate-spin\" />\n                </div>\n              ) : (\n                <div className=\"space-y-2 max-h-[600px] overflow-y-auto\">\n                  {customers.map(customer => (\n                    <button\n                      key={customer.id}\n                      onClick={() => setSelectedCustomer(customer)}\n                      className={`w-full text-left p-3 rounded-md transition-colors ${\n                        selectedCustomer?.id === customer.id\n                          ? 'bg-primary text-primary-foreground'\n                          : 'hover-elevate active-elevate-2'\n                      }`}\n                      data-testid={`button-customer-${customer.id}`}\n                    >\n                      <p className=\"font-medium\">{customer.name || 'Unnamed'}</p>\n                      <p className=\"text-sm opacity-80\">{customer.email}</p>\n                    </button>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Patient Details & Actions */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {!selectedCustomer ? (\n              <Card>\n                <CardContent className=\"py-12 text-center\">\n                  <p className=\"text-muted-foreground\">Select a customer to view details</p>\n                </CardContent>\n              </Card>\n            ) : (\n              <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n                <TabsList className=\"grid w-full grid-cols-3\">\n                  <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n                  <TabsTrigger value=\"upload\" data-testid=\"tab-upload\">Upload Reports</TabsTrigger>\n                  <TabsTrigger value=\"documents\" data-testid=\"tab-documents\">Documents</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"overview\" className=\"space-y-4\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Patient Information</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div>\n                        <Label>Name</Label>\n                        <p className=\"text-lg font-medium\" data-testid=\"text-customer-name\">{selectedCustomer.name || 'Not provided'}</p>\n                      </div>\n                      <div>\n                        <Label>Email</Label>\n                        <p className=\"text-lg\" data-testid=\"text-customer-email\">{selectedCustomer.email}</p>\n                      </div>\n                      <div>\n                        <Label>Customer ID</Label>\n                        <p className=\"text-sm font-mono\" data-testid=\"text-customer-id\">{selectedCustomer.id}</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Stage Progress</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      {[1, 2, 3, 4, 5, 6].map(stage => {\n                        const status = getStageStatus(stage);\n                        const stageName = ['Consultation', 'Test Collection', 'Discussion', 'Diet Chart', 'Payment', 'Delivery'][stage - 1];\n                        return (\n                          <div key={stage} className=\"flex items-center justify-between p-2 rounded-md bg-muted\" data-testid={`stage-${stage}`}>\n                            <div className=\"flex items-center gap-3\">\n                              <div className={`h-8 w-8 rounded-full flex items-center justify-center ${\n                                status === 'completed' ? 'bg-green-500' :\n                                status === 'in_progress' ? 'bg-blue-500' :\n                                'bg-gray-500'\n                              }`}>\n                                <span className=\"text-white font-semibold\">{stage}</span>\n                              </div>\n                              <div>\n                                <p className=\"font-medium\">{stageName}</p>\n                              </div>\n                            </div>\n                            <Badge variant={\n                              status === 'completed' ? 'default' :\n                              status === 'in_progress' ? 'secondary' :\n                              'outline'\n                            } data-testid={`badge-status-${stage}`}>\n                              {status === 'completed' ? 'Completed' :\n                               status === 'in_progress' ? 'In Progress' :\n                               'Pending'}\n                            </Badge>\n                          </div>\n                        );\n                      })}\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"upload\" className=\"space-y-4\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Upload Medical Reports</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"space-y-2\">\n                        <Label>Select Stage</Label>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            variant={uploadStage === 1 ? 'default' : 'outline'}\n                            onClick={() => setUploadStage(1)}\n                            data-testid=\"button-stage-1\"\n                          >\n                            Stage 1 - Initial Consultation\n                          </Button>\n                          <Button\n                            variant={uploadStage === 3 ? 'default' : 'outline'}\n                            onClick={() => setUploadStage(3)}\n                            data-testid=\"button-stage-3\"\n                          >\n                            Stage 3 - Discussion Report\n                          </Button>\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"upload-label\">Report Label</Label>\n                        <Input\n                          id=\"upload-label\"\n                          placeholder=\"e.g., Initial Assessment, Follow-up Report\"\n                          value={uploadLabel}\n                          onChange={(e) => setUploadLabel(e.target.value)}\n                          data-testid=\"input-label\"\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label>Upload File</Label>\n                        <ObjectUploader\n                          onGetUploadParameters={getUploadParams}\n                          onComplete={handleUploadComplete}\n                          maxFileSize={10 * 1024 * 1024}\n                          buttonVariant=\"outline\"\n                        >\n                          <Upload className=\"h-4 w-4 mr-2\" />\n                          Choose File\n                        </ObjectUploader>\n                      </div>\n\n                      <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                        <FileText className=\"h-4 w-4\" />\n                        <p>Supported formats: PDF, JPG, PNG (max 10MB)</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"documents\" className=\"space-y-4\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Uploaded Documents ({documents.length})</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      {documents.length === 0 ? (\n                        <p className=\"text-center text-muted-foreground py-8\">No documents uploaded yet</p>\n                      ) : (\n                        <div className=\"space-y-3\">\n                          {documents.map(doc => (\n                            <div key={doc.id} className=\"flex items-center justify-between p-3 bg-muted rounded-md\" data-testid={`document-${doc.id}`}>\n                              <div className=\"flex items-center gap-3\">\n                                <FileText className=\"h-5 w-5 text-muted-foreground\" />\n                                <div>\n                                  <p className=\"font-medium\">{doc.label}</p>\n                                  <p className=\"text-sm text-muted-foreground\">\n                                    Stage {doc.stage} - Uploaded by {doc.uploadedByRole}\n                                  </p>\n                                </div>\n                              </div>\n                              <Button variant=\"outline\" size=\"sm\" asChild data-testid={`button-download-${doc.id}`}>\n                                <a href={`/objects/${doc.url}`} download>\n                                  Download\n                                </a>\n                              </Button>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n              </Tabs>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17650},"client/src/pages/ChefPanel.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { ChefHat, Clock, CheckCircle, Calendar } from \"lucide-react\";\n\ntype Customer = {\n  id: string;\n  email: string;\n  name: string | null;\n  role: string;\n};\n\ntype Plan = {\n  id: number;\n  userId: string;\n  planType: string;\n  isActive: boolean;\n  startDate: Date;\n  endDate: Date | null;\n};\n\ntype DietPlan = {\n  id: number;\n  userId: string;\n  macros: string | null;\n  weeklyPlan: string | null;\n};\n\ntype Address = {\n  id: number;\n  userId: string;\n  addressLine1: string;\n  addressLine2: string | null;\n  city: string;\n  state: string;\n  zipCode: string;\n};\n\ntype ActivePlan = {\n  customer: Customer;\n  plan: Plan | null;\n  addresses: Address[];\n  dietPlan: DietPlan | null;\n};\n\ntype StaffActivity = {\n  id: number;\n  staffId: string;\n  customerId: string;\n  actionType: string;\n  stage: number | null;\n  description: string;\n  metadata: any;\n  createdAt: Date;\n};\n\nexport default function ChefPanel() {\n  const { toast } = useToast();\n  const [selectedPlan, setSelectedPlan] = useState<ActivePlan | null>(null);\n  const [selectedDate, setSelectedDate] = useState(() => {\n    const today = new Date();\n    return today.toISOString().split('T')[0];\n  });\n  const [selectedMealType, setSelectedMealType] = useState<'breakfast' | 'lunch' | 'dinner'>('breakfast');\n\n  // Fetch active plans\n  const { data: activePlans = [], isLoading: loadingPlans } = useQuery<ActivePlan[]>({\n    queryKey: ['/api/chef/active-plans']\n  });\n\n  // Fetch my preparation activity\n  const { data: myActivity = [] } = useQuery<StaffActivity[]>({\n    queryKey: ['/api/activity/staff']\n  });\n\n  // Mark meal as prepared mutation\n  const markPreparedMutation = useMutation({\n    mutationFn: async (data: { userId: string; mealType: string; date: string }) => {\n      return apiRequest('POST', '/api/chef/mark-prepared', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/activity/staff'] });\n      toast({\n        title: \"Success\",\n        description: `${selectedMealType.charAt(0).toUpperCase() + selectedMealType.slice(1)} marked as prepared`\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to mark meal as prepared\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleMarkPrepared = () => {\n    if (!selectedPlan?.customer) return;\n    \n    markPreparedMutation.mutate({\n      userId: selectedPlan.customer.id,\n      mealType: selectedMealType,\n      date: selectedDate\n    });\n  };\n\n  const getMealPreparations = () => {\n    return myActivity.filter(a => a.actionType === 'meal_prepared');\n  };\n\n  const getTodayPreparations = () => {\n    const today = new Date().toISOString().split('T')[0];\n    return getMealPreparations().filter(a => {\n      const metadata = a.metadata as { date?: string };\n      return metadata.date === today;\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n              <ChefHat className=\"h-8 w-8\" />\n              Chef Panel\n            </h1>\n            <p className=\"text-muted-foreground\">Prepare meals for active diet plans</p>\n          </div>\n          <Badge variant=\"outline\" className=\"text-lg px-4 py-2\" data-testid=\"badge-role\">\n            Chef\n          </Badge>\n        </div>\n\n        <Card className=\"border-blue-500/50\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-5 w-5 text-blue-500\" />\n              Today's Preparations ({getTodayPreparations().length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {getTodayPreparations().length === 0 ? (\n              <p className=\"text-center text-muted-foreground py-4\">No meals prepared today yet</p>\n            ) : (\n              <div className=\"space-y-2\">\n                {getTodayPreparations().map(prep => {\n                  const metadata = prep.metadata as { mealType?: string; date?: string };\n                  return (\n                    <div key={prep.id} className=\"flex items-center justify-between p-2 bg-muted rounded-md\" data-testid={`prep-${prep.id}`}>\n                      <div>\n                        <p className=\"font-medium capitalize\">{metadata.mealType}</p>\n                        <p className=\"text-sm text-muted-foreground\">Customer: {prep.customerId}</p>\n                      </div>\n                      <Badge variant=\"default\">Prepared</Badge>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Active Plans List */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Active Plans ({activePlans.length})</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {loadingPlans ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <Clock className=\"h-6 w-6 animate-spin\" />\n                </div>\n              ) : (\n                <div className=\"space-y-2 max-h-[600px] overflow-y-auto\">\n                  {activePlans.length === 0 ? (\n                    <p className=\"text-center text-muted-foreground py-4\">No active plans</p>\n                  ) : (\n                    activePlans.map((plan) => (\n                      <button\n                        key={plan.customer.id}\n                        onClick={() => setSelectedPlan(plan)}\n                        className={`w-full text-left p-3 rounded-md transition-colors ${\n                          selectedPlan?.customer.id === plan.customer.id\n                            ? 'bg-primary text-primary-foreground'\n                            : 'hover-elevate active-elevate-2'\n                        }`}\n                        data-testid={`button-plan-${plan.customer.id}`}\n                      >\n                        <p className=\"font-medium\">{plan.customer.name || 'Unnamed'}</p>\n                        <p className=\"text-sm opacity-80\">{plan.plan?.planType || 'No plan type'}</p>\n                      </button>\n                    ))\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Plan Details & Preparation */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {!selectedPlan ? (\n              <Card>\n                <CardContent className=\"py-12 text-center\">\n                  <p className=\"text-muted-foreground\">Select an active plan to prepare meals</p>\n                </CardContent>\n              </Card>\n            ) : (\n              <Tabs defaultValue=\"diet\" className=\"space-y-4\">\n                <TabsList className=\"grid w-full grid-cols-3\">\n                  <TabsTrigger value=\"diet\" data-testid=\"tab-diet\">Diet Plan</TabsTrigger>\n                  <TabsTrigger value=\"prepare\" data-testid=\"tab-prepare\">Prepare Meal</TabsTrigger>\n                  <TabsTrigger value=\"history\" data-testid=\"tab-history\">Preparation History</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"diet\" className=\"space-y-4\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Customer Information</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-muted-foreground\">Name</label>\n                        <p className=\"text-lg font-medium\" data-testid=\"text-customer-name\">{selectedPlan.customer.name || 'Not provided'}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-muted-foreground\">Email</label>\n                        <p className=\"text-lg\" data-testid=\"text-customer-email\">{selectedPlan.customer.email}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-muted-foreground\">Plan Type</label>\n                        <Badge variant=\"outline\" className=\"text-base\" data-testid=\"text-plan-type\">{selectedPlan.plan?.planType || 'Unknown'}</Badge>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {selectedPlan.dietPlan && (\n                    <Card>\n                      <CardHeader>\n                        <CardTitle>Diet Plan Details</CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        {selectedPlan.dietPlan.macros && (\n                          <div>\n                            <label className=\"text-sm font-medium text-muted-foreground\">Macros</label>\n                            <p className=\"mt-1 whitespace-pre-wrap\" data-testid=\"text-macros\">{selectedPlan.dietPlan.macros}</p>\n                          </div>\n                        )}\n                        {selectedPlan.dietPlan.weeklyPlan && (\n                          <div>\n                            <label className=\"text-sm font-medium text-muted-foreground\">Weekly Plan</label>\n                            <p className=\"mt-1 whitespace-pre-wrap\" data-testid=\"text-weekly-plan\">{selectedPlan.dietPlan.weeklyPlan}</p>\n                          </div>\n                        )}\n                        {!selectedPlan.dietPlan.macros && !selectedPlan.dietPlan.weeklyPlan && (\n                          <p className=\"text-center text-muted-foreground\">No diet plan details available</p>\n                        )}\n                      </CardContent>\n                    </Card>\n                  )}\n\n                  {selectedPlan.addresses.length > 0 && (\n                    <Card>\n                      <CardHeader>\n                        <CardTitle>Delivery Address</CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"space-y-2\">\n                          {selectedPlan.addresses.map(addr => (\n                            <div key={addr.id} className=\"p-3 bg-muted rounded-md\" data-testid={`address-${addr.id}`}>\n                              <p className=\"font-medium\">{addr.addressLine1}</p>\n                              {addr.addressLine2 && <p className=\"text-sm\">{addr.addressLine2}</p>}\n                              <p className=\"text-sm text-muted-foreground\">{addr.city}, {addr.state} {addr.zipCode}</p>\n                            </div>\n                          ))}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  )}\n                </TabsContent>\n\n                <TabsContent value=\"prepare\" className=\"space-y-4\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Mark Meal as Prepared</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      <div className=\"space-y-2\">\n                        <label className=\"text-sm font-medium\">Date</label>\n                        <div className=\"flex items-center gap-2\">\n                          <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                          <input\n                            type=\"date\"\n                            value={selectedDate}\n                            onChange={(e) => setSelectedDate(e.target.value)}\n                            className=\"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\"\n                            data-testid=\"input-date\"\n                          />\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <label className=\"text-sm font-medium\">Meal Type</label>\n                        <div className=\"grid grid-cols-3 gap-2\">\n                          {(['breakfast', 'lunch', 'dinner'] as const).map(mealType => (\n                            <button\n                              key={mealType}\n                              onClick={() => setSelectedMealType(mealType)}\n                              className={`p-3 rounded-md capitalize transition-colors ${\n                                selectedMealType === mealType\n                                  ? 'bg-primary text-primary-foreground'\n                                  : 'bg-muted hover-elevate active-elevate-2'\n                              }`}\n                              data-testid={`button-meal-${mealType}`}\n                            >\n                              {mealType}\n                            </button>\n                          ))}\n                        </div>\n                      </div>\n\n                      <Button\n                        onClick={handleMarkPrepared}\n                        disabled={markPreparedMutation.isPending}\n                        className=\"w-full\"\n                        size=\"lg\"\n                        data-testid=\"button-mark-prepared\"\n                      >\n                        <CheckCircle className=\"h-4 w-4 mr-2\" />\n                        Mark as Prepared\n                      </Button>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"history\" className=\"space-y-4\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>All Preparations ({getMealPreparations().length})</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      {getMealPreparations().length === 0 ? (\n                        <p className=\"text-center text-muted-foreground py-8\">No preparation history</p>\n                      ) : (\n                        <div className=\"space-y-3 max-h-[500px] overflow-y-auto\">\n                          {getMealPreparations().map(prep => {\n                            const metadata = prep.metadata as { mealType?: string; date?: string };\n                            return (\n                              <div key={prep.id} className=\"flex items-center justify-between p-3 bg-muted rounded-md\" data-testid={`history-${prep.id}`}>\n                                <div>\n                                  <p className=\"font-medium capitalize\">{metadata.mealType}</p>\n                                  <p className=\"text-sm text-muted-foreground\">\n                                    {metadata.date} - {new Date(prep.createdAt).toLocaleString()}\n                                  </p>\n                                </div>\n                                <Badge variant=\"default\">Prepared</Badge>\n                              </div>\n                            );\n                          })}\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n              </Tabs>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15765},"client/src/pages/DeliveryPanel.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Truck, MapPin, Package, CheckCircle, Navigation } from \"lucide-react\";\n\ntype Order = {\n  id: number;\n  userId: string;\n  status: string;\n  totalAmount: number;\n  deliveryDate: Date;\n  assignedDeliveryPersonId: string | null;\n  createdAt: Date;\n};\n\ntype StaffActivity = {\n  id: number;\n  staffId: string;\n  customerId: string;\n  actionType: string;\n  stage: number | null;\n  description: string;\n  metadata: any;\n  createdAt: Date;\n};\n\ntype DeliveryLocation = {\n  id: number;\n  deliveryPersonId: string;\n  latitude: number;\n  longitude: number;\n  status: string;\n  updatedAt: Date;\n};\n\nexport default function DeliveryPanel() {\n  const { toast } = useToast();\n  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);\n  const [gpsEnabled, setGpsEnabled] = useState(false);\n  const [currentLocation, setCurrentLocation] = useState<{ latitude: number; longitude: number } | null>(null);\n\n  // Fetch assigned deliveries\n  const { data: assignedOrders = [], isLoading: loadingOrders } = useQuery<Order[]>({\n    queryKey: ['/api/delivery/assigned']\n  });\n\n  // Fetch delivery activity logs\n  const { data: activityLogs = [] } = useQuery<StaffActivity[]>({\n    queryKey: ['/api/activity/staff']\n  });\n\n  // Update delivery status mutation\n  const updateStatusMutation = useMutation({\n    mutationFn: async (data: { orderId: number; status: string }) => {\n      return apiRequest('PATCH', `/api/delivery/status/${data.orderId}`, { status: data.status });\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/delivery/assigned'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/activity/staff'] });\n      toast({\n        title: \"Success\",\n        description: \"Delivery status updated successfully\"\n      });\n      \n      // Only clear selection if delivered (order removed from active list)\n      if (variables.status === 'delivered') {\n        setSelectedOrder(null);\n      } else {\n        // Update selected order status locally for immediate UI feedback\n        if (selectedOrder) {\n          setSelectedOrder({ ...selectedOrder, status: variables.status });\n        }\n      }\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update delivery status\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Update location mutation\n  const updateLocationMutation = useMutation({\n    mutationFn: async (data: { latitude: number; longitude: number; status?: string }) => {\n      return apiRequest('POST', '/api/delivery/location', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Location Updated\",\n        description: \"Your GPS location has been updated\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update location\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // GPS tracking effect\n  useEffect(() => {\n    let watchId: number | null = null;\n\n    if (gpsEnabled && 'geolocation' in navigator) {\n      watchId = navigator.geolocation.watchPosition(\n        (position) => {\n          const location = {\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n          };\n          setCurrentLocation(location);\n          \n          // Update location every 2 minutes\n          updateLocationMutation.mutate({\n            ...location,\n            status: assignedOrders.length > 0 ? 'on_delivery' : 'on_duty'\n          });\n        },\n        (error) => {\n          console.error(\"GPS Error:\", error);\n          toast({\n            title: \"GPS Error\",\n            description: \"Unable to access location. Please enable location services.\",\n            variant: \"destructive\"\n          });\n          setGpsEnabled(false);\n        },\n        {\n          enableHighAccuracy: true,\n          timeout: 5000,\n          maximumAge: 120000 // 2 minutes\n        }\n      );\n    }\n\n    return () => {\n      if (watchId !== null) {\n        navigator.geolocation.clearWatch(watchId);\n      }\n    };\n  }, [gpsEnabled, assignedOrders.length]);\n\n  const handleStatusUpdate = (status: string) => {\n    if (!selectedOrder) return;\n    updateStatusMutation.mutate({\n      orderId: selectedOrder.id,\n      status\n    });\n  };\n\n  const getDeliveryLogs = () => {\n    return activityLogs.filter(log => log.actionType === 'delivery_completed');\n  };\n\n  const getTodayDeliveries = () => {\n    const today = new Date().toISOString().split('T')[0];\n    return getDeliveryLogs().filter(log => {\n      const logDate = new Date(log.createdAt).toISOString().split('T')[0];\n      return logDate === today;\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n              <Truck className=\"h-8 w-8\" />\n              Delivery Panel\n            </h1>\n            <p className=\"text-muted-foreground\">Manage deliveries and track locations</p>\n          </div>\n          <Badge variant=\"outline\" className=\"text-lg px-4 py-2\" data-testid=\"badge-role\">\n            Delivery\n          </Badge>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <Card className=\"border-blue-500/50\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Package className=\"h-5 w-5 text-blue-500\" />\n                Today's Deliveries ({getTodayDeliveries().length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {getTodayDeliveries().length === 0 ? (\n                <p className=\"text-center text-muted-foreground py-4\">No deliveries completed today</p>\n              ) : (\n                <div className=\"space-y-2\">\n                  {getTodayDeliveries().map(log => {\n                    const metadata = log.metadata as { orderId?: number; deliveredAt?: string };\n                    return (\n                      <div key={log.id} className=\"flex items-center justify-between p-2 bg-muted rounded-md\" data-testid={`today-delivery-${log.id}`}>\n                        <div>\n                          <p className=\"font-medium\">Order #{metadata.orderId}</p>\n                          <p className=\"text-sm text-muted-foreground\">{new Date(log.createdAt).toLocaleTimeString()}</p>\n                        </div>\n                        <Badge variant=\"default\">Delivered</Badge>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card className={gpsEnabled ? \"border-green-500/50\" : \"\"}>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <MapPin className=\"h-5 w-5\" />\n                GPS Tracking\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium\">Location Services</span>\n                <Button\n                  onClick={() => setGpsEnabled(!gpsEnabled)}\n                  variant={gpsEnabled ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  data-testid=\"button-gps-toggle\"\n                >\n                  <Navigation className=\"h-4 w-4 mr-2\" />\n                  {gpsEnabled ? 'Enabled' : 'Disabled'}\n                </Button>\n              </div>\n              \n              {gpsEnabled && currentLocation && (\n                <div className=\"p-3 bg-muted rounded-md space-y-1\" data-testid=\"gps-location\">\n                  <p className=\"text-sm font-medium\">Current Location:</p>\n                  <p className=\"text-xs text-muted-foreground\">Lat: {currentLocation.latitude.toFixed(6)}</p>\n                  <p className=\"text-xs text-muted-foreground\">Lng: {currentLocation.longitude.toFixed(6)}</p>\n                  <p className=\"text-xs text-green-600\">Updates every 2 minutes</p>\n                </div>\n              )}\n              \n              {!gpsEnabled && (\n                <p className=\"text-sm text-muted-foreground\">Enable GPS to track your delivery location</p>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Assigned Deliveries List */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Assigned Deliveries ({assignedOrders.length})</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {loadingOrders ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <Package className=\"h-6 w-6 animate-spin\" />\n                </div>\n              ) : (\n                <div className=\"space-y-2 max-h-[600px] overflow-y-auto\">\n                  {assignedOrders.length === 0 ? (\n                    <p className=\"text-center text-muted-foreground py-4\">No deliveries assigned</p>\n                  ) : (\n                    assignedOrders.map(order => (\n                      <button\n                        key={order.id}\n                        onClick={() => setSelectedOrder(order)}\n                        className={`w-full text-left p-3 rounded-md transition-colors ${\n                          selectedOrder?.id === order.id\n                            ? 'bg-primary text-primary-foreground'\n                            : 'hover-elevate active-elevate-2'\n                        }`}\n                        data-testid={`button-order-${order.id}`}\n                      >\n                        <p className=\"font-medium\">Order #{order.id}</p>\n                        <p className=\"text-sm opacity-80\">Amount: ${order.totalAmount}</p>\n                        <Badge variant=\"outline\" className=\"mt-1\">{order.status}</Badge>\n                      </button>\n                    ))\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Delivery Actions & History */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {!selectedOrder ? (\n              <Card>\n                <CardContent className=\"py-12 text-center\">\n                  <p className=\"text-muted-foreground\">Select a delivery to update status</p>\n                </CardContent>\n              </Card>\n            ) : (\n              <Tabs defaultValue=\"update\" className=\"space-y-4\">\n                <TabsList className=\"grid w-full grid-cols-2\">\n                  <TabsTrigger value=\"update\" data-testid=\"tab-update\">Update Status</TabsTrigger>\n                  <TabsTrigger value=\"history\" data-testid=\"tab-history\">Delivery History</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"update\" className=\"space-y-4\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Order #{selectedOrder.id}</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <label className=\"text-sm font-medium text-muted-foreground\">Customer ID</label>\n                          <p className=\"text-lg font-mono\" data-testid=\"text-customer-id\">{selectedOrder.userId}</p>\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium text-muted-foreground\">Amount</label>\n                          <p className=\"text-lg font-medium\" data-testid=\"text-amount\">${selectedOrder.totalAmount}</p>\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium text-muted-foreground\">Status</label>\n                          <Badge variant=\"outline\" className=\"text-base\" data-testid=\"text-status\">{selectedOrder.status}</Badge>\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium text-muted-foreground\">Delivery Date</label>\n                          <p className=\"text-sm\" data-testid=\"text-delivery-date\">{new Date(selectedOrder.deliveryDate).toLocaleDateString()}</p>\n                        </div>\n                      </div>\n\n                      <div className=\"border-t pt-4 space-y-3\">\n                        <h3 className=\"font-medium\">Update Delivery Status</h3>\n                        \n                        {selectedOrder.status === 'prepared' && (\n                          <Button\n                            onClick={() => handleStatusUpdate('in_transit')}\n                            disabled={updateStatusMutation.isPending}\n                            className=\"w-full\"\n                            data-testid=\"button-start-delivery\"\n                          >\n                            <Truck className=\"h-4 w-4 mr-2\" />\n                            Start Delivery (In Transit)\n                          </Button>\n                        )}\n\n                        {selectedOrder.status === 'in_transit' && (\n                          <Button\n                            onClick={() => handleStatusUpdate('delivered')}\n                            disabled={updateStatusMutation.isPending}\n                            className=\"w-full\"\n                            data-testid=\"button-mark-delivered\"\n                          >\n                            <CheckCircle className=\"h-4 w-4 mr-2\" />\n                            Mark as Delivered\n                          </Button>\n                        )}\n\n                        {selectedOrder.status === 'delivered' && (\n                          <div className=\"p-4 bg-green-500/10 border border-green-500/20 rounded-md\">\n                            <p className=\"text-sm font-medium text-green-700 dark:text-green-400\">\n                              ✓ This order has been delivered\n                            </p>\n                          </div>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"history\" className=\"space-y-4\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>All Deliveries ({getDeliveryLogs().length})</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      {getDeliveryLogs().length === 0 ? (\n                        <p className=\"text-center text-muted-foreground py-8\">No delivery history</p>\n                      ) : (\n                        <div className=\"space-y-3 max-h-[500px] overflow-y-auto\">\n                          {getDeliveryLogs().map(log => {\n                            const metadata = log.metadata as { orderId?: number; deliveredAt?: string };\n                            return (\n                              <div key={log.id} className=\"flex items-center justify-between p-3 bg-muted rounded-md\" data-testid={`history-${log.id}`}>\n                                <div>\n                                  <p className=\"font-medium\">Order #{metadata.orderId}</p>\n                                  <p className=\"text-sm text-muted-foreground\">\n                                    {new Date(log.createdAt).toLocaleString()}\n                                  </p>\n                                </div>\n                                <Badge variant=\"default\">Delivered</Badge>\n                              </div>\n                            );\n                          })}\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n              </Tabs>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16450},"server/pdfGenerator.ts":{"content":"import PDFDocument from 'pdfkit';\nimport { Readable } from 'stream';\n\ninterface DietChartData {\n  customerName: string;\n  customerId: string;\n  macros?: any;\n  weeklyPlan?: any;\n  nutritionistName?: string;\n  generatedDate: Date;\n}\n\ninterface ConsolidatedReportData {\n  customerName: string;\n  customerId: string;\n  stages: {\n    stage: number;\n    status: string;\n    completedAt?: Date;\n    documents: Array<{\n      label: string;\n      url: string;\n      uploadedAt: Date;\n    }>;\n  }[];\n  dietPlan?: {\n    macros?: any;\n    weeklyPlan?: any;\n  };\n  acknowledgements?: Array<{\n    taskType: string;\n    status: string;\n    createdAt: Date;\n  }>;\n}\n\nexport function generateDietChartPDF(data: DietChartData): Promise<Buffer> {\n  return new Promise((resolve, reject) => {\n    const doc = new PDFDocument({ margin: 50 });\n    const chunks: Buffer[] = [];\n\n    doc.on('data', (chunk) => chunks.push(chunk));\n    doc.on('end', () => resolve(Buffer.concat(chunks)));\n    doc.on('error', reject);\n\n    // Header\n    doc.fontSize(24).text('Personalized Diet Chart', { align: 'center' });\n    doc.moveDown(0.5);\n    doc.fontSize(10).text(`Generated on ${data.generatedDate.toLocaleDateString()}`, { align: 'center' });\n    doc.moveDown(2);\n\n    // Patient Information\n    doc.fontSize(16).text('Patient Information', { underline: true });\n    doc.moveDown(0.5);\n    doc.fontSize(12).text(`Name: ${data.customerName}`);\n    doc.text(`Patient ID: ${data.customerId}`);\n    doc.moveDown(1.5);\n\n    // Macros Section\n    if (data.macros) {\n      doc.fontSize(16).text('Nutritional Macros', { underline: true });\n      doc.moveDown(0.5);\n      \n      if (typeof data.macros === 'object') {\n        Object.entries(data.macros).forEach(([key, value]) => {\n          doc.fontSize(12).text(`${key}: ${value}`);\n        });\n      } else {\n        doc.fontSize(12).text(String(data.macros));\n      }\n      doc.moveDown(1.5);\n    }\n\n    // Weekly Plan Section\n    if (data.weeklyPlan) {\n      doc.fontSize(16).text('Weekly Meal Plan', { underline: true });\n      doc.moveDown(0.5);\n      \n      if (typeof data.weeklyPlan === 'object' && data.weeklyPlan !== null) {\n        Object.entries(data.weeklyPlan).forEach(([day, meals]) => {\n          doc.fontSize(14).text(day, { underline: true });\n          if (typeof meals === 'object' && meals !== null) {\n            Object.entries(meals).forEach(([mealType, description]) => {\n              doc.fontSize(12).text(`  ${mealType}: ${description}`);\n            });\n          } else {\n            doc.fontSize(12).text(`  ${meals}`);\n          }\n          doc.moveDown(0.5);\n        });\n      } else {\n        doc.fontSize(12).text(String(data.weeklyPlan));\n      }\n      doc.moveDown(1.5);\n    }\n\n    // Footer with nutritionist signature\n    doc.moveDown(2);\n    doc.fontSize(12).text('Prepared by:', { continued: false });\n    doc.text(data.nutritionistName || 'Clinical Nutritionist');\n    doc.moveDown(0.5);\n    doc.fillColor('gray').fontSize(10).text('This diet plan is personalized based on your health profile and clinical assessment.', {\n      align: 'center'\n    });\n\n    doc.end();\n  });\n}\n\nexport function generateConsolidatedReportPDF(data: ConsolidatedReportData): Promise<Buffer> {\n  return new Promise((resolve, reject) => {\n    const doc = new PDFDocument({ margin: 50 });\n    const chunks: Buffer[] = [];\n\n    doc.on('data', (chunk) => chunks.push(chunk));\n    doc.on('end', () => resolve(Buffer.concat(chunks)));\n    doc.on('error', reject);\n\n    // Header\n    doc.fontSize(24).text('Clinical Progress Report', { align: 'center' });\n    doc.moveDown(0.5);\n    doc.fontSize(10).text(`Generated on ${new Date().toLocaleDateString()}`, { align: 'center' });\n    doc.moveDown(2);\n\n    // Patient Information\n    doc.fontSize(16).text('Patient Information', { underline: true });\n    doc.moveDown(0.5);\n    doc.fontSize(12).text(`Name: ${data.customerName}`);\n    doc.text(`Patient ID: ${data.customerId}`);\n    doc.moveDown(1.5);\n\n    // Clinical Journey Summary\n    doc.fontSize(16).text('Clinical Journey Summary', { underline: true });\n    doc.moveDown(0.5);\n\n    data.stages.forEach((stage) => {\n      const stageNames = [\n        'Initial Physician Consultation',\n        'Test Collection',\n        'Discussion',\n        'Diet Chart',\n        'Payment',\n        'Meal Delivery'\n      ];\n      \n      doc.fontSize(14).text(`Stage ${stage.stage}: ${stageNames[stage.stage - 1] || 'Unknown'}`, { underline: true });\n      doc.fontSize(12).text(`Status: ${stage.status}`);\n      if (stage.completedAt) {\n        doc.text(`Completed: ${stage.completedAt.toLocaleDateString()}`);\n      }\n      \n      if (stage.documents && stage.documents.length > 0) {\n        doc.text('Documents:');\n        stage.documents.forEach((docItem) => {\n          doc.fontSize(11).text(`  • ${docItem.label} (${docItem.uploadedAt.toLocaleDateString()})`);\n        });\n      }\n      doc.moveDown(1);\n    });\n\n    // Diet Plan Summary (if available)\n    if (data.dietPlan) {\n      doc.addPage();\n      doc.fontSize(16).text('Current Diet Plan', { underline: true });\n      doc.moveDown(0.5);\n\n      if (data.dietPlan.macros) {\n        doc.fontSize(14).text('Macros:', { underline: true });\n        if (typeof data.dietPlan.macros === 'object') {\n          Object.entries(data.dietPlan.macros).forEach(([key, value]) => {\n            doc.fontSize(12).text(`${key}: ${value}`);\n          });\n        } else {\n          doc.fontSize(12).text(String(data.dietPlan.macros));\n        }\n        doc.moveDown(1);\n      }\n\n      if (data.dietPlan.weeklyPlan) {\n        doc.fontSize(14).text('Weekly Plan Summary:', { underline: true });\n        doc.fontSize(12).text(typeof data.dietPlan.weeklyPlan === 'object' \n          ? JSON.stringify(data.dietPlan.weeklyPlan, null, 2)\n          : String(data.dietPlan.weeklyPlan));\n      }\n    }\n\n    // Acknowledgements Summary\n    if (data.acknowledgements && data.acknowledgements.length > 0) {\n      doc.addPage();\n      doc.fontSize(16).text('Task Acknowledgements', { underline: true });\n      doc.moveDown(0.5);\n\n      data.acknowledgements.forEach((ack) => {\n        doc.fontSize(12).text(`• ${ack.taskType} - ${ack.status} (${ack.createdAt.toLocaleDateString()})`);\n      });\n    }\n\n    // Footer\n    doc.moveDown(2);\n    doc.fillColor('gray').fontSize(10).text('This is an automated consolidated report of your clinical journey.', {\n      align: 'center'\n    });\n    doc.text('For questions, please contact your clinical team.', {\n      align: 'center'\n    });\n\n    doc.end();\n  });\n}\n","size_bytes":6550},"client/src/components/RoleBasedSidebar.tsx":{"content":"import { Home, FileText, Stethoscope, Microscope, Apple, ChefHat, Truck, Users, Settings, Activity } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Link, useLocation } from \"wouter\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar\";\n\ntype MenuItem = {\n  title: string;\n  url: string;\n  icon: React.ComponentType<{ className?: string }>;\n};\n\nexport function RoleBasedSidebar() {\n  const { user } = useAuth();\n  const [location] = useLocation();\n\n  const getMenuItems = (): MenuItem[] => {\n    if (!user) return [];\n\n    const role = user.role;\n\n    switch (role) {\n      case 'admin':\n        return [\n          { title: \"Dashboard\", url: \"/admin\", icon: Users },\n          { title: \"Staff Monitoring\", url: \"/admin#staff\", icon: Activity },\n          { title: \"Settings\", url: \"/admin#settings\", icon: Settings },\n        ];\n      \n      case 'consultant':\n        return [\n          { title: \"Customers\", url: \"/consultant\", icon: Users },\n          { title: \"Upload Reports\", url: \"/consultant#upload\", icon: FileText },\n          { title: \"Acknowledgements\", url: \"/consultant#acknowledgements\", icon: Activity },\n        ];\n      \n      case 'lab_technician':\n        return [\n          { title: \"Test Queue\", url: \"/lab\", icon: Microscope },\n          { title: \"Upload Results\", url: \"/lab#upload\", icon: FileText },\n          { title: \"Acknowledgements\", url: \"/lab#acknowledgements\", icon: Activity },\n        ];\n      \n      case 'nutritionist':\n        return [\n          { title: \"Customers\", url: \"/nutritionist\", icon: Apple },\n          { title: \"Diet Charts\", url: \"/nutritionist#charts\", icon: FileText },\n          { title: \"Acknowledgements\", url: \"/nutritionist#acknowledgements\", icon: Activity },\n        ];\n      \n      case 'chef':\n        return [\n          { title: \"Active Plans\", url: \"/chef\", icon: ChefHat },\n          { title: \"Preparation\", url: \"/chef#prepare\", icon: Activity },\n        ];\n      \n      case 'delivery':\n        return [\n          { title: \"Deliveries\", url: \"/delivery-panel\", icon: Truck },\n          { title: \"GPS Tracking\", url: \"/delivery-panel#gps\", icon: Activity },\n        ];\n      \n      case 'customer':\n      default:\n        return [\n          { title: \"Dashboard\", url: \"/dashboard\", icon: Home },\n          { title: \"Profile\", url: \"/profile\", icon: Settings },\n        ];\n    }\n  };\n\n  const menuItems = getMenuItems();\n  const roleLabel = user?.role?.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase()) || 'User';\n\n  return (\n    <Sidebar data-testid=\"sidebar-role-based\">\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>{roleLabel} Panel</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild isActive={location === item.url || location.startsWith(item.url + '#')}>\n                    <Link href={item.url} data-testid={`link-${item.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  );\n}\n","size_bytes":3554},"client/src/components/AuthenticatedLayout.tsx":{"content":"import { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { RoleBasedSidebar } from \"@/components/RoleBasedSidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Moon, Sun } from \"lucide-react\";\nimport { useTheme } from \"@/components/ThemeProvider\";\n\ntype AuthenticatedLayoutProps = {\n  children: React.ReactNode;\n};\n\nexport function AuthenticatedLayout({ children }: AuthenticatedLayoutProps) {\n  const { theme, setTheme } = useTheme();\n\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <RoleBasedSidebar />\n        <div className=\"flex flex-col flex-1\">\n          <header className=\"flex items-center justify-between p-2 border-b\">\n            <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}\n              data-testid=\"button-theme-toggle\"\n            >\n              {theme === 'light' ? <Moon className=\"h-5 w-5\" /> : <Sun className=\"h-5 w-5\" />}\n            </Button>\n          </header>\n          <main className=\"flex-1 overflow-auto\">\n            {children}\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n","size_bytes":1405}},"version":2}